{"version":3,"sources":["../node_modules/tslib/tslib.es6.js","../node_modules/graphql/jsutils/inspect.js","../node_modules/graphql/language/visitor.js","../node_modules/process/browser.js","../node_modules/ts-invariant/lib/invariant.esm.js","../node_modules/fast-json-stable-stringify/index.js","../node_modules/@wry/equality/lib/equality.esm.js","../node_modules/apollo-utilities/lib/bundle.esm.js","../node_modules/zen-observable/lib/Observable.js","../node_modules/zen-observable/index.js","../node_modules/zen-observable-ts/lib/bundle.esm.js","../node_modules/apollo-link/lib/bundle.esm.js","../node_modules/symbol-observable/es/ponyfill.js","../node_modules/symbol-observable/es/index.js","../node_modules/apollo-client/bundle.esm.js","../node_modules/apollo-cache/lib/bundle.esm.js","../node_modules/@wry/context/lib/context.esm.js","../node_modules/optimism/lib/bundle.esm.js","../node_modules/apollo-cache-inmemory/lib/bundle.esm.js","../node_modules/graphql/language/printer.js","../node_modules/apollo-link-http-common/lib/bundle.esm.js","../node_modules/apollo-link-http/lib/bundle.esm.js","../node_modules/graphql-anywhere/lib/graphql.js","../node_modules/graphql-anywhere/lib/async.js","../node_modules/graphql/jsutils/defineToJSON.mjs","../node_modules/graphql/jsutils/defineToStringTag.mjs","../node_modules/graphql/jsutils/instanceOf.mjs","../node_modules/graphql/jsutils/inspect.mjs","../node_modules/graphql/jsutils/invariant.mjs","../node_modules/graphql/jsutils/keyMap.mjs","../node_modules/graphql/language/kinds.mjs","../node_modules/graphql/jsutils/keyValMap.mjs","../node_modules/graphql/jsutils/isInvalid.mjs","../node_modules/graphql/utilities/valueFromASTUntyped.mjs","../node_modules/graphql/type/definition.mjs","../node_modules/graphql/jsutils/isFinite.mjs","../node_modules/graphql/jsutils/isInteger.mjs","../node_modules/graphql/type/scalars.mjs","../node_modules/graphql/language/directiveLocation.mjs","../node_modules/graphql/type/directives.mjs","../node_modules/graphql/jsutils/objectValues.mjs","../node_modules/iterall/index.mjs","../node_modules/graphql/jsutils/isNullish.mjs","../node_modules/graphql/utilities/astFromValue.mjs","../node_modules/graphql/language/printer.mjs","../node_modules/graphql/type/introspection.mjs","../node_modules/graphql/jsutils/find.mjs","../node_modules/graphql/type/schema.mjs","../node_modules/graphql/language/location.js","../node_modules/graphql/error/printError.js","../node_modules/graphql/error/GraphQLError.mjs","../node_modules/graphql/utilities/assertValidName.mjs","../node_modules/graphql/utilities/typeComparators.mjs","../node_modules/graphql/type/validate.mjs","../node_modules/graphql/jsutils/invariant.js","../node_modules/graphql/jsutils/defineToStringTag.js","../node_modules/graphql/language/source.js","../node_modules/graphql/error/GraphQLError.js","../node_modules/graphql/error/syntaxError.js","../node_modules/graphql/error/locatedError.js","../node_modules/graphql/error/formatError.js","../node_modules/graphql/error/index.js","../node_modules/graphql/language/blockStringValue.js","../node_modules/graphql/language/lexer.js","../node_modules/graphql/language/kinds.js","../node_modules/graphql/language/directiveLocation.js","../node_modules/graphql/language/parser.mjs","../node_modules/graphql/language/visitor.mjs","../node_modules/graphql/utilities/typeFromAST.mjs","../node_modules/graphql/utilities/TypeInfo.mjs","../node_modules/graphql/language/predicates.mjs","../node_modules/graphql/validation/rules/ExecutableDefinitions.mjs","../node_modules/graphql/validation/rules/UniqueOperationNames.mjs","../node_modules/graphql/validation/rules/LoneAnonymousOperation.mjs","../node_modules/graphql/validation/rules/SingleFieldSubscriptions.mjs","../node_modules/graphql/jsutils/suggestionList.mjs","../node_modules/graphql/jsutils/orList.mjs","../node_modules/graphql/jsutils/quotedOrList.mjs","../node_modules/graphql/validation/rules/KnownTypeNames.mjs","../node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.mjs","../node_modules/graphql/validation/rules/VariablesAreInputTypes.mjs","../node_modules/graphql/validation/rules/ScalarLeafs.mjs","../node_modules/graphql/validation/rules/FieldsOnCorrectType.mjs","../node_modules/graphql/validation/rules/UniqueFragmentNames.mjs","../node_modules/graphql/validation/rules/KnownFragmentNames.mjs","../node_modules/graphql/validation/rules/NoUnusedFragments.mjs","../node_modules/graphql/validation/rules/PossibleFragmentSpreads.mjs","../node_modules/graphql/validation/rules/NoFragmentCycles.mjs","../node_modules/graphql/validation/rules/UniqueVariableNames.mjs","../node_modules/graphql/validation/rules/NoUndefinedVariables.mjs","../node_modules/graphql/validation/rules/NoUnusedVariables.mjs","../node_modules/graphql/validation/rules/KnownDirectives.mjs","../node_modules/graphql/validation/rules/UniqueDirectivesPerLocation.mjs","../node_modules/graphql/validation/rules/KnownArgumentNames.mjs","../node_modules/graphql/validation/rules/UniqueArgumentNames.mjs","../node_modules/graphql/validation/rules/ValuesOfCorrectType.mjs","../node_modules/graphql/validation/rules/ProvidedRequiredArguments.mjs","../node_modules/graphql/validation/rules/VariablesInAllowedPosition.mjs","../node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.mjs","../node_modules/graphql/validation/rules/UniqueInputFieldNames.mjs","../node_modules/graphql/validation/rules/LoneSchemaDefinition.mjs","../node_modules/graphql/validation/specifiedRules.mjs","../node_modules/graphql/validation/ValidationContext.mjs","../node_modules/graphql/validation/validate.mjs","../node_modules/graphql/error/locatedError.mjs","../node_modules/graphql/jsutils/isPromise.mjs","../node_modules/graphql/jsutils/memoize3.mjs","../node_modules/graphql/jsutils/promiseForObject.mjs","../node_modules/graphql/jsutils/promiseReduce.mjs","../node_modules/graphql/utilities/getOperationRootType.mjs","../node_modules/graphql/utilities/coerceValue.mjs","../node_modules/graphql/utilities/valueFromAST.mjs","../node_modules/graphql/execution/values.mjs","../node_modules/graphql/execution/execute.mjs","../node_modules/graphql/graphql.mjs","../node_modules/graphql/type/index.mjs","../node_modules/graphql/language/location.mjs","../node_modules/graphql/language/index.mjs","../node_modules/graphql/execution/index.mjs","../node_modules/graphql/subscription/mapAsyncIterator.mjs","../node_modules/graphql/subscription/subscribe.mjs","../node_modules/graphql/subscription/index.mjs","../node_modules/graphql/validation/index.mjs","../node_modules/graphql/error/index.mjs","../node_modules/graphql/utilities/introspectionQuery.mjs","../node_modules/graphql/utilities/getOperationAST.mjs","../node_modules/graphql/utilities/introspectionFromSchema.mjs","../node_modules/graphql/utilities/buildClientSchema.mjs","../node_modules/graphql/language/blockStringValue.mjs","../node_modules/graphql/language/lexer.mjs","../node_modules/graphql/utilities/buildASTSchema.mjs","../node_modules/graphql/utilities/extendSchema.mjs","../node_modules/graphql/utilities/lexicographicSortSchema.mjs","../node_modules/graphql/utilities/schemaPrinter.mjs","../node_modules/graphql/utilities/isValidJSValue.mjs","../node_modules/graphql/utilities/isValidLiteralValue.mjs","../node_modules/graphql/utilities/concatAST.mjs","../node_modules/graphql/utilities/separateOperations.mjs","../node_modules/graphql/utilities/findBreakingChanges.mjs","../node_modules/graphql/utilities/findDeprecatedUsages.mjs","../node_modules/graphql/utilities/index.mjs","../node_modules/graphql/index.mjs","../node_modules/apollo-link-state/lib/utils.js","../node_modules/apollo-link-state/lib/index.js","../node_modules/apollo-link-error/lib/bundle.esm.js","../node_modules/graphql/language/parser.js","../node_modules/graphql-tag/src/index.js","../node_modules/apollo-boost/lib/index.js","index.js"],"names":["__extends","__rest","__decorate","__param","__metadata","__awaiter","__generator","__exportStar","__values","__read","__spread","__spreadArrays","__await","__asyncGenerator","__asyncDelegator","__asyncValues","__makeTemplateObject","__importStar","__importDefault","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","paramIndex","decorator","metadataKey","metadataValue","metadata","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","rejected","result","done","then","body","_","label","sent","trys","ops","f","y","g","verb","Symbol","iterator","v","op","TypeError","pop","push","m","exports","o","ar","error","concat","il","k","a","j","jl","asyncIterator","q","resume","settle","fulfill","shift","cooked","raw","mod","__esModule","default","inspect","_typeof","obj","JSON","stringify","name","isArray","map","join","properties","keys","String","visit","visitInParallel","visitWithTypeInfo","getVisitFn","BREAK","QueryDocumentKeys","_inspect","_interopRequireDefault","require","Name","Document","OperationDefinition","VariableDefinition","Variable","SelectionSet","Field","Argument","FragmentSpread","InlineFragment","FragmentDefinition","IntValue","FloatValue","StringValue","BooleanValue","NullValue","EnumValue","ListValue","ObjectValue","ObjectField","Directive","NamedType","ListType","NonNullType","SchemaDefinition","OperationTypeDefinition","ScalarTypeDefinition","ObjectTypeDefinition","FieldDefinition","InputValueDefinition","InterfaceTypeDefinition","UnionTypeDefinition","EnumTypeDefinition","EnumValueDefinition","InputObjectTypeDefinition","DirectiveDefinition","SchemaExtension","ScalarTypeExtension","ObjectTypeExtension","InterfaceTypeExtension","UnionTypeExtension","EnumTypeExtension","InputObjectTypeExtension","root","visitor","visitorKeys","undefined","stack","inArray","index","edits","node","parent","path","ancestors","newRoot","isLeaving","isEdited","slice","clone","editOffset","ii","editKey","editValue","splice","prev","isNode","Error","visitFn","kind","maybeNode","Boolean","visitors","skipping","enter","fn","leave","typeInfo","kindVisitor","kindSpecificVisitor","specificVisitor","specificKindVisitor","process","module","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","setTimeout","clearTimeout","runTimeout","fun","runClearTimeout","marker","queue","draining","currentQueue","queueIndex","cleanUpNextTick","drainQueue","timeout","len","run","nextTick","args","Item","array","title","browser","env","argv","version","versions","noop","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","genericMessage","_a","proto","InvariantError","_super","message","_this","framesToPop","invariant","condition","wrapConsoleMethod","method","console","warn","processStub","Function","atLeastWeTried","invariant$1","toString","previousComparisons","Map","equal","check","clear","aTag","bTag","previouslyCompared","aKeys","bKeys","keyCount","size","aIterator","entries","isMap","info","aKey","aValue","has","get","bSet","set","Set","add","isScalarValue","isNumberValue","isStringValue","isBooleanValue","isIntValue","isFloatValue","isVariable","isObjectValue","isListValue","isEnumValue","isNullValue","valueToObjectRepresentation","argObj","variables","Number","nestedArgObj_1","fields","variableValue","values","listValue","nestedArgArrayObj","storeKeyNameFromField","field","directivesObj","directives","forEach","directive","getStoreKeyName","KNOWN_DIRECTIVES","fieldName","filterKeys","sort","queryArgs_1","filteredArgs_1","completeFieldName","stringifiedArgs","argumentsObjectFromField","argObj_1","resultKeyNameFromField","alias","isField","selection","isInlineFragment","isIdValue","idObject","type","generated","toIdValue","idConfig","id","typename","isJsonValue","jsonObject","defaultValueFromVariable","valueFromNode","onVariable","parseInt","parseFloat","_i","getDirectiveInfoFromField","directiveObj_1","shouldInclude","getInclusionDirectives","every","ifArgument","evaledValue","getDirectiveNames","doc","names","hasDirectives","some","hasClientExports","document","isInclusionDirective","filter","directiveArguments","directiveName","ifValue","getFragmentQueryDocument","fragmentName","actualFragmentName","fragments","definitions","definition","operation","query","selectionSet","selections","sources","source","getMutationDefinition","checkDocument","mutationDef","operations","getOperationDefinition","getOperationDefinitionOrDie","def","getOperationName","x","getFragmentDefinitions","getQueryDefinition","queryDef","getFragmentDefinition","fragmentDef","getMainDefinition","queryDoc","fragmentDefinition","createFragmentMap","symTable","fragment","getDefaultValues","variableDefinitions","defaultValues","defaultValue","variable","defaultValueObj","variablesInOperation","filterInPlace","test","context","elem","TYPENAME_FIELD","isEmpty","nullIfDocIsEmpty","getDirectiveMatcher","directiveMatcher","removeDirectivesFromDocument","variablesInUse","variablesToRemove","fragmentSpreadsInUse","fragmentSpreadsToRemove","modifiedDoc","_key","shouldRemoveField","remove","arg","getAllFragmentSpreadsFromSelectionSet","frag","removeArgumentsFromDocument","fs","removeFragmentSpreadFromDocument","addTypenameToDocument","skip","lastIndexOf","connectionRemoveConfig","willRemove","removeConnectionDirectiveFromDocument","hasDirectivesInSelectionSet","nestedCheck","hasDirectivesInSelection","getDirectivesFromDocument","parentPath","_parent","currentPath","startsWith","selectionsWithDirectives","getArgumentMatcher","config","argumentMatcher","argument","aConfig","argMatcher","varDef","argConfig","argMatchCount_1","allFragments","buildQueryFromSelectionSet","definitionOperation","removeClientSetsFromDocument","isTypenameOnly","canUseWeakMap","WeakMap","navigator","product","cloneDeep","cloneDeepHelper","val","seen","copy_1","child","copy_2","getPrototypeOf","getEnv","isEnv","isProduction","isDevelopment","isTest","tryFunctionOrLogError","graphQLResultHasError","errors","deepFreeze","freeze","getOwnPropertyNames","prop","isFrozen","maybeDeepFreeze","symbolIsPolyfilled","mergeDeep","mergeDeepArray","count","pastCopies","shallowCopyForMerge","mergeHelper","isObject","isExtensible","sourceKey","sourceValue","targetValue","haveWarned","warnOnceInDevelopment","msg","stripSymbols","data","parse","Observable","zenObservable","validateOperation","OPERATION_FIELDS","LinkError","link","isTerminating","request","toPromise","observable","completed","subscribe","makePromise","fromPromise","promise","observer","complete","catch","bind","fromError","errorValue","transformOperation","transformedOperation","extensions","operationName","createOperation","starting","setContext","getContext","enumerable","getKey","passthrough","forward","of","toLink","handler","ApolloLink","empty","from","links","reduce","split","left","right","leftLink","rightLink","first","second","firstLink","nextLink","execute","symbolObservablePonyfill","self","window","global","NetworkStatus","isNetworkRequestInFlight","networkStatus","$$observable","Observable$1","isNonEmptyArray","isApolloError","err","generateErrorMessage","graphQLErrors","graphQLError","errorMessage","networkError","replace","ApolloError","extraInfo","FetchType","hasError","storeValue","policy","ObservableQuery","queryManager","options","_b","shouldSubscribe","onSubscribe","observers","subscriptions","isTornDown","queryId","generateQueryId","opDef","queryName","delete","removeQuery","subscription","unsubscribe","currentResult","getCurrentResult","lastResult","lastError","loading","getCurrentQueryResult","partial","queryStoreValue","queryStore","fetchPolicy","isNetworkFetchPolicy","errorPolicy","ready","updateLastResult","stale","isDifferentFromLastResult","newResult","snapshot","lastResultSnapshot","getLastResult","getLastError","resetLastResults","resetQueryStoreErrors","refetch","fetchQuery","fetchMore","fetchMoreOptions","updateQuery","combinedOptions","qid","normal","fetchMoreResult","previousResult","stopQuery","subscribeToMore","startGraphQLSubscription","subscriptionData","previous","onError","setOptions","opts","oldFetchPolicy","pollInterval","startPolling","stopPolling","setVariables","fetchResults","tryFetch","mapFn","getQueryWithPreviousResult","dataStore","markUpdateQueryResult","broadcastQueries","stopPollingQuery","assertNotCacheFirstOrOnly","startPollingQuery","assumeImmutableResults","subObserver","_subscription","_observer","defaultSubscriptionObserverErrorCallback","setUpQuery","tearDownQuery","addObservableQuery","iterateObserversSafely","observeQuery","previousResult_1","query_1","fetchPolicy_1","transform","getLocalState","addExportedVariables","previousVariables","serverQuery","sub","removeObservableQuery","observersWithMethod","obs","obsQuery","MutationStore","store","getStore","mutationId","initMutation","mutation","markMutationError","markMutationResult","reset","QueryStore","initQuery","previousQuery","isSetVariables","storePreviousVariables","isPoll","poll","isRefetch","fetchMoreForQueryId","markQueryResult","markQueryError","markQueryResultClient","observableQueryIds","capitalizeFirstLetter","str","charAt","toUpperCase","LocalState","cache","client","resolvers","fragmentMatcher","addResolvers","setFragmentMatcher","resolverGroup","setResolvers","getResolvers","runResolvers","remoteResult","onlyRunForcedResolvers","_c","resolveDocument","localResult","getFragmentMatcher","clientQuery","prepareContext","newContext","getCacheKey","dataIdFromObject","buildRootValueFromCache","exportedVariables","shouldForceResolvers","forceResolvers","diff","returnPartialData","optimistic","rootValue","mainDefinition","fragmentMap","defaultOperationType","execContext","resolveSelectionSet","resultsToMerge","typeCondition","resolveField","fieldResult","fragmentResult","all","aliasedFieldName","aliasUsed","defaultResult","resultPromise","resolverType","resolverMap","__typename","resolveSubSelectedArray","item","multiplex","inner","asyncMap","activeNextCount","QueryManager","queryDeduplication","onBroadcast","_d","ssrMode","_e","clientAwareness","localState","mutationStore","idCounter","queries","fetchQueryRejectFns","transformCache","inFlightLinkObservables","pollingInfoByQueryId","getCache","stop","_info","stopQueryNoBroadcast","mutate","optimisticResponse","updateQueriesByName","updateQueries","refetchQueries","awaitRefetchQueries","updateWithProxyFn","update","generateUpdateQueriesInfo","_f","setQuery","getVariables","ret","observableQuery","updater","markMutationInit","storeResult","getObservableFromLink","markMutationComplete","refetchQueryPromises","refetchQuery","queryOptions","fetchType","isNetworkOnly","needToFetch","shouldFetch","requestId","cancel","networkResult","updateQueryWatch","lastRequestId","invalidated","invalidate","fetchRequest","getQuery","hasForcedResolvers","newData","queryListenerForObserver","invoke","networkStatusChanged","shouldNotifyIfLoading","notifyOnNetworkStatusChange","hasGraphQLErrors","isMissing","errorStatusChanged","diffResult","resultFromStore","transformed","transformDocument","forLink","transformForLink","cacheEntry_1","defaultVars","watchQuery","transformedOptions","watchedQuery","stopQueryInStore","stopQueryInStoreNoBroadcast","addQueryListener","listener","watch","callback","clearStore","resetIds","resetStore","reFetchObservableQueries","includeStandby","observableQueryPromises","startQuery","makeObservable","markSubscriptionResult","observablePromise_1","queryIdOrObservable","foundObserveableQuery","deduplication","inFlightLinkObservables_1","forceFetch","byVariables_1","varJson_1","cleanup","cleanupSub_1","errorsFromStore","fqrfId","result_1","newInfo","checkInFlight","interval","maybeFetch_1","poll_1","DataStore","initialCache","ignoreErrors","writeWithErrors","write","dataId","optimistic_1","recordOptimisticTransaction","orig","cacheWrites_1","updateQueries_1","currentQueryResult","nextQueryResult","mutationResult","queryVariables","performTransaction","removeOptimistic","hasSuggestedDevtools","ApolloClient","defaultOptions","resetStoreCallbacks","clearStoreCallbacks","ssrForceFetchDelay","connectToDevTools","typeDefs","clientAwarenessName","clientAwarenessVersion","disableNetworkFetches","defaultConnectToDevTools","__APOLLO_CLIENT__","top","__APOLLO_DEVTOOLS_GLOBAL_HOOK__","userAgent","debug","devToolsHookCb","action","state","mutations","dataWithOptimisticResults","extract","readQuery","readFragment","writeQuery","writeFragment","writeData","__actionHookForDevTools","cb","__requestRaw","payload","initQueryManager","onResetStore","onClearStore","restore","serializedState","setLocalStateFragmentMatcher","queryFromPojo","selectionSetFromObj","out","fragmentFromPojo","nestedSelSet","justTypenameQuery","ApolloCache","read","rootId","typenameResult","dataToWrite","Cache","currentContext","MISSING_VALUE","makeSlotClass","Slot","Date","now","Math","random","hasValue","context_1","slots","getValue","withValue","saved","noContext","globalKey","host","writable","configurable","setTimeoutWithContext","delay","asyncFromGen","genFn","gen","boundNext","boundThrow","throw","invokeNext","isPromiseLike","invokeThrow","wrappedFibers","wrapYieldingFiberMethods","Fiber","wrap","defaultDispose","max","dispose","Infinity","newest","oldest","entry","getEntry","older","newer","clean","parentEntrySlot","reusableEmptyArray","emptySetPool","POOL_TARGET_SIZE","assert","optionalMessage","valueIs","valueGet","valueCopy","Entry","parents","childValues","dirtyChildren","dirty","recomputing","recompute","rememberParent","maybeReportOrphan","mightBeDirty","reallyRecompute","setDirty","reportDirty","maybeUnsubscribe","forgetChildren","forgetChild","reportDirtyChild","reportCleanChild","originalChildren","recomputeNewValue","maybeSubscribe","setClean","reportClean","childValue","removeDirtyChild","dc","reportOrphan","children","_value","KeyTrie","weakness","lookup","lookupArray","getChildTrie","isObjRef","weak","strong","keyTrie","defaultMakeCacheKey","caches","originalFunction","pow","disposable","makeCacheKey","shouldWarn","answer","HeuristicFragmentMatcher","ensureReady","canBypassInit","match","idValue","isRootQuery","IntrospectionFragmentMatcher","introspectionQueryResultData","possibleTypesMap","parseIntrospectionResult","isReady","implementingTypes","introspectionResultData","typeMap","__schema","types","possibleTypes","implementingType","hasOwn","DepTrackingCache","depend","toObject","oldValue","defaultNormalizedCacheFactory","seed","StoreReader","cacheKeyRoot","freezeResults","executeStoreQuery","executeSelectionSet","executeSubSelectedArray","contextValue","variableValues","readQueryFromStore","diffQueryAgainstStore","fragmentMatcherFunction","queryDefinition","cacheRedirects","execResult","hasMissingFields","missing","tolerable","object","defaultFragmentMatcher","finalResult","objectsToMerge","handleMissing","executeField","fragmentExecResult","resultKey","readStoreResult","readStoreResolver","combineExecResults","assertSelectionSetForIdValue","execResults","childResult","assertIdValue","storeKeyName","fieldValue","resolver","storeObj","json","ObjectCache","defaultNormalizedCacheFactory$1","WriteError","enhanceErrorWithDocument","enhancedError","StoreWriter","writeQueryToStore","writeResultToStore","operationDefinition","writeSelectionSetToStore","processedData","resultFieldKey","writeFieldToStore","isDefered","isClient","substring","matches","fakeContext","storeObject","storeFieldName","generatedId","processArrayValue","valueDataId","isGeneratedId","semanticId","isDataProcessed","escapedId","hadTypename","hasTypename","typenameChanged","mergeWithGenerated","itemDataId","generatedKey","realKey","real","madeChanges","realValue","newRealValue","defaultConfig","defaultDataIdFromObject","addTypename","resultCaching","_id","hasOwn$1","OptimisticCacheLayer","optimisticId","transaction","InMemoryCache","watches","typenameDocumentCache","silenceBroadcast","customResolvers","cacheResolvers","optimisticData","storeWriter","storeReader","maybeBroadcastWatch","broadcastWatches","evict","idToRemove","toReapply","removedCount","layer","layer_1","print","_visitor","ast","printDocASTReducer","varDefs","_ref","_ref2","block","_ref3","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","_ref10","isBlockString","printBlockString","_ref11","_ref12","_ref13","_ref14","_ref15","_ref16","_ref17","_ref18","_ref19","_ref20","operationTypes","_ref21","addDescription","_ref22","_ref23","interfaces","_ref24","indent","_ref25","_ref26","_ref27","_ref28","_ref29","_ref30","_ref31","locations","_ref32","_ref33","_ref34","_ref35","_ref36","_ref37","_ref38","description","maybeArray","separator","start","maybeString","end","isDescription","escaped","defaultHttpOptions","includeQuery","includeExtensions","defaultHeaders","accept","fallbackHttpConfig","http","headers","throwServerError","response","statusCode","status","parseAndCheckHttpResponse","text","bodyText","parseError","checkFetcher","fetcher","fetch","library","createSignalIfSupported","AbortController","controller","signal","selectHttpOptionsAndBody","fallbackConfig","configs","credentials","serializeFetchParameter","serialized","selectURI","fallbackURI","contextURI","uri","createHttpLink","linkOptions","useGETForQueries","requestOptions","linkConfig","fetchOptions","chosenURI","clientAwarenessHeaders","name_1","contextHeaders","contextConfig","_controller","definitionIsMutation","rewriteURIForGET","newURI","abort","queryParams","addQueryParam","encodeURIComponent","serializedVariables","serializedExtensions","preFragment","fragmentStart","substr","queryParamsPrefix","HttpLink","applyToJSON","classObject","toJSON","applyToStringTag","toStringTag","instanceOf","valueClass","className","keyMap","list","keyFn","Kind","NAME","DOCUMENT","OPERATION_DEFINITION","VARIABLE_DEFINITION","SELECTION_SET","FIELD","ARGUMENT","FRAGMENT_SPREAD","INLINE_FRAGMENT","FRAGMENT_DEFINITION","VARIABLE","INT","FLOAT","STRING","BOOLEAN","NULL","ENUM","LIST","OBJECT","OBJECT_FIELD","DIRECTIVE","NAMED_TYPE","LIST_TYPE","NON_NULL_TYPE","SCHEMA_DEFINITION","OPERATION_TYPE_DEFINITION","SCALAR_TYPE_DEFINITION","OBJECT_TYPE_DEFINITION","FIELD_DEFINITION","INPUT_VALUE_DEFINITION","INTERFACE_TYPE_DEFINITION","UNION_TYPE_DEFINITION","ENUM_TYPE_DEFINITION","ENUM_VALUE_DEFINITION","INPUT_OBJECT_TYPE_DEFINITION","DIRECTIVE_DEFINITION","SCHEMA_EXTENSION","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_EXTENSION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_EXTENSION","keyValMap","valFn","isInvalid","valueFromASTUntyped","valueNode","variableName","isType","assertType","isScalarType","assertScalarType","isObjectType","assertObjectType","isInterfaceType","assertInterfaceType","isUnionType","assertUnionType","isEnumType","assertEnumType","isInputObjectType","assertInputObjectType","isListType","assertListType","isNonNullType","assertNonNullType","isInputType","assertInputType","isOutputType","assertOutputType","isLeafType","assertLeafType","isCompositeType","assertCompositeType","isAbstractType","assertAbstractType","GraphQLList","GraphQLNonNull","isWrappingType","assertWrappingType","isNullableType","assertNullableType","getNullableType","isNamedType","assertNamedType","getNamedType","isRequiredArgument","isRequiredInputField","_objectSpread","ownKeys","sym","_defineProperty","GraphQLScalarType","GraphQLObjectType","GraphQLInterfaceType","GraphQLUnionType","GraphQLEnumType","GraphQLInputObjectType","ofType","unwrappedType","resolveThunk","thunk","serialize","parseValue","parseLiteral","astNode","extensionASTNodes","_proto","isTypeOf","_fields","defineFieldMap","_interfaces","defineInterfaces","_proto2","getFields","getInterfaces","fieldMap","isPlainObj","resultFieldMap","_arr","_loop","fieldConfig","isDeprecated","deprecationReason","argsConfig","argName","resolveType","_proto3","_types","defineTypes","_proto4","getTypes","_values","defineEnumValues","_valueLookup","enumValue","_nameLookup","_proto5","getValues","_variables","valueMap","valueName","defineInputFieldMap","_proto6","_arr2","_i2","isFinite","isInteger","floor","isSpecifiedScalarType","MAX_INT","MIN_INT","serializeInt","num","coerceInt","GraphQLInt","serializeFloat","coerceFloat","GraphQLFloat","serializeString","valueOf","coerceString","GraphQLString","serializeBoolean","coerceBoolean","GraphQLBoolean","serializeID","coerceID","GraphQLID","specifiedScalarTypes","DirectiveLocation","QUERY","MUTATION","SUBSCRIPTION","SCHEMA","SCALAR","ARGUMENT_DEFINITION","INTERFACE","UNION","ENUM_VALUE","INPUT_OBJECT","INPUT_FIELD_DEFINITION","isDirective","isSpecifiedDirective","GraphQLDirective","GraphQLIncludeDirective","if","GraphQLSkipDirective","DEFAULT_DEPRECATION_REASON","GraphQLDeprecatedDirective","reason","specifiedDirectives","specifiedDirective","objectValues","isIterable","isArrayLike","isCollection","getIterator","getIteratorMethod","createIterator","isAsyncIterable","getAsyncIterator","getAsyncIteratorMethod","createAsyncIterator","forAwaitEach","SYMBOL","SYMBOL_ITERATOR","$$iterator","iterable","collection","ArrayLikeIterator","_o","SYMBOL_ASYNC_ITERATOR","$$asyncIterator","asyncIterable","AsyncFromSyncIterator","isNullish","astFromValue","astValue","itemType","valuesNodes","itemNode","fieldNodes","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","return","stringNum","integerStringRegExp","isIntrospectionType","__Schema","__Type","schema","getTypeMap","queryType","getQueryType","mutationType","getMutationType","subscriptionType","getSubscriptionType","__Directive","getDirectives","__DirectiveLocation","__InputValue","__TypeKind","TypeKind","NON_NULL","__Field","includeDeprecated","getPossibleTypes","enumValues","__EnumValue","inputFields","inputVal","SchemaMetaFieldDef","TypeMetaFieldDef","getType","TypeNameMetaFieldDef","parentType","introspectionTypes","find","predicate","isSchema","GraphQLSchema","assumeValid","__validationErrors","allowedLegacyNames","__allowedLegacyNames","_queryType","_mutationType","_subscriptionType","_directives","initialTypes","typeMapReducer","typeMapDirectiveReducer","_typeMap","_implementations","typeName","iface","impls","abstractType","isPossibleType","possibleType","possibleTypeMap","_possibleTypeMap","getDirective","reducedMap","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","fieldArgTypes","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","_field","_map","getLocation","position","lineRegexp","line","column","exec","printError","_location","printedLocations","nodes","loc","highlightSourceAtLocation","location","firstLineColumnOffset","locationOffset","whitespace","lineIndex","lineOffset","lineNum","columnOffset","columnNum","lines","printPrefixedLines","existingLines","padLen","prefix","lpad","GraphQLError","positions","originalError","_nodes","_source","_positions","_locations","pos","_extensions","defineProperties","captureStackTrace","assertValidName","isValidNameError","NAME_RX","isEqualType","isTypeSubTypeOf","doTypesOverlap","typeA","typeB","maybeSubType","superType","validateSchema","assertValidSchema","SchemaValidationContext","validateRootTypes","validateDirectives","validateTypes","getErrors","_errors","reportError","addError","getOperationTypeNode","operationNodes","getAllSubNodes","validateName","argNames","getAllDirectiveArgNodes","getDirectiveArgTypeNode","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","validateFields","validateObjectInterfaces","validateUnionMembers","validateEnumValues","validateInputFields","getAllNodes","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_iterator5","_step5","getAllFieldNodes","getFieldTypeNode","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_iterator6","_step6","getAllFieldArgNodes","getFieldArgTypeNode","implementedTypeNames","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_iterator7","_step7","getImplementsInterfaceNode","getAllImplementsInterfaceNodes","validateObjectImplementsInterface","objectFieldMap","ifaceFieldMap","objectField","ifaceField","getFieldNode","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","ifaceArg","_step8","objectArg","getFieldArgNode","_iterator8","_ret","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_loop2","_step9","_iterator9","union","memberTypes","includedTypeNames","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_iterator10","_step10","memberType","getUnionMemberTypeNodes","enumType","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_iterator11","_step11","allNodes","getEnumValueNodes","inputObj","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_iterator12","_step12","getter","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_iterator13","_step13","subNodes","typeNode","ifaceNode","fieldNode","argNodes","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_iterator14","_step14","fieldArgNode","directiveNode","argNode","unionNode","enumNode","Source","_invariant","_defineToStringTag","_printError","syntaxError","_GraphQLError","locatedError","formatError","_syntaxError","_locatedError","_formatError","blockStringValue","rawString","commonIndent","leadingWhitespace","isBlank","createLexer","getTokenDesc","TokenKind","_error","_blockStringValue","startOfFileToken","Tok","SOF","lexer","lastToken","token","lineStart","advance","advanceLexer","lookahead","EOF","readToken","COMMENT","BANG","DOLLAR","AMP","PAREN_L","PAREN_R","SPREAD","COLON","EQUALS","AT","BRACKET_L","BRACKET_R","BRACE_L","PIPE","BRACE_R","BLOCK_STRING","charCodeAt","printCharCode","code","isNaN","fromCharCode","bodyLength","positionAfterWhitespace","col","readComment","readName","readNumber","readBlockString","readString","unexpectedCharacterMessage","startPosition","firstCode","isFloat","readDigits","chunkStart","charCode","uniCharCode","rawValue","char2hex","parseType","parseConstValue","parseTypeReference","parseNamedType","sourceObj","parseDocument","expect","parseValueLiteral","parseName","many","parseDefinition","peek","parseExecutableDefinition","parseTypeSystemDefinition","parseTypeSystemExtension","peekDescription","unexpected","parseOperationDefinition","parseFragmentDefinition","parseSelectionSet","parseOperationType","parseVariableDefinitions","parseDirectives","operationToken","parseVariableDefinition","experimentalVariableDefinitionDirectives","parseVariable","parseSelection","parseFragment","parseField","nameOrAlias","parseArguments","isConst","parseConstArgument","parseArgument","parseFragmentName","expectKeyword","experimentalFragmentVariables","parseList","parseObject","parseStringLiteral","parseValueValue","any","parseObjectField","parseDirective","keywordToken","parseSchemaDefinition","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","parseDirectiveDefinition","parseDescription","parseOperationTypeDefinition","parseImplementsInterfaces","parseFieldsDefinition","allowLegacySDLImplementsInterfaces","allowLegacySDLEmptyFields","parseFieldDefinition","parseArgumentDefs","parseInputValueDef","parseUnionMemberTypes","parseEnumValuesDefinition","parseEnumValueDefinition","parseInputFieldsDefinition","parseSchemaExtension","parseScalarTypeExtension","parseObjectTypeExtension","parseInterfaceTypeExtension","parseUnionTypeExtension","parseEnumTypeExtension","parseInputObjectTypeExtension","parseDirectiveLocations","parseDirectiveLocation","startToken","noLocation","Loc","endToken","atToken","openKind","parseFn","closeKind","typeFromAST","innerType","TypeInfo","getFieldDefFn","initialType","_schema","_typeStack","_parentTypeStack","_inputTypeStack","_fieldDefStack","_defaultValueStack","_directive","_argument","_enumValue","_getFieldDef","getFieldDef","getParentType","getInputType","getParentInputType","getDefaultValue","getArgument","getEnumValue","namedType","fieldDef","fieldType","typeConditionAST","outputType","inputType","argDef","argType","fieldOrDirective","listType","objectType","inputFieldType","inputField","isDefinitionNode","isExecutableDefinitionNode","isSelectionNode","isValueNode","isTypeNode","isTypeSystemDefinitionNode","isTypeDefinitionNode","isTypeSystemExtensionNode","isTypeExtensionNode","nonExecutableDefinitionMessage","ExecutableDefinitions","defName","duplicateOperationNameMessage","UniqueOperationNames","knownOperationNames","anonOperationNotAloneMessage","LoneAnonymousOperation","operationCount","singleFieldOnlyMessage","SingleFieldSubscriptions","suggestionList","input","optionsByDistance","oLength","inputThreshold","distance","lexicalDistance","threshold","aStr","bStr","toLowerCase","aLength","bLength","cost","min","orList","MAX_LENGTH","items","selected","quoted","quotedOrList","unknownTypeMessage","KnownTypeNames","suggestedTypes","getSchema","inlineFragmentOnNonCompositeErrorMessage","fragmentOnNonCompositeErrorMessage","FragmentsOnCompositeTypes","fragName","nonInputTypeOnVarMessage","VariablesAreInputTypes","noSubselectionAllowedMessage","requiredSubselectionMessage","ScalarLeafs","undefinedFieldMessage","FieldsOnCorrectType","suggestedTypeNames","suggestedFieldNames","suggestions","getSuggestedTypeNames","getSuggestedFieldNames","suggestedObjectTypes","interfaceUsageCount","possibleInterface","suggestedInterfaceTypes","possibleFieldNames","duplicateFragmentNameMessage","UniqueFragmentNames","knownFragmentNames","unknownFragmentMessage","KnownFragmentNames","getFragment","unusedFragMessage","NoUnusedFragments","operationDefs","fragmentDefs","fragmentNameUsed","getRecursivelyReferencedFragments","typeIncompatibleSpreadMessage","typeIncompatibleAnonSpreadMessage","PossibleFragmentSpreads","fragType","getFragmentType","cycleErrorMessage","NoFragmentCycles","spreadNames","via","visitedFrags","spreadPath","spreadPathIndexByName","detectCycleRecursive","spreadNodes","getFragmentSpreads","spreadNode","spreadName","cycleIndex","spreadFragment","cyclePath","fragmentNames","duplicateVariableMessage","UniqueVariableNames","knownVariableNames","undefinedVarMessage","NoUndefinedVariables","varName","opName","variableNameDefined","usages","getRecursiveVariableUsages","unusedVariableMessage","NoUnusedVariables","variableDefs","variableNameUsed","variableDef","unknownDirectiveMessage","misplacedDirectiveMessage","KnownDirectives","locationsMap","definedDirectives","astDefinitions","getDocument","candidateLocation","getDirectiveLocationForASTPath","appliedTo","parentNode","duplicateDirectiveMessage","UniqueDirectivesPerLocation","knownDirectives","unknownArgMessage","unknownDirectiveArgMessage","KnownArgumentNames","KnownArgumentNamesOnDirectives","suggestedArgs","knownArgsNames","directiveArgs","knownArgs","duplicateArgMessage","UniqueArgumentNames","knownArgNames","badValueMessage","requiredFieldMessage","unknownFieldMessage","ValuesOfCorrectType","fieldTypeName","isValidScalar","fieldNodeMap","typeStr","didYouMean","enumTypeSuggestion","locationType","parseResult","missingFieldArgMessage","missingDirectiveArgMessage","ProvidedRequiredArguments","ProvidedRequiredArgumentsOnDirectives","argNodeMap","requiredArgsMap","isRequiredArgumentNode","requiredArgs","badVarPosMessage","VariablesInAllowedPosition","varType","expectedType","varDefMap","allowedVariableUsage","varDefaultValue","locationDefaultValue","hasNonNullVariableDefaultValue","hasLocationDefaultValue","nullableLocationType","fieldsConflictMessage","OverlappingFieldsCanBeMerged","responseName","reasonMessage","subreason","comparedFragmentPairs","PairSet","cachedFieldsAndFragmentNames","conflicts","findConflictsWithinSelectionSet","_ref2$","fields1","fields2","_getFieldsAndFragment","getFieldsAndFragmentNames","collectConflictsWithin","comparedFragments","collectConflictsBetweenFieldsAndFragment","collectConflictsBetweenFragments","areMutuallyExclusive","_getReferencedFieldsA","getReferencedFieldsAndFragmentNames","fieldMap2","fragmentNames2","collectConflictsBetween","fragmentName1","fragmentName2","fragment1","fragment2","_getReferencedFieldsA2","fieldMap1","fragmentNames1","_getReferencedFieldsA3","findConflictsBetweenSubSelectionSets","parentType1","selectionSet1","parentType2","selectionSet2","_getFieldsAndFragment2","_getFieldsAndFragment3","_comparedFragments","_j","_i3","conflict","findConflict","parentFieldsAreMutuallyExclusive","_i4","field1","field2","node1","def1","node2","def2","type1","type2","name1","name2","sameArguments","doTypesConflict","subfieldConflicts","arguments1","arguments2","argument1","argument2","sameValue","value1","value2","cached","nodeAndDefs","_collectFieldsAndFragmentNames","fragmentType","inlineFragmentType","allFields","_data","_pairSetAdd","duplicateInputFieldMessage","UniqueInputFieldNames","knownNameStack","knownNames","schemaDefinitionNotAloneMessage","canNotDefineSchemaWithinExtensionMessage","LoneSchemaDefinition","oldSchema","alreadyDefined","schemaDefinitionsCount","specifiedRules","specifiedSDLRules","_inheritsLoose","subClass","superClass","_assertThisInitialized","ReferenceError","ASTValidationContext","_ast","SDLValidationContext","_ASTValidationContext","ValidationContext","_ASTValidationContext2","_this2","_typeInfo","_fragmentSpreads","_recursivelyReferencedFragments","_variableUsages","_recursiveVariableUsages","_fragments","frags","statement","spreads","setsToVisit","collectedNames","nodesToVisit","getVariableUsages","newUsages","validate","validateSDL","assertValidSDL","assertValidSDLExtension","documentAST","rules","rule","schemaToExtend","isPromise","memoize3","cache0","memoized","a1","a2","a3","cache1","cache2","cachedValue","newValue","promiseForObject","valuesAndPromises","resolvedObject","promiseReduce","initialValue","resolved","getOperationRootType","coerceValue","blameNode","ofErrors","coercionError","ofValue","coercedValue","itemValue","coercedItem","atPath","_coercedValue","printPath","coercedField","_fieldName","_suggestions","_didYouMean","moreErrors","subMessage","pathStr","valueFromAST","coercedValues","itemNodes","isMissingVariable","coercedObj","getVariableValues","getArgumentValues","getDirectiveValues","varDefNodes","inputs","varDefNode","coerced","coercionErrors","argDefs","argumentNode","isNull","_variableName","_variableName2","directiveDef","responsePathAsArray","addPath","assertValidExecutionArguments","buildExecutionContext","collectFields","buildResolveInfo","resolveFieldValueOrError","argsOrSchema","fieldResolver","executeImpl","exeContext","executeOperation","buildResponse","flattened","curr","reverse","rawVariableValues","hasMultipleAssumedOperations","coercedVariableValues","defaultFieldResolver","executeFieldsSerially","executeFields","results","fieldPath","resolvedResult","containsPromise","runtimeType","visitedFragmentNames","shouldIncludeNode","getFieldEntryKey","doesFragmentConditionMatch","include","typeConditionNode","conditionalType","resolveFn","completeValueCatchingError","returnType","_contextValue","asErrorInstance","completeValue","handleFieldError","rawError","completeListValue","completeLeafValue","completeAbstractValue","completeObjectValue","completedResults","completedItem","serializedResult","defaultResolveTypeFn","resolvedRuntimeType","ensureValidRuntimeType","runtimeTypeOrName","resolvedIsTypeOf","invalidReturnTypeError","collectAndExecuteSubfields","subFieldNodes","collectSubfields","_collectSubfields","promisedIsTypeOfResults","isTypeOfResult","isTypeOfResults","property","graphql","graphqlSync","graphqlImpl","schemaValidationErrors","validationErrors","mapAsyncIterator","rejectCallback","$return","abruptClose","rethrow","mapResult","asyncMapValue","iteratorResult","mapReject","_return","_throw","createSourceEventStream","subscribeFieldResolver","subscribeImpl","reportGraphQLError","sourcePromise","mapSourceToResponse","resultOrStream","responseNames","eventStream","getIntrospectionQuery","descriptions","introspectionQuery","getOperationAST","introspectionFromSchema","queryAST","buildClientSchema","introspection","schemaIntrospection","typeIntrospectionMap","typeDefCache","typeRef","itemRef","nullableRef","nullableType","typeIntrospection","typeDef","buildType","getOutputType","getObjectType","getInterfaceType","buildScalarDef","buildObjectDef","buildInterfaceDef","buildUnionDef","buildEnumDef","buildInputObjectDef","scalarIntrospection","objectIntrospection","buildFieldDefMap","interfaceIntrospection","unionIntrospection","enumIntrospection","valueIntrospection","inputObjectIntrospection","buildInputValueDefMap","fieldIntrospection","inputValueIntrospections","inputValue","buildInputValue","inputValueIntrospection","buildDirective","directiveIntrospection","buildASTSchema","getDescription","buildSchema","assumeValidSDL","schemaDef","nodeMap","directiveDefs","getOperationTypes","Query","Mutation","Subscription","definitionBuilder","ASTDefinitionBuilder","opTypes","operationType","_typeName","typeDefinitionsMap","_typeDefinitionsMap","_options","_resolveType","_cache","defNode","_makeSchemaDef","_buildWrappedType","_makeInputValues","buildField","getDeprecationReason","buildInputField","buildEnumValue","_makeTypeDef","_makeInterfaceDef","_makeEnumDef","_makeUnionDef","_makeScalarDef","_makeInputObjectDef","_makeFieldDefMap","ref","_this3","_this4","_makeValueDefMap","_this5","_this6","_this7","deprecated","commentDescriptions","getLeadingCommentBlock","comments","extendSchema","typeDefinitionMap","typeExtensionsMap","directiveDefinitions","schemaExtensions","extendedTypeName","existingType","checkExtensionNode","existingTypeExtensions","existingDirective","astBuilder","extendNamedType","extendTypeCache","extendMaybeNamedType","schemaExtension","schemaExtensionASTNodes","getMergedDirectives","existingDirectives","extendDirective","extendScalarType","extendObjectType","extendInterfaceType","extendUnionType","extendEnumType","extendInputObjectType","extendArgs","extendInputFieldMap","newFieldMap","oldFieldMap","extendType","extension","extendValueMap","newValueMap","oldValueMap","_valueName","extendImplementedInterfaces","extendFieldMap","extendPossibleTypes","_arr3","_fieldName2","_field2","lexicographicSortSchema","sortMaybeType","maybeType","sortNamedType","sortTypes","sortByName","sortDirective","sortBy","sortArgs","sortType","sortFields","fieldsMap","sortObjMap","sortInputFields","arr","sortedType","sortNamedTypeImpl","sortValueFn","sortedMap","sortedKeys","mapToKey","obj1","obj2","key1","key2","localeCompare","printSchema","printIntrospectionSchema","printType","printFilteredSchema","isDefinedType","directiveFilter","typeFilter","printSchemaDefinition","printDirective","isSchemaOfCommonNames","printScalar","printObject","printInterface","printUnion","printEnum","printInputObject","printDescription","implementedInterfaces","printFields","printEnumValues","printDeprecated","printInputValue","printArgs","indentation","argDecl","fieldOrEnumVal","firstInBlock","descriptionLines","printDescriptionWithComments","escapeQuote","hasLeadingSpace","maxLen","rawLines","sublines","breakLine","parts","RegExp","isValidJSValue","isValidLiteralValue","emptySchema","emptyDoc","concatAST","asts","batchDefinitions","separateOperations","depGraph","fromName","idx","toName","separatedDocumentASTs","dependencies","collectTransitiveDependencies","n1","n2","collected","immediateDeps","findBreakingChanges","findDangerousChanges","findRemovedTypes","findTypesThatChangedKind","findArgChanges","findFieldsThatChangedTypeOnObjectOrInterfaceTypes","findFieldsThatChangedTypeOnInputObjectTypes","findTypesRemovedFromUnions","findTypesAddedToUnions","findValuesRemovedFromEnums","findValuesAddedToEnums","findInterfacesRemovedFromObjectTypes","findInterfacesAddedToObjectTypes","findRemovedDirectives","findRemovedDirectiveArgs","findAddedNonNullDirectiveArgs","findRemovedLocationsForDirective","findRemovedDirectiveLocations","BreakingChangeType","FIELD_CHANGED_KIND","FIELD_REMOVED","TYPE_CHANGED_KIND","TYPE_REMOVED","TYPE_REMOVED_FROM_UNION","VALUE_REMOVED_FROM_ENUM","ARG_REMOVED","ARG_CHANGED_KIND","REQUIRED_ARG_ADDED","REQUIRED_INPUT_FIELD_ADDED","INTERFACE_REMOVED_FROM_OBJECT","DIRECTIVE_REMOVED","DIRECTIVE_ARG_REMOVED","DIRECTIVE_LOCATION_REMOVED","REQUIRED_DIRECTIVE_ARG_ADDED","DangerousChangeType","ARG_DEFAULT_VALUE_CHANGE","VALUE_ADDED_TO_ENUM","INTERFACE_ADDED_TO_OBJECT","TYPE_ADDED_TO_UNION","OPTIONAL_INPUT_FIELD_ADDED","OPTIONAL_ARG_ADDED","newSchema","breakingChanges","dangerousChanges","oldTypeMap","newTypeMap","oldType","newType","typeKindName","oldTypeFields","newTypeFields","_arr4","oldArgDef","newArgs","newArgDef","isSafe","isChangeSafeForInputObjectFieldOrFieldArg","oldArgs","_arr5","_i5","oldTypeFieldsDef","newTypeFieldsDef","_arr6","_i6","oldFieldType","newFieldType","isChangeSafeForObjectOrInterfaceField","oldFieldTypeString","newFieldTypeString","_arr7","_i7","_arr8","_i8","_arr9","_i9","typesRemovedFromUnion","_arr10","_i10","typeNamesInNewUnion","_type","typesAddedToUnion","_arr11","_i11","typeNamesInOldUnion","_type2","valuesRemovedFromEnums","_arr12","_i12","valuesInNewEnum","valuesAddedToEnums","_arr13","_i13","valuesInOldEnum","_value2","_arr14","_i14","oldInterfaces","newInterfaces","_loop3","oldInterface","int","interfacesAddedToObjectTypes","_arr15","_i15","_loop4","newInterface","removedDirectives","newSchemaDirectiveMap","getDirectiveMapForSchema","findRemovedArgsForDirective","oldDirective","newDirective","removedArgs","newArgMap","getArgumentMapForDirective","removedDirectiveArgs","oldSchemaDirectiveMap","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_iterator15","_step15","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_iterator16","_step16","findAddedArgsForDirective","addedArgs","oldArgMap","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_iterator17","_step17","addedNonNullableArgs","_iteratorNormalCompletion18","_didIteratorError18","_iteratorError18","_iterator18","_step18","_iteratorNormalCompletion19","_didIteratorError19","_iteratorError19","_iterator19","_step19","removedLocations","newLocationSet","_iteratorNormalCompletion20","_didIteratorError20","_iteratorError20","_iterator20","_step20","oldLocation","_iteratorNormalCompletion21","_didIteratorError21","_iteratorError21","_iterator21","_step21","_iteratorNormalCompletion22","_didIteratorError22","_iteratorError22","_iterator22","_step22","findDeprecatedUsages","enumVal","FieldsOnCorrectTypeRule","FragmentsOnCompositeTypesRule","KnownArgumentNamesRule","KnownDirectivesRule","KnownFragmentNamesRule","KnownTypeNamesRule","LoneAnonymousOperationRule","NoFragmentCyclesRule","NoUndefinedVariablesRule","NoUnusedFragmentsRule","NoUnusedVariablesRule","OverlappingFieldsCanBeMergedRule","PossibleFragmentSpreadsRule","ProvidedRequiredArgumentsRule","ScalarLeafsRule","SingleFieldSubscriptionsRule","UniqueArgumentNamesRule","UniqueDirectivesPerLocationRule","UniqueFragmentNamesRule","UniqueInputFieldNamesRule","UniqueOperationNamesRule","UniqueVariableNamesRule","ValuesOfCorrectTypeRule","VariablesAreInputTypesRule","VariablesInAllowedPositionRule","normalizeTypeDefs","removed","docClone","defs","trim","Async","withClientState","clientStateConfig","defaults","StateLink","writeDefaults","directives_1","definition_1","schemas","server","aliasedNode","preAliasingNode","aliasNeeded","handlingNext","observerErrorHandler","nextData","errorHandler","retriedSub","retriedResult","ErrorLink","_lexer","_kinds","_directiveLocation","ApolloBoost","getUsers","gql","getPosts","html","users","user","getElementById","innerHTML","posts","post","author"],"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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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QAAmBoF,4BAAAA;QAA2BgC,SAAAA;QAAQhF,wBAAAA;QAAuBH,yBAAAA;QAAwBrB,2BAAAA;QAA0BhB,yBAAAA;QAAwB0C,oBAAAA;QAAmBd,wBAAAA;QAAuBI,yBAAAA;QAAwBC,8BAAAA;QAA6BE,mBAAAA;QAAkBG,qBAAAA;QAAoBzE,kBAAAA;QAAiBiK,wBAAAA;QAAuBrH,mBAAAA;QAAkBF,gBAAAA;QAAeoH,gBAAAA;QAAeF,QAAAA;QAAO/I,UAAAA;QAASG,YAAAA;QAAWD,mBAAAA;QAAkBS,cAAAA;QAAalD,gBAAAA;QAAeuL,eAAAA;QAAcxL,gBAAAA;QAAe0L,SAAAA;QAAQS,kBAAAA;QAAiBE,YAAAA;QAAWC,iBAAAA;QAAgB5D,8BAAAA;QAA6B8B,+BAAAA;QAA8BtB,wCAAAA;QAAuCpB,+BAAAA;QAA8Bc,mCAAAA;QAAkCtG,yBAAAA;QAAwBuB,gBAAAA;QAAexC,wBAAAA;QAAuB8L,eAAAA;QAAcpK,YAAAA;QAAW4I,wBAAAA;QAAuBrI,gBAAAA;QAAe3C,8BAAAA;QAA6ByG,uBAAAA;QAAsB6F,wBAAAA;AACvil5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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AnO,IAA2OyO,KAAKzO,IAAL,KAAcw5C,WAAWx5C,IAF7P,CAAP;AAGD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBD;;AACA;;AACA;;AACA;;AACA;;;;;;AAdA,SAASwqC,eAAT,CAAyBhwC,GAAzB,EAA8BrE,GAA9B,EAAmCqB,KAAnC,EAA0C;AAAE,MAAIrB,OAAOqE,GAAX,EAAgB;AAAE/F,WAAOiC,cAAP,CAAsB8D,GAAtB,EAA2BrE,GAA3B,EAAgC,EAAEqB,OAAOA,KAAT,EAAgBke,YAAY,IAA5B,EAAkC+Z,cAAc,IAAhD,EAAsDD,UAAU,IAAhE,EAAhC;AAA0G,GAA5H,MAAkI;AAAEh1B,QAAIrE,GAAJ,IAAWqB,KAAX;AAAmB,GAAC,OAAOgD,GAAP;AAAa;;AAEjN;;;;;;;;;AAaA;;;;;;AAMO,IAAIqxD;AACX;AADW,mBAEX,YAAY;AACV,WAASA,QAAT,CAAkBtY,MAAlB,EAA0B;AAC1B;AACAuY,eAFA,EAEe;AACfC,aAHA,EAGa;AACXvhB,oBAAgB,IAAhB,EAAsB,SAAtB,EAAiC,KAAK,CAAtC;;AAEAA,oBAAgB,IAAhB,EAAsB,YAAtB,EAAoC,KAAK,CAAzC;;AAEAA,oBAAgB,IAAhB,EAAsB,kBAAtB,EAA0C,KAAK,CAA/C;;AAEAA,oBAAgB,IAAhB,EAAsB,iBAAtB,EAAyC,KAAK,CAA9C;;AAEAA,oBAAgB,IAAhB,EAAsB,gBAAtB,EAAwC,KAAK,CAA7C;;AAEAA,oBAAgB,IAAhB,EAAsB,oBAAtB,EAA4C,KAAK,CAAjD;;AAEAA,oBAAgB,IAAhB,EAAsB,YAAtB,EAAoC,KAAK,CAAzC;;AAEAA,oBAAgB,IAAhB,EAAsB,WAAtB,EAAmC,KAAK,CAAxC;;AAEAA,oBAAgB,IAAhB,EAAsB,YAAtB,EAAoC,KAAK,CAAzC;;AAEAA,oBAAgB,IAAhB,EAAsB,cAAtB,EAAsC,KAAK,CAA3C;;AAEA,SAAKwhB,OAAL,GAAezY,MAAf;AACA,SAAK0Y,UAAL,GAAkB,EAAlB;AACA,SAAKC,gBAAL,GAAwB,EAAxB;AACA,SAAKC,eAAL,GAAuB,EAAvB;AACA,SAAKC,cAAL,GAAsB,EAAtB;AACA,SAAKC,kBAAL,GAA0B,EAA1B;AACA,SAAKC,UAAL,GAAkB,IAAlB;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACA,SAAKC,UAAL,GAAkB,IAAlB;AACA,SAAKC,YAAL,GAAoBX,iBAAiBY,WAArC;;AAEA,QAAIX,WAAJ,EAAiB;AACf,UAAI,6BAAYA,WAAZ,CAAJ,EAA8B;AAC5B,aAAKI,eAAL,CAAqBpzD,IAArB,CAA0BgzD,WAA1B;AACD;;AAED,UAAI,iCAAgBA,WAAhB,CAAJ,EAAkC;AAChC,aAAKG,gBAAL,CAAsBnzD,IAAtB,CAA2BgzD,WAA3B;AACD;;AAED,UAAI,8BAAaA,WAAb,CAAJ,EAA+B;AAC7B,aAAKE,UAAL,CAAgBlzD,IAAhB,CAAqBgzD,WAArB;AACD;AACF;AACF;;AAED,MAAIvgB,SAASqgB,SAAS52D,SAAtB;;AAEAu2C,SAAOuJ,OAAP,GAAiB,SAASA,OAAT,GAAmB;AAClC,QAAI,KAAKkX,UAAL,CAAgBv2D,MAAhB,GAAyB,CAA7B,EAAgC;AAC9B,aAAO,KAAKu2D,UAAL,CAAgB,KAAKA,UAAL,CAAgBv2D,MAAhB,GAAyB,CAAzC,CAAP;AACD;AACF,GAJD;;AAMA81C,SAAOmhB,aAAP,GAAuB,SAASA,aAAT,GAAyB;AAC9C,QAAI,KAAKT,gBAAL,CAAsBx2D,MAAtB,GAA+B,CAAnC,EAAsC;AACpC,aAAO,KAAKw2D,gBAAL,CAAsB,KAAKA,gBAAL,CAAsBx2D,MAAtB,GAA+B,CAArD,CAAP;AACD;AACF,GAJD;;AAMA81C,SAAOohB,YAAP,GAAsB,SAASA,YAAT,GAAwB;AAC5C,QAAI,KAAKT,eAAL,CAAqBz2D,MAArB,GAA8B,CAAlC,EAAqC;AACnC,aAAO,KAAKy2D,eAAL,CAAqB,KAAKA,eAAL,CAAqBz2D,MAArB,GAA8B,CAAnD,CAAP;AACD;AACF,GAJD;;AAMA81C,SAAOqhB,kBAAP,GAA4B,SAASA,kBAAT,GAA8B;AACxD,QAAI,KAAKV,eAAL,CAAqBz2D,MAArB,GAA8B,CAAlC,EAAqC;AACnC,aAAO,KAAKy2D,eAAL,CAAqB,KAAKA,eAAL,CAAqBz2D,MAArB,GAA8B,CAAnD,CAAP;AACD;AACF,GAJD;;AAMA81C,SAAOkhB,WAAP,GAAqB,SAASA,WAAT,GAAuB;AAC1C,QAAI,KAAKN,cAAL,CAAoB12D,MAApB,GAA6B,CAAjC,EAAoC;AAClC,aAAO,KAAK02D,cAAL,CAAoB,KAAKA,cAAL,CAAoB12D,MAApB,GAA6B,CAAjD,CAAP;AACD;AACF,GAJD;;AAMA81C,SAAOshB,eAAP,GAAyB,SAASA,eAAT,GAA2B;AAClD,QAAI,KAAKT,kBAAL,CAAwB32D,MAAxB,GAAiC,CAArC,EAAwC;AACtC,aAAO,KAAK22D,kBAAL,CAAwB,KAAKA,kBAAL,CAAwB32D,MAAxB,GAAiC,CAAzD,CAAP;AACD;AACF,GAJD;;AAMA81C,SAAOoL,YAAP,GAAsB,SAASA,YAAT,GAAwB;AAC5C,WAAO,KAAK0V,UAAZ;AACD,GAFD;;AAIA9gB,SAAOuhB,WAAP,GAAqB,SAASA,WAAT,GAAuB;AAC1C,WAAO,KAAKR,SAAZ;AACD,GAFD;;AAIA/gB,SAAOwhB,YAAP,GAAsB,SAASA,YAAT,GAAwB;AAC5C,WAAO,KAAKR,UAAZ;AACD,GAFD;;AAIAhhB,SAAOnrC,KAAP,GAAe,SAASA,KAAT,CAAevB,IAAf,EAAqB;AAClC,QAAIy0C,SAAS,KAAKyY,OAAlB,CADkC,CACP;AAC3B;AACA;AACA;;AAEA,YAAQltD,KAAKkB,IAAb;AACE,WAAK2kC,YAAKK,aAAV;AACE,YAAIioB,YAAY,8BAAa,KAAKlY,OAAL,EAAb,CAAhB;;AAEA,aAAKmX,gBAAL,CAAsBnzD,IAAtB,CAA2B,iCAAgBk0D,SAAhB,IAA6BA,SAA7B,GAAyCxuD,SAApE;;AAEA;;AAEF,WAAKkmC,YAAKM,KAAV;AACE,YAAIgQ,aAAa,KAAK0X,aAAL,EAAjB;AACA,YAAIO,QAAJ;AACA,YAAIC,SAAJ;;AAEA,YAAIlY,UAAJ,EAAgB;AACdiY,qBAAW,KAAKT,YAAL,CAAkBlZ,MAAlB,EAA0B0B,UAA1B,EAAsCn2C,IAAtC,CAAX;;AAEA,cAAIouD,QAAJ,EAAc;AACZC,wBAAYD,SAAS9jD,IAArB;AACD;AACF;;AAED,aAAKgjD,cAAL,CAAoBrzD,IAApB,CAAyBm0D,QAAzB;;AAEA,aAAKjB,UAAL,CAAgBlzD,IAAhB,CAAqB,8BAAao0D,SAAb,IAA0BA,SAA1B,GAAsC1uD,SAA3D;;AAEA;;AAEF,WAAKkmC,YAAKqB,SAAV;AACE,aAAKsmB,UAAL,GAAkB/Y,OAAOqD,YAAP,CAAoB93C,KAAKnE,IAAL,CAAUnD,KAA9B,CAAlB;AACA;;AAEF,WAAKmtC,YAAKG,oBAAV;AACE,YAAI17B,IAAJ;;AAEA,YAAItK,KAAK6M,SAAL,KAAmB,OAAvB,EAAgC;AAC9BvC,iBAAOmqC,OAAOG,YAAP,EAAP;AACD,SAFD,MAEO,IAAI50C,KAAK6M,SAAL,KAAmB,UAAvB,EAAmC;AACxCvC,iBAAOmqC,OAAOK,eAAP,EAAP;AACD,SAFM,MAEA,IAAI90C,KAAK6M,SAAL,KAAmB,cAAvB,EAAuC;AAC5CvC,iBAAOmqC,OAAOO,mBAAP,EAAP;AACD;;AAED,aAAKmY,UAAL,CAAgBlzD,IAAhB,CAAqB,8BAAaqQ,IAAb,IAAqBA,IAArB,GAA4B3K,SAAjD;;AAEA;;AAEF,WAAKkmC,YAAKS,eAAV;AACA,WAAKT,YAAKU,mBAAV;AACE,YAAI+nB,mBAAmBtuD,KAAKwjB,aAA5B;AACA,YAAI+qC,aAAaD,mBAAmB,8BAAY7Z,MAAZ,EAAoB6Z,gBAApB,CAAnB,GAA2D,8BAAa,KAAKrY,OAAL,EAAb,CAA5E;;AAEA,aAAKkX,UAAL,CAAgBlzD,IAAhB,CAAqB,8BAAas0D,UAAb,IAA2BA,UAA3B,GAAwC5uD,SAA7D;;AAEA;;AAEF,WAAKkmC,YAAKI,mBAAV;AACE,YAAIuoB,YAAY,8BAAY/Z,MAAZ,EAAoBz0C,KAAKsK,IAAzB,CAAhB;;AAEA,aAAK+iD,eAAL,CAAqBpzD,IAArB,CAA0B,6BAAYu0D,SAAZ,IAAyBA,SAAzB,GAAqC7uD,SAA/D;;AAEA;;AAEF,WAAKkmC,YAAKO,QAAV;AACE,YAAIqoB,MAAJ;AACA,YAAIC,OAAJ;AACA,YAAIC,mBAAmB,KAAK7W,YAAL,MAAuB,KAAK8V,WAAL,EAA9C;;AAEA,YAAIe,gBAAJ,EAAsB;AACpBF,mBAAS,oBAAKE,iBAAiBtrD,IAAtB,EAA4B,UAAU2M,GAAV,EAAe;AAClD,mBAAOA,IAAInU,IAAJ,KAAamE,KAAKnE,IAAL,CAAUnD,KAA9B;AACD,WAFQ,CAAT;;AAIA,cAAI+1D,MAAJ,EAAY;AACVC,sBAAUD,OAAOnkD,IAAjB;AACD;AACF;;AAED,aAAKmjD,SAAL,GAAiBgB,MAAjB;;AAEA,aAAKlB,kBAAL,CAAwBtzD,IAAxB,CAA6Bw0D,SAASA,OAAO//C,YAAhB,GAA+B/O,SAA5D;;AAEA,aAAK0tD,eAAL,CAAqBpzD,IAArB,CAA0B,6BAAYy0D,OAAZ,IAAuBA,OAAvB,GAAiC/uD,SAA3D;;AAEA;;AAEF,WAAKkmC,YAAKkB,IAAV;AACE,YAAI6nB,WAAW,iCAAgB,KAAKd,YAAL,EAAhB,CAAf;AACA,YAAIpa,WAAW,4BAAWkb,QAAX,IAAuBA,SAAS3iB,MAAhC,GAAyC2iB,QAAxD,CAFF,CAEoE;;AAElE,aAAKrB,kBAAL,CAAwBtzD,IAAxB,CAA6B0F,SAA7B;;AAEA,aAAK0tD,eAAL,CAAqBpzD,IAArB,CAA0B,6BAAYy5C,QAAZ,IAAwBA,QAAxB,GAAmC/zC,SAA7D;;AAEA;;AAEF,WAAKkmC,YAAKoB,YAAV;AACE,YAAI4nB,aAAa,8BAAa,KAAKf,YAAL,EAAb,CAAjB;AACA,YAAIgB,cAAJ;AACA,YAAIC,UAAJ;;AAEA,YAAI,mCAAkBF,UAAlB,CAAJ,EAAmC;AACjCE,uBAAaF,WAAW5hB,SAAX,GAAuBjtC,KAAKnE,IAAL,CAAUnD,KAAjC,CAAb;;AAEA,cAAIq2D,UAAJ,EAAgB;AACdD,6BAAiBC,WAAWzkD,IAA5B;AACD;AACF;;AAED,aAAKijD,kBAAL,CAAwBtzD,IAAxB,CAA6B80D,aAAaA,WAAWrgD,YAAxB,GAAuC/O,SAApE;;AAEA,aAAK0tD,eAAL,CAAqBpzD,IAArB,CAA0B,6BAAY60D,cAAZ,IAA8BA,cAA9B,GAA+CnvD,SAAzE;;AAEA;;AAEF,WAAKkmC,YAAKiB,IAAV;AACE,YAAIga,WAAW,8BAAa,KAAKgN,YAAL,EAAb,CAAf;AACA,YAAIxf,SAAJ;;AAEA,YAAI,4BAAWwS,QAAX,CAAJ,EAA0B;AACxBxS,sBAAYwS,SAAS1wB,QAAT,CAAkBpwB,KAAKtH,KAAvB,CAAZ;AACD;;AAED,aAAKg1D,UAAL,GAAkBpf,SAAlB;AACA;AA3HJ;AA6HD,GAnID;;AAqIA5B,SAAOjrC,KAAP,GAAe,SAASA,KAAT,CAAezB,IAAf,EAAqB;AAClC,YAAQA,KAAKkB,IAAb;AACE,WAAK2kC,YAAKK,aAAV;AACE,aAAKknB,gBAAL,CAAsBpzD,GAAtB;;AAEA;;AAEF,WAAK6rC,YAAKM,KAAV;AACE,aAAKmnB,cAAL,CAAoBtzD,GAApB;;AAEA,aAAKmzD,UAAL,CAAgBnzD,GAAhB;;AAEA;;AAEF,WAAK6rC,YAAKqB,SAAV;AACE,aAAKsmB,UAAL,GAAkB,IAAlB;AACA;;AAEF,WAAK3nB,YAAKG,oBAAV;AACA,WAAKH,YAAKS,eAAV;AACA,WAAKT,YAAKU,mBAAV;AACE,aAAK4mB,UAAL,CAAgBnzD,GAAhB;;AAEA;;AAEF,WAAK6rC,YAAKI,mBAAV;AACE,aAAKonB,eAAL,CAAqBrzD,GAArB;;AAEA;;AAEF,WAAK6rC,YAAKO,QAAV;AACE,aAAKqnB,SAAL,GAAiB,IAAjB;;AAEA,aAAKF,kBAAL,CAAwBvzD,GAAxB;;AAEA,aAAKqzD,eAAL,CAAqBrzD,GAArB;;AAEA;;AAEF,WAAK6rC,YAAKkB,IAAV;AACA,WAAKlB,YAAKoB,YAAV;AACE,aAAKsmB,kBAAL,CAAwBvzD,GAAxB;;AAEA,aAAKqzD,eAAL,CAAqBrzD,GAArB;;AAEA;;AAEF,WAAK6rC,YAAKiB,IAAV;AACE,aAAK4mB,UAAL,GAAkB,IAAlB;AACA;AAhDJ;AAkDD,GAnDD;;AAqDA,SAAOX,QAAP;AACD,CAhSD,EAFO;AAmSP;;;;;;AAMA,SAASa,WAAT,CAAqBnZ,MAArB,EAA6B0B,UAA7B,EAAyCkM,SAAzC,EAAoD;AAClD,MAAIxmD,OAAOwmD,UAAUxmD,IAAV,CAAenD,KAA1B;;AAEA,MAAImD,SAASk6C,kCAAmBl6C,IAA5B,IAAoC44C,OAAOG,YAAP,OAA0BuB,UAAlE,EAA8E;AAC5E,WAAOJ,iCAAP;AACD;;AAED,MAAIl6C,SAASm6C,gCAAiBn6C,IAA1B,IAAkC44C,OAAOG,YAAP,OAA0BuB,UAAhE,EAA4E;AAC1E,WAAOH,+BAAP;AACD;;AAED,MAAIn6C,SAASq6C,oCAAqBr6C,IAA9B,IAAsC,iCAAgBs6C,UAAhB,CAA1C,EAAuE;AACrE,WAAOD,mCAAP;AACD;;AAED,MAAI,8BAAaC,UAAb,KAA4B,iCAAgBA,UAAhB,CAAhC,EAA6D;AAC3D,WAAOA,WAAWlJ,SAAX,GAAuBpxC,IAAvvUemzD,mBAAAA;QAGAC,6BAAAA;QAGAC,kBAAAA;QAGAC,cAAAA;QAGAC,aAAAA;QAGAC,6BAAAA;QAGAC,uBAAAA;QAGAC,4BAAAA;QAGAC,sBAAAA;;AAzBhB;;AACO,SAASR,gBAAT,CAA0BhvD,IAA1B,EAAgC;AACrC,SAAOivD,2BAA2BjvD,IAA3B,KAAoCqvD,2BAA2BrvD,IAA3B,CAApC,IAAwEuvD,0BAA0BvvD,IAA1B,CAA/E;AACD,EAXD;;;;;;;;AAYO,SAASivD,0BAAT,CAAoCjvD,IAApC,EAA0C;AAC/C,SAAOA,KAAKkB,IAAL,KAAc2kC,YAAKG,oBAAnB,IAA2ChmC,KAAKkB,IAAL,KAAc2kC,YAAKU,mBAArE;AACD;AACM,SAAS2oB,eAAT,CAAyBlvD,IAAzB,EAA+B;AACpC,SAAOA,KAAKkB,IAAL,KAAc2kC,YAAKM,KAAnB,IAA4BnmC,KAAKkB,IAAL,KAAc2kC,YAAKQ,eAA/C,IAAkErmC,KAAKkB,IAAL,KAAc2kC,YAAKS,eAA5F;AACD;AACM,SAAS6oB,WAAT,CAAqBnvD,IAArB,EAA2B;AAChC,SAAOA,KAAKkB,IAAL,KAAc2kC,YAAKW,QAAnB,IAA+BxmC,KAAKkB,IAAL,KAAc2kC,YAAKY,GAAlD,IAAyDzmC,KAAKkB,IAAL,KAAc2kC,YAAKa,KAA5E,IAAqF1mC,KAAKkB,IAAL,KAAc2kC,YAAKc,MAAxG,IAAkH3mC,KAAKkB,IAAL,KAAc2kC,YAAKe,OAArI,IAAgJ5mC,KAAKkB,IAAL,KAAc2kC,YAAKgB,IAAnK,IAA2K7mC,KAAKkB,IAAL,KAAc2kC,YAAKiB,IAA9L,IAAsM9mC,KAAKkB,IAAL,KAAc2kC,YAAKkB,IAAzN,IAAiO/mC,KAAKkB,IAAL,KAAc2kC,YAAKmB,MAA3P;AACD;AACM,SAASooB,UAAT,CAAoBpvD,IAApB,EAA0B;AAC/B,SAAOA,KAAKkB,IAAL,KAAc2kC,YAAKsB,UAAnB,IAAiCnnC,KAAKkB,IAAL,KAAc2kC,YAAKuB,SAApD,IAAiEpnC,KAAKkB,IAAL,KAAc2kC,YAAKwB,aAA3F;AACD;AACM,SAASgoB,0BAAT,CAAoCrvD,IAApC,EAA0C;AAC/C,SAAOA,KAAKkB,IAAL,KAAc2kC,YAAKyB,iBAAnB,IAAwCgoB,qBAAqBtvD,IAArB,CAAxC,IAAsEA,KAAKkB,IAAL,KAAc2kC,YAAKoC,oBAAhG;AACD;AACM,SAASqnB,oBAAT,CAA8BtvD,IAA9B,EAAoC;AACzC,SAAOA,KAAKkB,IAAL,KAAc2kC,YAAK2B,sBAAnB,IAA6CxnC,KAAKkB,IAAL,KAAc2kC,YAAK4B,sBAAhE,IAA0FznC,KAAKkB,IAAL,KAAc2kC,YAAK+B,yBAA7G,IAA0I5nC,KAAKkB,IAAL,KAAc2kC,YAAKgC,qBAA7J,IAAsL7nC,KAAKkB,IAAL,KAAc2kC,YAAKiC,oBAAzM,IAAiO9nC,KAAKkB,IAAL,KAAc2kC,YAAKmC,4BAA3P;AACD;AACM,SAASunB,yBAAT,CAAmCvvD,IAAnC,EAAyC;AAC9C,SAAOA,KAAKkB,IAAL,KAAc2kC,YAAKqC,gBAAnB,IAAuCsnB,oBAAoBxvD,IAApB,CAA9C;AACD;AACM,SAASwvD,mBAAT,CAA6BxvD,IAA7B,EAAmC;AACxC,SAAOA,KAAKkB,IAAL,KAAc2kC,YAAKsC,qBAAnB,IAA4CnoC,KAAKkB,IAAL,KAAc2kC,YAAKuC,qBAA/D,IAAwFpoC,KAAKkB,IAAL,KAAc2kC,YAAKwC,wBAA3G,IAAuIroC,KAAKkB,IAAL,KAAc2kC,YAAKyC,oBAA1J,IAAkLtoC,KAAKkB,IAAL,KAAc2kC,YAAK0C,mBAArM,IAA4NvoC,KAAKkB,IAAL,KAAc2kC,YAAK2C,2BAAtxBeinB,iCAAAA;QAUAC,wBAAAA;;AAbhB;;AACA;;AACA;;AACO,SAASD,8BAAT,CAAwCE,OAAxC,EAAiD;AACtD,SAAO,OAAOp1D,MAAP,CAAco1D,OAAd,EAAuB,gCAAvB,CAAP;AACD;AACD;;;;;;;AAdA;;;;;;;;AAqBO,SAASD,qBAAT,CAA+B1gD,OAA/B,EAAwC;AAC7C,SAAO;AACLlS,cAAU,SAASA,QAAT,CAAkBkD,IAAlB,EAAwB;AAChC,UAAI8zC,4BAA4B,IAAhC;AACA,UAAIC,oBAAoB,KAAxB;AACA,UAAIC,iBAAiBr0C,SAArB;;AAEA,UAAI;AACF,aAAK,IAAIs0C,YAAYj0C,KAAK2M,WAAL,CAAiBhT,OAAOC,QAAxB,GAAhB,EAAqDs6C,KAA1D,EAAiE,EAAEJ,4BAA4B,CAACI,QAAQD,UAAUr7C,IAAV,EAAT,EAA2BG,IAAzD,CAAjE,EAAiI+6C,4BAA4B,IAA7J,EAAmK;AACjK,cAAIlnC,aAAasnC,MAAMx7C,KAAvB;;AAEA,cAAI,CAAC,4CAA2BkU,UAA3B,CAAL,EAA6C;AAC3CoC,oBAAQqtC,WAAR,CAAoB,IAAI7B,0BAAJ,CAAiBiV,+BAA+B7iD,WAAW1L,IAAX,KAAoB2kC,YAAKyB,iBAAzB,IAA8C16B,WAAW1L,IAAX,KAAoB2kC,YAAKqC,gBAAvE,GAA0F,QAA1F,GAAqGt7B,WAAW/Q,IAAX,CAAgBnD,KAApJ,CAAjB,EAA6K,CAACkU,UAAD,CAA7K,CAApB;AACD;AACF;AACF,OARD,CAQE,OAAOiM,GAAP,EAAY;AACZk7B,4BAAoB,IAApB;AACAC,yBAAiBn7B,GAAjB;AACD,OAXD,SAWU;AACR,YAAI;AACF,cAAI,CAACi7B,yBAAD,IAA8BG,UAAUE,MAAV,IAAoB,IAAtD,EAA4D;AAC1DF,sBAAUE,MAAV;AACD;AACF,SAJD,SAIU;AACR,cAAIJ,iBAAJ,EAAuB;AACrB,kBAAMC,cAAN;AACD;AACF;AACF;;AAED,aAAO,KAAP;AACD;AA9BI,GAAP;AAge4b,gCAAAA;QASAC,uBAAAA;;AAVhB;;AACO,SAASD,6BAAT,CAAuCr5C,aAAvC,EAAsD;AAC3D,SAAO,2CAA2Chc,MAA3C,CAAkDgc,aAAlD,EAAiE,KAAjE,CAAP;AACD;AACD;;;;;;AAZA;;;;;;;;AAkBO,SAASs5C,oBAAT,CAA8B7gD,OAA9B,EAAuC;AAC5C,MAAI8gD,sBAAsBn6D,OAAOS,MAAP,CAAc,IAAd,CAA1B;AACA,SAAO;AACL2G,yBAAqB,SAASA,mBAAT,CAA6BiD,IAA7B,EAAmC;AACtD,UAAIuW,gBAAgBvW,KAAKnE,IAAzB;;AAEA,UAAI0a,aAAJ,EAAmB;AACjB,YAAIu5C,oBAAoBv5C,cAAc7d,KAAlC,CAAJ,EAA8C;AAC5CsW,kBAAQqtC,WAAR,CAAoB,IAAI7B,0BAAJ,CAAiBoV,8BAA8Br5C,cAAc7d,KAA5C,CAAjB,EAAqE,CAACo3D,oBAAoBv5C,cAAc7d,KAAlC,CAAD,EAA2C6d,aAA3C,CAArE,CAApB;AACD,SAFD,MAEO;AACLu5C,8BAAoBv5C,cAAc7d,KAAlC,IAA2C6d,aAA3C;AACD;AACF;;AAED,aAAO,KAAP;AACD,KAbI;AAcLhZ,wBAAoB,SAASA,kBAAT,GAA8B;AAChD,aAAO,KAAP;AACD;AAhBI,GAAP;AAkewyD,+BAAAA;QAUAC,yBAAAA;;AAZhB;;AACA;;AATA;;;;;;;;AAUO,SAASD,4BAAT,GAAwC;AAC7C,SAAO,8DAAP;AACD;AACD;;;;;;;AAOO,SAASC,sBAAT,CAAgChhD,OAAhC,EAAyC;AAC9C,MAAIihD,iBAAiB,CAArB;AACA,SAAO;AACLnzD,cAAU,SAASA,QAAT,CAAkBkD,IAAlB,EAAwB;AAChCiwD,uBAAiBjwD,KAAK2M,WAAL,CAAiBR,MAAjB,CAAwB,UAAUS,UAAV,EAAsB;AAC7D,eAAOA,WAAW1L,IAAX,KAAoB2kC,YAAKG,oBAAhC;AACD,OAFgB,EAEdpvC,MAFH;AAGD,KALI;AAMLmG,yBAAqB,SAASA,mBAAT,CAA6BiD,IAA7B,EAAmC;AACtD,UAAI,CAACA,KAAKnE,IAAN,IAAco0D,iBAAiB,CAAnC,EAAsC;AACpCjhD,gBAAQqtC,WAAR,CAAoB,IAAI7B,0BAAJ,CAAiBuV,8BAAjB,EAAiD,CAAC/vD,IAAD,CAAjD,CAApzBekwD,yBAAAA;QASAC,2BAAAA;;AAVhB;;AACO,SAASD,sBAAT,CAAgCr0D,IAAhC,EAAsC;AAC3C,SAAO,CAACA,OAAO,kBAAkBtB,MAAlB,CAAyBsB,IAAzB,EAA+B,KAA/B,CAAP,GAA+C,yBAAhD,IAA6E,uCAApF;AACD;AACD;;;;;;AAZA;;;;;;;;AAkBO,SAASs0D,wBAAT,CAAkCnhD,OAAlC,EAA2C;AAChD,SAAO;AACLjS,yBAAqB,SAASA,mBAAT,CAA6BiD,IAA7B,EAAmC;AACtD,UAAIA,KAAK6M,SAAL,KAAmB,cAAvB,EAAuC;AACrC,YAAI7M,KAAK+M,YAAL,CAAkBC,UAAlB,CAA6BpW,MAA7B,KAAwC,CAA5C,EAA+C;AAC7CoY,kBAAQqtC,WAAR,CAAoB,IAAI7B,0BAAJ,CAAiB0V,uBAAuBlwD,KAAKnE,IAAL,IAAamE,KAAKnE,IAAL,CAAUnD,KAA9C,CAAjB,EAAuEsH,KAAK+M,YAAL,CAAkBC,UAAlB,CAA6BzM,KAA7B,CAAmC,CAAnC,CAAvE,CAApkBCfuB6vD;AAbxB;;;;;;;;;AASA;;;;AAIe,SAASA,cAAT,CAAwBC,KAAxB,EAA+Bz2C,OAA/B,EAAwC;AACrD,MAAI02C,oBAAoB36D,OAAOS,MAAP,CAAc,IAAd,CAAxB;AACA,MAAIm6D,UAAU32C,QAAQhjB,MAAtB;AACA,MAAI45D,iBAAiBH,MAAMz5D,MAAN,GAAe,CAApC;;AAEA,OAAK,IAAIH,IAAI,CAAb,EAAgBA,IAAI85D,OAApB,EAA6B95D,GAA7B,EAAkC;AAChC,QAAIg6D,WAAWC,gBAAgBL,KAAhB,EAAuBz2C,QAAQnjB,CAAR,CAAvB,CAAf;AACA,QAAIk6D,YAAY5gC,KAAK6B,GAAL,CAAS4+B,cAAT,EAAyB52C,QAAQnjB,CAAR,EAAWG,MAAX,GAAoB,CAA7C,EAAgD,CAAhD,CAAhB;;AAEA,QAAI65D,YAAYE,SAAhB,EAA2B;AACzBL,wBAAkB12C,QAAQnjB,CAAR,CAAlB,IAAgCg6D,QAAhC;AACD;AACF;;AAED,SAAO96D,OAAOuG,IAAP,CAAYo0D,iBAAZ,EAA+B9mD,IAA/B,CAAoC,UAAU9O,CAAV,EAAahF,CAAb,EAAgB;AACzD,WAAO46D,kBAAkB51D,CAAlB,IAAuB41D,kBAAkB56D,CAAlB,CAA9B;AACD,GAFM,CAAP;AAGD;AACD;;;;;;;;;;;;;;;;;;;AAmBA,SAASg7D,eAAT,CAAyBE,IAAzB,EAA+BC,IAA/B,EAAqC;AACnC,MAAID,SAASC,IAAb,EAAmB;AACjB,WAAO,CAAP;AACD;;AAED,MAAIp6D,CAAJ;AACA,MAAIkE,CAAJ;AACA,MAAIlF,IAAI,EAAR;AACA,MAAIiF,IAAIk2D,KAAKE,WAAL,EAAR;AACA,MAAIp7D,IAAIm7D,KAAKC,WAAL,EAAR;AACA,MAAIC,UAAUr2D,EAAE9D,MAAhB;AACA,MAAIo6D,UAAUt7D,EAAEkB,MAAhB,CAXmC,CAWX;;AAExB,MAAI8D,MAAMhF,CAAV,EAAa;AACX,WAAO,CAAP;AACD;;AAED,OAAKe,IAAI,CAAT,EAAYA,KAAKs6D,OAAjB,EAA0Bt6D,GAA1B,EAA+B;AAC7BhB,MAAEgB,CAAF,IAAO,CAACA,CAAD,CAAP;AACD;;AAED,OAAKkE,IAAI,CAAT,EAAYA,KAAKq2D,OAAjB,EAA0Br2D,GAA1B,EAA+B;AAC7BlF,MAAE,CAAF,EAAKkF,CAAL,IAAUA,CAAV;AACD;;AAED,OAAKlE,IAAI,CAAT,EAAYA,KAAKs6D,OAAjB,EAA0Bt6D,GAA1B,EAA+B;AAC7B,SAAKkE,IAAI,CAAT,EAAYA,KAAKq2D,OAAjB,EAA0Br2D,GAA1B,EAA+B;AAC7B,UAAIs2D,OAAOv2D,EAAEjE,IAAI,CAAN,MAAaf,EAAEiF,IAAI,CAAN,CAAb,GAAwB,CAAxB,GAA4B,CAAvC;AACAlF,QAAEgB,CAAF,EAAKkE,CAAL,IAAUo1B,KAAKmhC,GAAL,CAASz7D,EAAEgB,IAAI,CAAN,EAASkE,CAAT,IAAc,CAAvB,EAA0BlF,EAAEgB,CAAF,EAAKkE,IAAI,CAAT,IAAc,CAAxC,EAA2ClF,EAAEgB,IAAI,CAAN,EAASkE,IAAI,CAAb,IAAkBs2D,IAA7D,CAAV;;AAEA,UAAIx6D,IAAI,CAAJ,IAASkE,IAAI,CAAb,IAAkBD,EAAEjE,IAAI,CAAN,MAAaf,EAAEiF,IAAI,CAAN,CAA/B,IAA2CD,EAAEjE,IAAI,CAAN,MAAaf,EAAEiF,IAAI,CAAN,CAA5D,EAAsE;AACpElF,UAAEgB,CAAF,EAAKkE,CAAL,IAAUo1B,KAAKmhC,GAAL,CAASz7D,EAAEgB,CAAF,EAAKkE,CAAL,CAAT,EAAkBlF,EAAEgB,IAAI,CAAN,EAASkE,IAAI,CAAb,IAAkBs2D,IAApC,CAAV;AACD;AACF;AACF;;AAED,SAAOx7D,EAAEskBC1EuBG;AAbxB;;;;;;;;AAQA,IAAIC,aAAa,CAAjB;AACA;;;;AAIe,SAASD,MAAT,CAAgBE,KAAhB,EAAuB;AACpC,MAAIC,WAAWD,MAAM9wD,KAAN,CAAY,CAAZ,EAAe6wD,UAAf,CAAf;AACA,SAAOE,SAAS/5C,MAAT,CAAgB,UAAUouB,IAAV,EAAgB4rB,MAAhB,EAAwBzxD,KAAxB,EAA+B;AACpD,WAAO6lC,QAAQ2rB,SAAS16D,MAAT,GAAkB,CAAlB,GAAsB,IAAtB,GAA6B,GAArC,KAA6CkJ,UAAUwxD,SAAS16D,MAAT,GAAkB,CAA5B,GAAgC,KAAhC,GAAwC,EAArF,IAA2F26D,MAAlkBCLuBC;;AALxB;;;;;;AACA;;;;AAIe,SAASA,YAAT,CAAsBH,KAAtB,EAA6B;AAC1C,SAAO,sBAAOA,MAAMt1D,GAAN,CAAU,UAAUsoB,IAAV,EAAgB;AACtC,WAAO,KAAK9pB,MAAL,CAAY8pB,IAAZ,EAAkB,IAAlB,CAAP;AACD,GAFa,CAAP,CAAP;AAGD,EAjgBotC,qBAAAA;QAgBAC,iBAAAA;;AAnBhB;;AACA;;;;AACA;;;;;;AACO,SAASD,kBAAT,CAA4Bna,QAA5B,EAAsCqa,cAAtC,EAAsD;AAC3D,MAAIxsD,UAAU,kBAAkB5K,MAAlB,CAAyB+8C,QAAzB,EAAmC,KAAnC,CAAd;;AAEA,MAAIqa,eAAe/6D,MAAnB,EAA2B;AACzBuO,eAAW,iBAAiB5K,MAAjB,CAAwB,4BAAao3D,cAAb,CAAxB,EAAsD,GAAtD,CAAX;AACD;;AAED,SAAOxsD,OAAP;AACD;AACD;;;;;;;AApBA;;;;;;;;AA2BO,SAASusD,cAAT,CAAwB1iD,OAAxB,EAAiC;AACtC,SAAO;AACL;AACA;AACA;AACAxQ,0BAAsB,SAASA,oBAAT,GAAgC;AACpD,aAAO,KAAP;AACD,KANI;AAOLG,6BAAyB,SAASA,uBAAT,GAAmC;AAC1D,aAAO,KAAP;AACD,KATI;AAULC,yBAAqB,SAASA,mBAAT,GAA+B;AAClD,aAAO,KAAP;AACD,KAZI;AAaLG,+BAA2B,SAASA,yBAAT,GAAqC;AAC9D,aAAO,KAAP;AACD,KAfI;AAgBLb,eAAW,SAASA,SAAT,CAAmB8B,IAAnB,EAAyB;AAClC,UAAIy0C,SAASzlC,QAAQ4iD,SAAR,EAAb;AACA,UAAIta,WAAWt3C,KAAKnE,IAAL,CAAUnD,KAAzB;AACA,UAAI4R,OAAOmqC,OAAOwB,OAAP,CAAeqB,QAAf,CAAX;;AAEA,UAAI,CAAChtC,IAAL,EAAW;AACT0E,gBAAQqtC,WAAR,CAAoB,IAAI7B,0BAAJ,CAAiBiX,mBAAmBna,QAAnB,EAA6B,8BAAeA,QAAf,EAAyB3hD,OAAOuG,IAAP,CAAYu4C,OAAOC,UAAP,EAAZ,CAAzB,CAA7B,CAAjB,EAA2G,CAAC10C,IAAD,CAA3G,CAApB;AACD;AACF;AAxBI,GAAP;AA0BD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QCxBe87D,kBAAAA;QAGAC,uBAAAA;QAGAC,sBAAAA;QAUAC,sBAAAA;;AAxBhB;;AACA;;AACA;;AACA;;;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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtpfile":"src.dce0e6cb.map","sourceRoot":"../src","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = inspect;\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Used to print values in error messages.\n */\nfunction inspect(value) {\n  switch (_typeof(value)) {\n    case 'string':\n      return JSON.stringify(value);\n\n    case 'function':\n      return value.name ? \"[function \".concat(value.name, \"]\") : '[function]';\n\n    case 'object':\n      if (value) {\n        if (typeof value.inspect === 'function') {\n          return value.inspect();\n        } else if (Array.isArray(value)) {\n          return '[' + value.map(inspect).join(', ') + ']';\n        }\n\n        var properties = Object.keys(value).map(function (k) {\n          return \"\".concat(k, \": \").concat(inspect(value[k]));\n        }).join(', ');\n        return properties ? '{ ' + properties + ' }' : '{}';\n      }\n\n      return String(value);\n\n    default:\n      return String(value);\n  }\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.visit = visit;\nexports.visitInParallel = visitInParallel;\nexports.visitWithTypeInfo = visitWithTypeInfo;\nexports.getVisitFn = getVisitFn;\nexports.BREAK = exports.QueryDocumentKeys = void 0;\n\nvar _inspect = _interopRequireDefault(require(\"../jsutils/inspect\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nvar QueryDocumentKeys = {\n  Name: [],\n  Document: ['definitions'],\n  OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],\n  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: ['name', // Note: fragment variable definitions are experimental and may be changed\n  // or removed in the future.\n  'variableDefinitions', 'typeCondition', 'directives', 'selectionSet'],\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n  Directive: ['name', 'arguments'],\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n  SchemaDefinition: ['directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: ['description', 'name', 'type', 'defaultValue', 'directives'],\n  InterfaceTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],\n  SchemaExtension: ['directives', 'operationTypes'],\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields']\n};\nexports.QueryDocumentKeys = QueryDocumentKeys;\nvar BREAK = {};\n/**\n * visit() will walk through an AST using a depth first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n *     const editedAST = visit(ast, {\n *       enter(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: skip visiting this node\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       },\n *       leave(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: no action\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       }\n *     });\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to four permutations of\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node a specific kind.\n *\n *     visit(ast, {\n *       Kind(node) {\n *         // enter the \"Kind\" node\n *       }\n *     })\n *\n * 2) Named visitors that trigger upon entering and leaving a node of\n *    a specific kind.\n *\n *     visit(ast, {\n *       Kind: {\n *         enter(node) {\n *           // enter the \"Kind\" node\n *         }\n *         leave(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n *     visit(ast, {\n *       enter(node) {\n *         // enter any node\n *       },\n *       leave(node) {\n *         // leave any node\n *       }\n *     })\n *\n * 4) Parallel visitors for entering and leaving nodes of a specific kind.\n *\n *     visit(ast, {\n *       enter: {\n *         Kind(node) {\n *           // enter the \"Kind\" node\n *         }\n *       },\n *       leave: {\n *         Kind(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n */\n\nexports.BREAK = BREAK;\n\nfunction visit(root, visitor) {\n  var visitorKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : QueryDocumentKeys;\n\n  /* eslint-disable no-undef-init */\n  var stack = undefined;\n  var inArray = Array.isArray(root);\n  var keys = [root];\n  var index = -1;\n  var edits = [];\n  var node = undefined;\n  var key = undefined;\n  var parent = undefined;\n  var path = [];\n  var ancestors = [];\n  var newRoot = root;\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    var isLeaving = index === keys.length;\n    var isEdited = isLeaving && edits.length !== 0;\n\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n        } else {\n          var clone = {};\n\n          for (var k in node) {\n            if (node.hasOwnProperty(k)) {\n              clone[k] = node[k];\n            }\n          }\n\n          node = clone;\n        }\n\n        var editOffset = 0;\n\n        for (var ii = 0; ii < edits.length; ii++) {\n          var editKey = edits[ii][0];\n          var editValue = edits[ii][1];\n\n          if (inArray) {\n            editKey -= editOffset;\n          }\n\n          if (inArray && editValue === null) {\n            node.splice(editKey, 1);\n            editOffset++;\n          } else {\n            node[editKey] = editValue;\n          }\n        }\n      }\n\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else {\n      key = parent ? inArray ? index : keys[index] : undefined;\n      node = parent ? parent[key] : newRoot;\n\n      if (node === null || node === undefined) {\n        continue;\n      }\n\n      if (parent) {\n        path.push(key);\n      }\n    }\n\n    var result = void 0;\n\n    if (!Array.isArray(node)) {\n      if (!isNode(node)) {\n        throw new Error('Invalid AST Node: ' + (0, _inspect.default)(node));\n      }\n\n      var visitFn = getVisitFn(visitor, node.kind, isLeaving);\n\n      if (visitFn) {\n        result = visitFn.call(visitor, node, key, parent, path, ancestors);\n\n        if (result === BREAK) {\n          break;\n        }\n\n        if (result === false) {\n          if (!isLeaving) {\n            path.pop();\n            continue;\n          }\n        } else if (result !== undefined) {\n          edits.push([key, result]);\n\n          if (!isLeaving) {\n            if (isNode(result)) {\n              node = result;\n            } else {\n              path.pop();\n              continue;\n            }\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      stack = {\n        inArray: inArray,\n        index: index,\n        keys: keys,\n        edits: edits,\n        prev: stack\n      };\n      inArray = Array.isArray(node);\n      keys = inArray ? node : visitorKeys[node.kind] || [];\n      index = -1;\n      edits = [];\n\n      if (parent) {\n        ancestors.push(parent);\n      }\n\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    newRoot = edits[edits.length - 1][1];\n  }\n\n  return newRoot;\n}\n\nfunction isNode(maybeNode) {\n  return Boolean(maybeNode && typeof maybeNode.kind === 'string');\n}\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\n\n\nfunction visitInParallel(visitors) {\n  var skipping = new Array(visitors.length);\n  return {\n    enter: function enter(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (!skipping[i]) {\n          var fn = getVisitFn(visitors[i], node.kind,\n          /* isLeaving */\n          false);\n\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      }\n    },\n    leave: function leave(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (!skipping[i]) {\n          var fn = getVisitFn(visitors[i], node.kind,\n          /* isLeaving */\n          true);\n\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          }\n        } else if (skipping[i] === node) {\n          skipping[i] = null;\n        }\n      }\n    }\n  };\n}\n/**\n * Creates a new visitor instance which maintains a provided TypeInfo instance\n * along with visiting visitor.\n */\n\n\nfunction visitWithTypeInfo(typeInfo, visitor) {\n  return {\n    enter: function enter(node) {\n      typeInfo.enter(node);\n      var fn = getVisitFn(visitor, node.kind,\n      /* isLeaving */\n      false);\n\n      if (fn) {\n        var result = fn.apply(visitor, arguments);\n\n        if (result !== undefined) {\n          typeInfo.leave(node);\n\n          if (isNode(result)) {\n            typeInfo.enter(result);\n          }\n        }\n\n        return result;\n      }\n    },\n    leave: function leave(node) {\n      var fn = getVisitFn(visitor, node.kind,\n      /* isLeaving */\n      true);\n      var result;\n\n      if (fn) {\n        result = fn.apply(visitor, arguments);\n      }\n\n      typeInfo.leave(node);\n      return result;\n    }\n  };\n}\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n */\n\n\nfunction getVisitFn(visitor, kind, isLeaving) {\n  var kindVisitor = visitor[kind];\n\n  if (kindVisitor) {\n    if (!isLeaving && typeof kindVisitor === 'function') {\n      // { Kind() {} }\n      return kindVisitor;\n    }\n\n    var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;\n\n    if (typeof kindSpecificVisitor === 'function') {\n      // { Kind: { enter() {}, leave() {} } }\n      return kindSpecificVisitor;\n    }\n  } else {\n    var specificVisitor = isLeaving ? visitor.leave : visitor.enter;\n\n    if (specificVisitor) {\n      if (typeof specificVisitor === 'function') {\n        // { enter() {}, leave() {} }\n        return specificVisitor;\n      }\n\n      var specificKindVisitor = specificVisitor[kind];\n\n      if (typeof specificKindVisitor === 'function') {\n        // { enter: { Kind() {} }, leave: { Kind() {} } }\n        return specificKindVisitor;\n      }\n    }\n  }\n}","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","import { __extends } from 'tslib';\n\nvar genericMessage = \"Invariant Violation\";\r\nvar _a = Object.setPrototypeOf, setPrototypeOf = _a === void 0 ? function (obj, proto) {\r\n    obj.__proto__ = proto;\r\n    return obj;\r\n} : _a;\r\nvar InvariantError = /** @class */ (function (_super) {\r\n    __extends(InvariantError, _super);\r\n    function InvariantError(message) {\r\n        if (message === void 0) { message = genericMessage; }\r\n        var _this = _super.call(this, typeof message === \"number\"\r\n            ? genericMessage + \": \" + message + \" (see https://github.com/apollographql/invariant-packages)\"\r\n            : message) || this;\r\n        _this.framesToPop = 1;\r\n        _this.name = genericMessage;\r\n        setPrototypeOf(_this, InvariantError.prototype);\r\n        return _this;\r\n    }\r\n    return InvariantError;\r\n}(Error));\r\nfunction invariant(condition, message) {\r\n    if (!condition) {\r\n        throw new InvariantError(message);\r\n    }\r\n}\r\nfunction wrapConsoleMethod(method) {\r\n    return function () {\r\n        return console[method].apply(console, arguments);\r\n    };\r\n}\r\n(function (invariant) {\r\n    invariant.warn = wrapConsoleMethod(\"warn\");\r\n    invariant.error = wrapConsoleMethod(\"error\");\r\n})(invariant || (invariant = {}));\r\n// Code that uses ts-invariant with rollup-plugin-invariant may want to\r\n// import this process stub to avoid errors evaluating process.env.NODE_ENV.\r\n// However, because most ESM-to-CJS compilers will rewrite the process import\r\n// as tsInvariant.process, which prevents proper replacement by minifiers, we\r\n// also attempt to define the stub globally when it is not already defined.\r\nvar processStub = { env: {} };\r\nif (typeof process === \"object\") {\r\n    processStub = process;\r\n}\r\nelse\r\n    try {\r\n        // Using Function to evaluate this assignment in global scope also escapes\r\n        // the strict mode of the current module, thereby allowing the assignment.\r\n        // Inspired by https://github.com/facebook/regenerator/pull/369.\r\n        Function(\"stub\", \"process = stub\")(processStub);\r\n    }\r\n    catch (atLeastWeTried) {\r\n        // The assignment can fail if a Content Security Policy heavy-handedly\r\n        // forbids Function usage. In those environments, developers should take\r\n        // extra care to replace process.env.NODE_ENV in their production builds,\r\n        // or define an appropriate global.process polyfill.\r\n    }\r\nvar invariant$1 = invariant;\n\nexport default invariant$1;\nexport { InvariantError, invariant, processStub as process };\n//# sourceMappingURL=invariant.esm.js.map\n","'use strict';\n\nmodule.exports = function (data, opts) {\n    if (!opts) opts = {};\n    if (typeof opts === 'function') opts = { cmp: opts };\n    var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;\n\n    var cmp = opts.cmp && (function (f) {\n        return function (node) {\n            return function (a, b) {\n                var aobj = { key: a, value: node[a] };\n                var bobj = { key: b, value: node[b] };\n                return f(aobj, bobj);\n            };\n        };\n    })(opts.cmp);\n\n    var seen = [];\n    return (function stringify (node) {\n        if (node && node.toJSON && typeof node.toJSON === 'function') {\n            node = node.toJSON();\n        }\n\n        if (node === undefined) return;\n        if (typeof node == 'number') return isFinite(node) ? '' + node : 'null';\n        if (typeof node !== 'object') return JSON.stringify(node);\n\n        var i, out;\n        if (Array.isArray(node)) {\n            out = '[';\n            for (i = 0; i < node.length; i++) {\n                if (i) out += ',';\n                out += stringify(node[i]) || 'null';\n            }\n            return out + ']';\n        }\n\n        if (node === null) return 'null';\n\n        if (seen.indexOf(node) !== -1) {\n            if (cycles) return JSON.stringify('__cycle__');\n            throw new TypeError('Converting circular structure to JSON');\n        }\n\n        var seenIndex = seen.push(node) - 1;\n        var keys = Object.keys(node).sort(cmp && cmp(node));\n        out = '';\n        for (i = 0; i < keys.length; i++) {\n            var key = keys[i];\n            var value = stringify(node[key]);\n\n            if (!value) continue;\n            if (out) out += ',';\n            out += JSON.stringify(key) + ':' + value;\n        }\n        seen.splice(seenIndex, 1);\n        return '{' + out + '}';\n    })(data);\n};\n","var _a = Object.prototype, toString = _a.toString, hasOwnProperty = _a.hasOwnProperty;\r\nvar previousComparisons = new Map();\r\n/**\r\n * Performs a deep equality check on two JavaScript values, tolerating cycles.\r\n */\r\nfunction equal(a, b) {\r\n    try {\r\n        return check(a, b);\r\n    }\r\n    finally {\r\n        previousComparisons.clear();\r\n    }\r\n}\r\nfunction check(a, b) {\r\n    // If the two values are strictly equal, our job is easy.\r\n    if (a === b) {\r\n        return true;\r\n    }\r\n    // Object.prototype.toString returns a representation of the runtime type of\r\n    // the given value that is considerably more precise than typeof.\r\n    var aTag = toString.call(a);\r\n    var bTag = toString.call(b);\r\n    // If the runtime types of a and b are different, they could maybe be equal\r\n    // under some interpretation of equality, but for simplicity and performance\r\n    // we just return false instead.\r\n    if (aTag !== bTag) {\r\n        return false;\r\n    }\r\n    switch (aTag) {\r\n        case '[object Array]':\r\n            // Arrays are a lot like other objects, but we can cheaply compare their\r\n            // lengths as a short-cut before comparing their elements.\r\n            if (a.length !== b.length)\r\n                return false;\r\n        // Fall through to object case...\r\n        case '[object Object]': {\r\n            if (previouslyCompared(a, b))\r\n                return true;\r\n            var aKeys = Object.keys(a);\r\n            var bKeys = Object.keys(b);\r\n            // If `a` and `b` have a different number of enumerable keys, they\r\n            // must be different.\r\n            var keyCount = aKeys.length;\r\n            if (keyCount !== bKeys.length)\r\n                return false;\r\n            // Now make sure they have the same keys.\r\n            for (var k = 0; k < keyCount; ++k) {\r\n                if (!hasOwnProperty.call(b, aKeys[k])) {\r\n                    return false;\r\n                }\r\n            }\r\n            // Finally, check deep equality of all child properties.\r\n            for (var k = 0; k < keyCount; ++k) {\r\n                var key = aKeys[k];\r\n                if (!check(a[key], b[key])) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        case '[object Error]':\r\n            return a.name === b.name && a.message === b.message;\r\n        case '[object Number]':\r\n            // Handle NaN, which is !== itself.\r\n            if (a !== a)\r\n                return b !== b;\r\n        // Fall through to shared +a === +b case...\r\n        case '[object Boolean]':\r\n        case '[object Date]':\r\n            return +a === +b;\r\n        case '[object RegExp]':\r\n        case '[object String]':\r\n            return a == \"\" + b;\r\n        case '[object Map]':\r\n        case '[object Set]': {\r\n            if (a.size !== b.size)\r\n                return false;\r\n            if (previouslyCompared(a, b))\r\n                return true;\r\n            var aIterator = a.entries();\r\n            var isMap = aTag === '[object Map]';\r\n            while (true) {\r\n                var info = aIterator.next();\r\n                if (info.done)\r\n                    break;\r\n                // If a instanceof Set, aValue === aKey.\r\n                var _a = info.value, aKey = _a[0], aValue = _a[1];\r\n                // So this works the same way for both Set and Map.\r\n                if (!b.has(aKey)) {\r\n                    return false;\r\n                }\r\n                // However, we care about deep equality of values only when dealing\r\n                // with Map structures.\r\n                if (isMap && !check(aValue, b.get(aKey))) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    // Otherwise the values are not equal.\r\n    return false;\r\n}\r\nfunction previouslyCompared(a, b) {\r\n    // Though cyclic references can make an object graph appear infinite from the\r\n    // perspective of a depth-first traversal, the graph still contains a finite\r\n    // number of distinct object references. We use the previousComparisons cache\r\n    // to avoid comparing the same pair of object references more than once, which\r\n    // guarantees termination (even if we end up comparing every object in one\r\n    // graph to every object in the other graph, which is extremely unlikely),\r\n    // while still allowing weird isomorphic structures (like rings with different\r\n    // lengths) a chance to pass the equality test.\r\n    var bSet = previousComparisons.get(a);\r\n    if (bSet) {\r\n        // Return true here because we can be sure false will be returned somewhere\r\n        // else if the objects are not equivalent.\r\n        if (bSet.has(b))\r\n            return true;\r\n    }\r\n    else {\r\n        previousComparisons.set(a, bSet = new Set);\r\n    }\r\n    bSet.add(b);\r\n    return false;\r\n}\n\nexport default equal;\nexport { equal };\n//# sourceMappingURL=equality.esm.js.map\n","import { visit } from 'graphql/language/visitor';\nimport { InvariantError, invariant } from 'ts-invariant';\nimport { __assign } from 'tslib';\nimport stringify from 'fast-json-stable-stringify';\nexport { equal as isEqual } from '@wry/equality';\n\nfunction isScalarValue(value) {\n    return ['StringValue', 'BooleanValue', 'EnumValue'].indexOf(value.kind) > -1;\n}\nfunction isNumberValue(value) {\n    return ['IntValue', 'FloatValue'].indexOf(value.kind) > -1;\n}\nfunction isStringValue(value) {\n    return value.kind === 'StringValue';\n}\nfunction isBooleanValue(value) {\n    return value.kind === 'BooleanValue';\n}\nfunction isIntValue(value) {\n    return value.kind === 'IntValue';\n}\nfunction isFloatValue(value) {\n    return value.kind === 'FloatValue';\n}\nfunction isVariable(value) {\n    return value.kind === 'Variable';\n}\nfunction isObjectValue(value) {\n    return value.kind === 'ObjectValue';\n}\nfunction isListValue(value) {\n    return value.kind === 'ListValue';\n}\nfunction isEnumValue(value) {\n    return value.kind === 'EnumValue';\n}\nfunction isNullValue(value) {\n    return value.kind === 'NullValue';\n}\nfunction valueToObjectRepresentation(argObj, name, value, variables) {\n    if (isIntValue(value) || isFloatValue(value)) {\n        argObj[name.value] = Number(value.value);\n    }\n    else if (isBooleanValue(value) || isStringValue(value)) {\n        argObj[name.value] = value.value;\n    }\n    else if (isObjectValue(value)) {\n        var nestedArgObj_1 = {};\n        value.fields.map(function (obj) {\n            return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);\n        });\n        argObj[name.value] = nestedArgObj_1;\n    }\n    else if (isVariable(value)) {\n        var variableValue = (variables || {})[value.name.value];\n        argObj[name.value] = variableValue;\n    }\n    else if (isListValue(value)) {\n        argObj[name.value] = value.values.map(function (listValue) {\n            var nestedArgArrayObj = {};\n            valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);\n            return nestedArgArrayObj[name.value];\n        });\n    }\n    else if (isEnumValue(value)) {\n        argObj[name.value] = value.value;\n    }\n    else if (isNullValue(value)) {\n        argObj[name.value] = null;\n    }\n    else {\n        throw process.env.NODE_ENV === \"production\" ? new InvariantError(17) : new InvariantError(\"The inline argument \\\"\" + name.value + \"\\\" of kind \\\"\" + value.kind + \"\\\"\" +\n            'is not supported. Use variables instead of inline arguments to ' +\n            'overcome this limitation.');\n    }\n}\nfunction storeKeyNameFromField(field, variables) {\n    var directivesObj = null;\n    if (field.directives) {\n        directivesObj = {};\n        field.directives.forEach(function (directive) {\n            directivesObj[directive.name.value] = {};\n            if (directive.arguments) {\n                directive.arguments.forEach(function (_a) {\n                    var name = _a.name, value = _a.value;\n                    return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);\n                });\n            }\n        });\n    }\n    var argObj = null;\n    if (field.arguments && field.arguments.length) {\n        argObj = {};\n        field.arguments.forEach(function (_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj, name, value, variables);\n        });\n    }\n    return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\nvar KNOWN_DIRECTIVES = [\n    'connection',\n    'include',\n    'skip',\n    'client',\n    'rest',\n    'export',\n];\nfunction getStoreKeyName(fieldName, args, directives) {\n    if (directives &&\n        directives['connection'] &&\n        directives['connection']['key']) {\n        if (directives['connection']['filter'] &&\n            directives['connection']['filter'].length > 0) {\n            var filterKeys = directives['connection']['filter']\n                ? directives['connection']['filter']\n                : [];\n            filterKeys.sort();\n            var queryArgs_1 = args;\n            var filteredArgs_1 = {};\n            filterKeys.forEach(function (key) {\n                filteredArgs_1[key] = queryArgs_1[key];\n            });\n            return directives['connection']['key'] + \"(\" + JSON.stringify(filteredArgs_1) + \")\";\n        }\n        else {\n            return directives['connection']['key'];\n        }\n    }\n    var completeFieldName = fieldName;\n    if (args) {\n        var stringifiedArgs = stringify(args);\n        completeFieldName += \"(\" + stringifiedArgs + \")\";\n    }\n    if (directives) {\n        Object.keys(directives).forEach(function (key) {\n            if (KNOWN_DIRECTIVES.indexOf(key) !== -1)\n                return;\n            if (directives[key] && Object.keys(directives[key]).length) {\n                completeFieldName += \"@\" + key + \"(\" + JSON.stringify(directives[key]) + \")\";\n            }\n            else {\n                completeFieldName += \"@\" + key;\n            }\n        });\n    }\n    return completeFieldName;\n}\nfunction argumentsObjectFromField(field, variables) {\n    if (field.arguments && field.arguments.length) {\n        var argObj_1 = {};\n        field.arguments.forEach(function (_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj_1, name, value, variables);\n        });\n        return argObj_1;\n    }\n    return null;\n}\nfunction resultKeyNameFromField(field) {\n    return field.alias ? field.alias.value : field.name.value;\n}\nfunction isField(selection) {\n    return selection.kind === 'Field';\n}\nfunction isInlineFragment(selection) {\n    return selection.kind === 'InlineFragment';\n}\nfunction isIdValue(idObject) {\n    return idObject &&\n        idObject.type === 'id' &&\n        typeof idObject.generated === 'boolean';\n}\nfunction toIdValue(idConfig, generated) {\n    if (generated === void 0) { generated = false; }\n    return __assign({ type: 'id', generated: generated }, (typeof idConfig === 'string'\n        ? { id: idConfig, typename: undefined }\n        : idConfig));\n}\nfunction isJsonValue(jsonObject) {\n    return (jsonObject != null &&\n        typeof jsonObject === 'object' &&\n        jsonObject.type === 'json');\n}\nfunction defaultValueFromVariable(node) {\n    throw process.env.NODE_ENV === \"production\" ? new InvariantError(18) : new InvariantError(\"Variable nodes are not supported by valueFromNode\");\n}\nfunction valueFromNode(node, onVariable) {\n    if (onVariable === void 0) { onVariable = defaultValueFromVariable; }\n    switch (node.kind) {\n        case 'Variable':\n            return onVariable(node);\n        case 'NullValue':\n            return null;\n        case 'IntValue':\n            return parseInt(node.value, 10);\n        case 'FloatValue':\n            return parseFloat(node.value);\n        case 'ListValue':\n            return node.values.map(function (v) { return valueFromNode(v, onVariable); });\n        case 'ObjectValue': {\n            var value = {};\n            for (var _i = 0, _a = node.fields; _i < _a.length; _i++) {\n                var field = _a[_i];\n                value[field.name.value] = valueFromNode(field.value, onVariable);\n            }\n            return value;\n        }\n        default:\n            return node.value;\n    }\n}\n\nfunction getDirectiveInfoFromField(field, variables) {\n    if (field.directives && field.directives.length) {\n        var directiveObj_1 = {};\n        field.directives.forEach(function (directive) {\n            directiveObj_1[directive.name.value] = argumentsObjectFromField(directive, variables);\n        });\n        return directiveObj_1;\n    }\n    return null;\n}\nfunction shouldInclude(selection, variables) {\n    if (variables === void 0) { variables = {}; }\n    return getInclusionDirectives(selection.directives).every(function (_a) {\n        var directive = _a.directive, ifArgument = _a.ifArgument;\n        var evaledValue = false;\n        if (ifArgument.value.kind === 'Variable') {\n            evaledValue = variables[ifArgument.value.name.value];\n            process.env.NODE_ENV === \"production\" ? invariant(evaledValue !== void 0, 3) : invariant(evaledValue !== void 0, \"Invalid variable referenced in @\" + directive.name.value + \" directive.\");\n        }\n        else {\n            evaledValue = ifArgument.value.value;\n        }\n        return directive.name.value === 'skip' ? !evaledValue : evaledValue;\n    });\n}\nfunction getDirectiveNames(doc) {\n    var names = [];\n    visit(doc, {\n        Directive: function (node) {\n            names.push(node.name.value);\n        },\n    });\n    return names;\n}\nfunction hasDirectives(names, doc) {\n    return getDirectiveNames(doc).some(function (name) { return names.indexOf(name) > -1; });\n}\nfunction hasClientExports(document) {\n    return (document &&\n        hasDirectives(['client'], document) &&\n        hasDirectives(['export'], document));\n}\nfunction isInclusionDirective(_a) {\n    var value = _a.name.value;\n    return value === 'skip' || value === 'include';\n}\nfunction getInclusionDirectives(directives) {\n    return directives ? directives.filter(isInclusionDirective).map(function (directive) {\n        var directiveArguments = directive.arguments;\n        var directiveName = directive.name.value;\n        process.env.NODE_ENV === \"production\" ? invariant(directiveArguments && directiveArguments.length === 1, 4) : invariant(directiveArguments && directiveArguments.length === 1, \"Incorrect number of arguments for the @\" + directiveName + \" directive.\");\n        var ifArgument = directiveArguments[0];\n        process.env.NODE_ENV === \"production\" ? invariant(ifArgument.name && ifArgument.name.value === 'if', 5) : invariant(ifArgument.name && ifArgument.name.value === 'if', \"Invalid argument for the @\" + directiveName + \" directive.\");\n        var ifValue = ifArgument.value;\n        process.env.NODE_ENV === \"production\" ? invariant(ifValue &&\n            (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), 6) : invariant(ifValue &&\n            (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), \"Argument for the @\" + directiveName + \" directive must be a variable or a boolean value.\");\n        return { directive: directive, ifArgument: ifArgument };\n    }) : [];\n}\n\nfunction getFragmentQueryDocument(document, fragmentName) {\n    var actualFragmentName = fragmentName;\n    var fragments = [];\n    document.definitions.forEach(function (definition) {\n        if (definition.kind === 'OperationDefinition') {\n            throw process.env.NODE_ENV === \"production\" ? new InvariantError(1) : new InvariantError(\"Found a \" + definition.operation + \" operation\" + (definition.name ? \" named '\" + definition.name.value + \"'\" : '') + \". \" +\n                'No operations are allowed when using a fragment as a query. Only fragments are allowed.');\n        }\n        if (definition.kind === 'FragmentDefinition') {\n            fragments.push(definition);\n        }\n    });\n    if (typeof actualFragmentName === 'undefined') {\n        process.env.NODE_ENV === \"production\" ? invariant(fragments.length === 1, 2) : invariant(fragments.length === 1, \"Found \" + fragments.length + \" fragments. `fragmentName` must be provided when there is not exactly 1 fragment.\");\n        actualFragmentName = fragments[0].name.value;\n    }\n    var query = __assign({}, document, { definitions: [\n            {\n                kind: 'OperationDefinition',\n                operation: 'query',\n                selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [\n                        {\n                            kind: 'FragmentSpread',\n                            name: {\n                                kind: 'Name',\n                                value: actualFragmentName,\n                            },\n                        },\n                    ],\n                },\n            }\n        ].concat(document.definitions) });\n    return query;\n}\n\nfunction assign(target) {\n    var sources = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        sources[_i - 1] = arguments[_i];\n    }\n    sources.forEach(function (source) {\n        if (typeof source === 'undefined' || source === null) {\n            return;\n        }\n        Object.keys(source).forEach(function (key) {\n            target[key] = source[key];\n        });\n    });\n    return target;\n}\n\nfunction getMutationDefinition(doc) {\n    checkDocument(doc);\n    var mutationDef = doc.definitions.filter(function (definition) {\n        return definition.kind === 'OperationDefinition' &&\n            definition.operation === 'mutation';\n    })[0];\n    process.env.NODE_ENV === \"production\" ? invariant(mutationDef, 7) : invariant(mutationDef, 'Must contain a mutation definition.');\n    return mutationDef;\n}\nfunction checkDocument(doc) {\n    process.env.NODE_ENV === \"production\" ? invariant(doc && doc.kind === 'Document', 8) : invariant(doc && doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n    var operations = doc.definitions\n        .filter(function (d) { return d.kind !== 'FragmentDefinition'; })\n        .map(function (definition) {\n        if (definition.kind !== 'OperationDefinition') {\n            throw process.env.NODE_ENV === \"production\" ? new InvariantError(9) : new InvariantError(\"Schema type definitions not allowed in queries. Found: \\\"\" + definition.kind + \"\\\"\");\n        }\n        return definition;\n    });\n    process.env.NODE_ENV === \"production\" ? invariant(operations.length <= 1, 10) : invariant(operations.length <= 1, \"Ambiguous GraphQL document: contains \" + operations.length + \" operations\");\n    return doc;\n}\nfunction getOperationDefinition(doc) {\n    checkDocument(doc);\n    return doc.definitions.filter(function (definition) { return definition.kind === 'OperationDefinition'; })[0];\n}\nfunction getOperationDefinitionOrDie(document) {\n    var def = getOperationDefinition(document);\n    process.env.NODE_ENV === \"production\" ? invariant(def, 11) : invariant(def, \"GraphQL document is missing an operation\");\n    return def;\n}\nfunction getOperationName(doc) {\n    return (doc.definitions\n        .filter(function (definition) {\n        return definition.kind === 'OperationDefinition' && definition.name;\n    })\n        .map(function (x) { return x.name.value; })[0] || null);\n}\nfunction getFragmentDefinitions(doc) {\n    return doc.definitions.filter(function (definition) { return definition.kind === 'FragmentDefinition'; });\n}\nfunction getQueryDefinition(doc) {\n    var queryDef = getOperationDefinition(doc);\n    process.env.NODE_ENV === \"production\" ? invariant(queryDef && queryDef.operation === 'query', 12) : invariant(queryDef && queryDef.operation === 'query', 'Must contain a query definition.');\n    return queryDef;\n}\nfunction getFragmentDefinition(doc) {\n    process.env.NODE_ENV === \"production\" ? invariant(doc.kind === 'Document', 13) : invariant(doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n    process.env.NODE_ENV === \"production\" ? invariant(doc.definitions.length <= 1, 14) : invariant(doc.definitions.length <= 1, 'Fragment must have exactly one definition.');\n    var fragmentDef = doc.definitions[0];\n    process.env.NODE_ENV === \"production\" ? invariant(fragmentDef.kind === 'FragmentDefinition', 15) : invariant(fragmentDef.kind === 'FragmentDefinition', 'Must be a fragment definition.');\n    return fragmentDef;\n}\nfunction getMainDefinition(queryDoc) {\n    checkDocument(queryDoc);\n    var fragmentDefinition;\n    for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {\n        var definition = _a[_i];\n        if (definition.kind === 'OperationDefinition') {\n            var operation = definition.operation;\n            if (operation === 'query' ||\n                operation === 'mutation' ||\n                operation === 'subscription') {\n                return definition;\n            }\n        }\n        if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n            fragmentDefinition = definition;\n        }\n    }\n    if (fragmentDefinition) {\n        return fragmentDefinition;\n    }\n    throw process.env.NODE_ENV === \"production\" ? new InvariantError(16) : new InvariantError('Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.');\n}\nfunction createFragmentMap(fragments) {\n    if (fragments === void 0) { fragments = []; }\n    var symTable = {};\n    fragments.forEach(function (fragment) {\n        symTable[fragment.name.value] = fragment;\n    });\n    return symTable;\n}\nfunction getDefaultValues(definition) {\n    if (definition &&\n        definition.variableDefinitions &&\n        definition.variableDefinitions.length) {\n        var defaultValues = definition.variableDefinitions\n            .filter(function (_a) {\n            var defaultValue = _a.defaultValue;\n            return defaultValue;\n        })\n            .map(function (_a) {\n            var variable = _a.variable, defaultValue = _a.defaultValue;\n            var defaultValueObj = {};\n            valueToObjectRepresentation(defaultValueObj, variable.name, defaultValue);\n            return defaultValueObj;\n        });\n        return assign.apply(void 0, [{}].concat(defaultValues));\n    }\n    return {};\n}\nfunction variablesInOperation(operation) {\n    var names = new Set();\n    if (operation.variableDefinitions) {\n        for (var _i = 0, _a = operation.variableDefinitions; _i < _a.length; _i++) {\n            var definition = _a[_i];\n            names.add(definition.variable.name.value);\n        }\n    }\n    return names;\n}\n\nfunction filterInPlace(array, test, context) {\n    var target = 0;\n    array.forEach(function (elem, i) {\n        if (test.call(this, elem, i, array)) {\n            array[target++] = elem;\n        }\n    }, context);\n    array.length = target;\n    return array;\n}\n\nvar TYPENAME_FIELD = {\n    kind: 'Field',\n    name: {\n        kind: 'Name',\n        value: '__typename',\n    },\n};\nfunction isEmpty(op, fragments) {\n    return op.selectionSet.selections.every(function (selection) {\n        return selection.kind === 'FragmentSpread' &&\n            isEmpty(fragments[selection.name.value], fragments);\n    });\n}\nfunction nullIfDocIsEmpty(doc) {\n    return isEmpty(getOperationDefinition(doc) || getFragmentDefinition(doc), createFragmentMap(getFragmentDefinitions(doc)))\n        ? null\n        : doc;\n}\nfunction getDirectiveMatcher(directives) {\n    return function directiveMatcher(directive) {\n        return directives.some(function (dir) {\n            return (dir.name && dir.name === directive.name.value) ||\n                (dir.test && dir.test(directive));\n        });\n    };\n}\nfunction removeDirectivesFromDocument(directives, doc) {\n    var variablesInUse = Object.create(null);\n    var variablesToRemove = [];\n    var fragmentSpreadsInUse = Object.create(null);\n    var fragmentSpreadsToRemove = [];\n    var modifiedDoc = nullIfDocIsEmpty(visit(doc, {\n        Variable: {\n            enter: function (node, _key, parent) {\n                if (parent.kind !== 'VariableDefinition') {\n                    variablesInUse[node.name.value] = true;\n                }\n            },\n        },\n        Field: {\n            enter: function (node) {\n                if (directives && node.directives) {\n                    var shouldRemoveField = directives.some(function (directive) { return directive.remove; });\n                    if (shouldRemoveField &&\n                        node.directives &&\n                        node.directives.some(getDirectiveMatcher(directives))) {\n                        if (node.arguments) {\n                            node.arguments.forEach(function (arg) {\n                                if (arg.value.kind === 'Variable') {\n                                    variablesToRemove.push({\n                                        name: arg.value.name.value,\n                                    });\n                                }\n                            });\n                        }\n                        if (node.selectionSet) {\n                            getAllFragmentSpreadsFromSelectionSet(node.selectionSet).forEach(function (frag) {\n                                fragmentSpreadsToRemove.push({\n                                    name: frag.name.value,\n                                });\n                            });\n                        }\n                        return null;\n                    }\n                }\n            },\n        },\n        FragmentSpread: {\n            enter: function (node) {\n                fragmentSpreadsInUse[node.name.value] = true;\n            },\n        },\n        Directive: {\n            enter: function (node) {\n                if (getDirectiveMatcher(directives)(node)) {\n                    return null;\n                }\n            },\n        },\n    }));\n    if (modifiedDoc &&\n        filterInPlace(variablesToRemove, function (v) { return !variablesInUse[v.name]; }).length) {\n        modifiedDoc = removeArgumentsFromDocument(variablesToRemove, modifiedDoc);\n    }\n    if (modifiedDoc &&\n        filterInPlace(fragmentSpreadsToRemove, function (fs) { return !fragmentSpreadsInUse[fs.name]; })\n            .length) {\n        modifiedDoc = removeFragmentSpreadFromDocument(fragmentSpreadsToRemove, modifiedDoc);\n    }\n    return modifiedDoc;\n}\nfunction addTypenameToDocument(doc) {\n    return visit(checkDocument(doc), {\n        SelectionSet: {\n            enter: function (node, _key, parent) {\n                if (parent &&\n                    parent.kind === 'OperationDefinition') {\n                    return;\n                }\n                var selections = node.selections;\n                if (!selections) {\n                    return;\n                }\n                var skip = selections.some(function (selection) {\n                    return (isField(selection) &&\n                        (selection.name.value === '__typename' ||\n                            selection.name.value.lastIndexOf('__', 0) === 0));\n                });\n                if (skip) {\n                    return;\n                }\n                var field = parent;\n                if (isField(field) &&\n                    field.directives &&\n                    field.directives.some(function (d) { return d.name.value === 'export'; })) {\n                    return;\n                }\n                return __assign({}, node, { selections: selections.concat([TYPENAME_FIELD]) });\n            },\n        },\n    });\n}\nvar connectionRemoveConfig = {\n    test: function (directive) {\n        var willRemove = directive.name.value === 'connection';\n        if (willRemove) {\n            if (!directive.arguments ||\n                !directive.arguments.some(function (arg) { return arg.name.value === 'key'; })) {\n                process.env.NODE_ENV === \"production\" || invariant.warn('Removing an @connection directive even though it does not have a key. ' +\n                    'You may want to use the key parameter to specify a store key.');\n            }\n        }\n        return willRemove;\n    },\n};\nfunction removeConnectionDirectiveFromDocument(doc) {\n    return removeDirectivesFromDocument([connectionRemoveConfig], checkDocument(doc));\n}\nfunction hasDirectivesInSelectionSet(directives, selectionSet, nestedCheck) {\n    if (nestedCheck === void 0) { nestedCheck = true; }\n    return (selectionSet &&\n        selectionSet.selections &&\n        selectionSet.selections.some(function (selection) {\n            return hasDirectivesInSelection(directives, selection, nestedCheck);\n        }));\n}\nfunction hasDirectivesInSelection(directives, selection, nestedCheck) {\n    if (nestedCheck === void 0) { nestedCheck = true; }\n    if (!isField(selection)) {\n        return true;\n    }\n    if (!selection.directives) {\n        return false;\n    }\n    return (selection.directives.some(getDirectiveMatcher(directives)) ||\n        (nestedCheck &&\n            hasDirectivesInSelectionSet(directives, selection.selectionSet, nestedCheck)));\n}\nfunction getDirectivesFromDocument(directives, doc) {\n    checkDocument(doc);\n    var parentPath;\n    return nullIfDocIsEmpty(visit(doc, {\n        SelectionSet: {\n            enter: function (node, _key, _parent, path) {\n                var currentPath = path.join('-');\n                if (!parentPath ||\n                    currentPath === parentPath ||\n                    !currentPath.startsWith(parentPath)) {\n                    if (node.selections) {\n                        var selectionsWithDirectives = node.selections.filter(function (selection) { return hasDirectivesInSelection(directives, selection); });\n                        if (hasDirectivesInSelectionSet(directives, node, false)) {\n                            parentPath = currentPath;\n                        }\n                        return __assign({}, node, { selections: selectionsWithDirectives });\n                    }\n                    else {\n                        return null;\n                    }\n                }\n            },\n        },\n    }));\n}\nfunction getArgumentMatcher(config) {\n    return function argumentMatcher(argument) {\n        return config.some(function (aConfig) {\n            return argument.value &&\n                argument.value.kind === 'Variable' &&\n                argument.value.name &&\n                (aConfig.name === argument.value.name.value ||\n                    (aConfig.test && aConfig.test(argument)));\n        });\n    };\n}\nfunction removeArgumentsFromDocument(config, doc) {\n    var argMatcher = getArgumentMatcher(config);\n    return nullIfDocIsEmpty(visit(doc, {\n        OperationDefinition: {\n            enter: function (node) {\n                return __assign({}, node, { variableDefinitions: node.variableDefinitions.filter(function (varDef) {\n                        return !config.some(function (arg) { return arg.name === varDef.variable.name.value; });\n                    }) });\n            },\n        },\n        Field: {\n            enter: function (node) {\n                var shouldRemoveField = config.some(function (argConfig) { return argConfig.remove; });\n                if (shouldRemoveField) {\n                    var argMatchCount_1 = 0;\n                    node.arguments.forEach(function (arg) {\n                        if (argMatcher(arg)) {\n                            argMatchCount_1 += 1;\n                        }\n                    });\n                    if (argMatchCount_1 === 1) {\n                        return null;\n                    }\n                }\n            },\n        },\n        Argument: {\n            enter: function (node) {\n                if (argMatcher(node)) {\n                    return null;\n                }\n            },\n        },\n    }));\n}\nfunction removeFragmentSpreadFromDocument(config, doc) {\n    function enter(node) {\n        if (config.some(function (def) { return def.name === node.name.value; })) {\n            return null;\n        }\n    }\n    return nullIfDocIsEmpty(visit(doc, {\n        FragmentSpread: { enter: enter },\n        FragmentDefinition: { enter: enter },\n    }));\n}\nfunction getAllFragmentSpreadsFromSelectionSet(selectionSet) {\n    var allFragments = [];\n    selectionSet.selections.forEach(function (selection) {\n        if ((isField(selection) || isInlineFragment(selection)) &&\n            selection.selectionSet) {\n            getAllFragmentSpreadsFromSelectionSet(selection.selectionSet).forEach(function (frag) { return allFragments.push(frag); });\n        }\n        else if (selection.kind === 'FragmentSpread') {\n            allFragments.push(selection);\n        }\n    });\n    return allFragments;\n}\nfunction buildQueryFromSelectionSet(document) {\n    var definition = getMainDefinition(document);\n    var definitionOperation = definition.operation;\n    if (definitionOperation === 'query') {\n        return document;\n    }\n    var modifiedDoc = visit(document, {\n        OperationDefinition: {\n            enter: function (node) {\n                return __assign({}, node, { operation: 'query' });\n            },\n        },\n    });\n    return modifiedDoc;\n}\nfunction removeClientSetsFromDocument(document) {\n    checkDocument(document);\n    var modifiedDoc = removeDirectivesFromDocument([\n        {\n            test: function (directive) { return directive.name.value === 'client'; },\n            remove: true,\n        },\n    ], document);\n    if (modifiedDoc) {\n        modifiedDoc = visit(modifiedDoc, {\n            FragmentDefinition: {\n                enter: function (node) {\n                    if (node.selectionSet) {\n                        var isTypenameOnly = node.selectionSet.selections.every(function (selection) {\n                            return isField(selection) && selection.name.value === '__typename';\n                        });\n                        if (isTypenameOnly) {\n                            return null;\n                        }\n                    }\n                },\n            },\n        });\n    }\n    return modifiedDoc;\n}\n\nvar canUseWeakMap = typeof WeakMap === 'function' && !(typeof navigator === 'object' &&\n    navigator.product === 'ReactNative');\n\nvar toString = Object.prototype.toString;\nfunction cloneDeep(value) {\n    return cloneDeepHelper(value, new Map());\n}\nfunction cloneDeepHelper(val, seen) {\n    switch (toString.call(val)) {\n        case \"[object Array]\": {\n            if (seen.has(val))\n                return seen.get(val);\n            var copy_1 = val.slice(0);\n            seen.set(val, copy_1);\n            copy_1.forEach(function (child, i) {\n                copy_1[i] = cloneDeepHelper(child, seen);\n            });\n            return copy_1;\n        }\n        case \"[object Object]\": {\n            if (seen.has(val))\n                return seen.get(val);\n            var copy_2 = Object.create(Object.getPrototypeOf(val));\n            seen.set(val, copy_2);\n            Object.keys(val).forEach(function (key) {\n                copy_2[key] = cloneDeepHelper(val[key], seen);\n            });\n            return copy_2;\n        }\n        default:\n            return val;\n    }\n}\n\nfunction getEnv() {\n    if (typeof process !== 'undefined' && process.env.NODE_ENV) {\n        return process.env.NODE_ENV;\n    }\n    return 'development';\n}\nfunction isEnv(env) {\n    return getEnv() === env;\n}\nfunction isProduction() {\n    return isEnv('production') === true;\n}\nfunction isDevelopment() {\n    return isEnv('development') === true;\n}\nfunction isTest() {\n    return isEnv('test') === true;\n}\n\nfunction tryFunctionOrLogError(f) {\n    try {\n        return f();\n    }\n    catch (e) {\n        if (console.error) {\n            console.error(e);\n        }\n    }\n}\nfunction graphQLResultHasError(result) {\n    return result.errors && result.errors.length;\n}\n\nfunction deepFreeze(o) {\n    Object.freeze(o);\n    Object.getOwnPropertyNames(o).forEach(function (prop) {\n        if (o[prop] !== null &&\n            (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\n            !Object.isFrozen(o[prop])) {\n            deepFreeze(o[prop]);\n        }\n    });\n    return o;\n}\nfunction maybeDeepFreeze(obj) {\n    if (isDevelopment() || isTest()) {\n        var symbolIsPolyfilled = typeof Symbol === 'function' && typeof Symbol('') === 'string';\n        if (!symbolIsPolyfilled) {\n            return deepFreeze(obj);\n        }\n    }\n    return obj;\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction mergeDeep() {\n    var sources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        sources[_i] = arguments[_i];\n    }\n    return mergeDeepArray(sources);\n}\nfunction mergeDeepArray(sources) {\n    var target = sources[0] || {};\n    var count = sources.length;\n    if (count > 1) {\n        var pastCopies = [];\n        target = shallowCopyForMerge(target, pastCopies);\n        for (var i = 1; i < count; ++i) {\n            target = mergeHelper(target, sources[i], pastCopies);\n        }\n    }\n    return target;\n}\nfunction isObject(obj) {\n    return obj !== null && typeof obj === 'object';\n}\nfunction mergeHelper(target, source, pastCopies) {\n    if (isObject(source) && isObject(target)) {\n        if (Object.isExtensible && !Object.isExtensible(target)) {\n            target = shallowCopyForMerge(target, pastCopies);\n        }\n        Object.keys(source).forEach(function (sourceKey) {\n            var sourceValue = source[sourceKey];\n            if (hasOwnProperty.call(target, sourceKey)) {\n                var targetValue = target[sourceKey];\n                if (sourceValue !== targetValue) {\n                    target[sourceKey] = mergeHelper(shallowCopyForMerge(targetValue, pastCopies), sourceValue, pastCopies);\n                }\n            }\n            else {\n                target[sourceKey] = sourceValue;\n            }\n        });\n        return target;\n    }\n    return source;\n}\nfunction shallowCopyForMerge(value, pastCopies) {\n    if (value !== null &&\n        typeof value === 'object' &&\n        pastCopies.indexOf(value) < 0) {\n        if (Array.isArray(value)) {\n            value = value.slice(0);\n        }\n        else {\n            value = __assign({ __proto__: Object.getPrototypeOf(value) }, value);\n        }\n        pastCopies.push(value);\n    }\n    return value;\n}\n\nvar haveWarned = Object.create({});\nfunction warnOnceInDevelopment(msg, type) {\n    if (type === void 0) { type = 'warn'; }\n    if (!isProduction() && !haveWarned[msg]) {\n        if (!isTest()) {\n            haveWarned[msg] = true;\n        }\n        if (type === 'error') {\n            console.error(msg);\n        }\n        else {\n            console.warn(msg);\n        }\n    }\n}\n\nfunction stripSymbols(data) {\n    return JSON.parse(JSON.stringify(data));\n}\n\nexport { addTypenameToDocument, argumentsObjectFromField, assign, buildQueryFromSelectionSet, canUseWeakMap, checkDocument, cloneDeep, createFragmentMap, getDefaultValues, getDirectiveInfoFromField, getDirectiveNames, getDirectivesFromDocument, getEnv, getFragmentDefinition, getFragmentDefinitions, getFragmentQueryDocument, getInclusionDirectives, getMainDefinition, getMutationDefinition, getOperationDefinition, getOperationDefinitionOrDie, getOperationName, getQueryDefinition, getStoreKeyName, graphQLResultHasError, hasClientExports, hasDirectives, isDevelopment, isEnv, isField, isIdValue, isInlineFragment, isJsonValue, isNumberValue, isProduction, isScalarValue, isTest, maybeDeepFreeze, mergeDeep, mergeDeepArray, removeArgumentsFromDocument, removeClientSetsFromDocument, removeConnectionDirectiveFromDocument, removeDirectivesFromDocument, removeFragmentSpreadFromDocument, resultKeyNameFromField, shouldInclude, storeKeyNameFromField, stripSymbols, toIdValue, tryFunctionOrLogError, valueFromNode, valueToObjectRepresentation, variablesInOperation, warnOnceInDevelopment };\n//# sourceMappingURL=bundle.esm.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// === Symbol Support ===\n\nvar hasSymbols = function () {\n  return typeof Symbol === 'function';\n};\nvar hasSymbol = function (name) {\n  return hasSymbols() && Boolean(Symbol[name]);\n};\nvar getSymbol = function (name) {\n  return hasSymbol(name) ? Symbol[name] : '@@' + name;\n};\n\nif (hasSymbols() && !hasSymbol('observable')) {\n  Symbol.observable = Symbol('observable');\n}\n\nvar SymbolIterator = getSymbol('iterator');\nvar SymbolObservable = getSymbol('observable');\nvar SymbolSpecies = getSymbol('species');\n\n// === Abstract Operations ===\n\nfunction getMethod(obj, key) {\n  var value = obj[key];\n\n  if (value == null) return undefined;\n\n  if (typeof value !== 'function') throw new TypeError(value + ' is not a function');\n\n  return value;\n}\n\nfunction getSpecies(obj) {\n  var ctor = obj.constructor;\n  if (ctor !== undefined) {\n    ctor = ctor[SymbolSpecies];\n    if (ctor === null) {\n      ctor = undefined;\n    }\n  }\n  return ctor !== undefined ? ctor : Observable;\n}\n\nfunction isObservable(x) {\n  return x instanceof Observable; // SPEC: Brand check\n}\n\nfunction hostReportError(e) {\n  if (hostReportError.log) {\n    hostReportError.log(e);\n  } else {\n    setTimeout(function () {\n      throw e;\n    });\n  }\n}\n\nfunction enqueue(fn) {\n  Promise.resolve().then(function () {\n    try {\n      fn();\n    } catch (e) {\n      hostReportError(e);\n    }\n  });\n}\n\nfunction cleanupSubscription(subscription) {\n  var cleanup = subscription._cleanup;\n  if (cleanup === undefined) return;\n\n  subscription._cleanup = undefined;\n\n  if (!cleanup) {\n    return;\n  }\n\n  try {\n    if (typeof cleanup === 'function') {\n      cleanup();\n    } else {\n      var unsubscribe = getMethod(cleanup, 'unsubscribe');\n      if (unsubscribe) {\n        unsubscribe.call(cleanup);\n      }\n    }\n  } catch (e) {\n    hostReportError(e);\n  }\n}\n\nfunction closeSubscription(subscription) {\n  subscription._observer = undefined;\n  subscription._queue = undefined;\n  subscription._state = 'closed';\n}\n\nfunction flushSubscription(subscription) {\n  var queue = subscription._queue;\n  if (!queue) {\n    return;\n  }\n  subscription._queue = undefined;\n  subscription._state = 'ready';\n  for (var i = 0; i < queue.length; ++i) {\n    notifySubscription(subscription, queue[i].type, queue[i].value);\n    if (subscription._state === 'closed') break;\n  }\n}\n\nfunction notifySubscription(subscription, type, value) {\n  subscription._state = 'running';\n\n  var observer = subscription._observer;\n\n  try {\n    var m = getMethod(observer, type);\n    switch (type) {\n      case 'next':\n        if (m) m.call(observer, value);\n        break;\n      case 'error':\n        closeSubscription(subscription);\n        if (m) m.call(observer, value);else throw value;\n        break;\n      case 'complete':\n        closeSubscription(subscription);\n        if (m) m.call(observer);\n        break;\n    }\n  } catch (e) {\n    hostReportError(e);\n  }\n\n  if (subscription._state === 'closed') cleanupSubscription(subscription);else if (subscription._state === 'running') subscription._state = 'ready';\n}\n\nfunction onNotify(subscription, type, value) {\n  if (subscription._state === 'closed') return;\n\n  if (subscription._state === 'buffering') {\n    subscription._queue.push({ type: type, value: value });\n    return;\n  }\n\n  if (subscription._state !== 'ready') {\n    subscription._state = 'buffering';\n    subscription._queue = [{ type: type, value: value }];\n    enqueue(function () {\n      return flushSubscription(subscription);\n    });\n    return;\n  }\n\n  notifySubscription(subscription, type, value);\n}\n\nvar Subscription = function () {\n  function Subscription(observer, subscriber) {\n    _classCallCheck(this, Subscription);\n\n    // ASSERT: observer is an object\n    // ASSERT: subscriber is callable\n\n    this._cleanup = undefined;\n    this._observer = observer;\n    this._queue = undefined;\n    this._state = 'initializing';\n\n    var subscriptionObserver = new SubscriptionObserver(this);\n\n    try {\n      this._cleanup = subscriber.call(undefined, subscriptionObserver);\n    } catch (e) {\n      subscriptionObserver.error(e);\n    }\n\n    if (this._state === 'initializing') this._state = 'ready';\n  }\n\n  _createClass(Subscription, [{\n    key: 'unsubscribe',\n    value: function unsubscribe() {\n      if (this._state !== 'closed') {\n        closeSubscription(this);\n        cleanupSubscription(this);\n      }\n    }\n  }, {\n    key: 'closed',\n    get: function () {\n      return this._state === 'closed';\n    }\n  }]);\n\n  return Subscription;\n}();\n\nvar SubscriptionObserver = function () {\n  function SubscriptionObserver(subscription) {\n    _classCallCheck(this, SubscriptionObserver);\n\n    this._subscription = subscription;\n  }\n\n  _createClass(SubscriptionObserver, [{\n    key: 'next',\n    value: function next(value) {\n      onNotify(this._subscription, 'next', value);\n    }\n  }, {\n    key: 'error',\n    value: function error(value) {\n      onNotify(this._subscription, 'error', value);\n    }\n  }, {\n    key: 'complete',\n    value: function complete() {\n      onNotify(this._subscription, 'complete');\n    }\n  }, {\n    key: 'closed',\n    get: function () {\n      return this._subscription._state === 'closed';\n    }\n  }]);\n\n  return SubscriptionObserver;\n}();\n\nvar Observable = exports.Observable = function () {\n  function Observable(subscriber) {\n    _classCallCheck(this, Observable);\n\n    if (!(this instanceof Observable)) throw new TypeError('Observable cannot be called as a function');\n\n    if (typeof subscriber !== 'function') throw new TypeError('Observable initializer must be a function');\n\n    this._subscriber = subscriber;\n  }\n\n  _createClass(Observable, [{\n    key: 'subscribe',\n    value: function subscribe(observer) {\n      if (typeof observer !== 'object' || observer === null) {\n        observer = {\n          next: observer,\n          error: arguments[1],\n          complete: arguments[2]\n        };\n      }\n      return new Subscription(observer, this._subscriber);\n    }\n  }, {\n    key: 'forEach',\n    value: function forEach(fn) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        if (typeof fn !== 'function') {\n          reject(new TypeError(fn + ' is not a function'));\n          return;\n        }\n\n        function done() {\n          subscription.unsubscribe();\n          resolve();\n        }\n\n        var subscription = _this.subscribe({\n          next: function (value) {\n            try {\n              fn(value, done);\n            } catch (e) {\n              reject(e);\n              subscription.unsubscribe();\n            }\n          },\n\n          error: reject,\n          complete: resolve\n        });\n      });\n    }\n  }, {\n    key: 'map',\n    value: function map(fn) {\n      var _this2 = this;\n\n      if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n\n      var C = getSpecies(this);\n\n      return new C(function (observer) {\n        return _this2.subscribe({\n          next: function (value) {\n            try {\n              value = fn(value);\n            } catch (e) {\n              return observer.error(e);\n            }\n            observer.next(value);\n          },\n          error: function (e) {\n            observer.error(e);\n          },\n          complete: function () {\n            observer.complete();\n          }\n        });\n      });\n    }\n  }, {\n    key: 'filter',\n    value: function filter(fn) {\n      var _this3 = this;\n\n      if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n\n      var C = getSpecies(this);\n\n      return new C(function (observer) {\n        return _this3.subscribe({\n          next: function (value) {\n            try {\n              if (!fn(value)) return;\n            } catch (e) {\n              return observer.error(e);\n            }\n            observer.next(value);\n          },\n          error: function (e) {\n            observer.error(e);\n          },\n          complete: function () {\n            observer.complete();\n          }\n        });\n      });\n    }\n  }, {\n    key: 'reduce',\n    value: function reduce(fn) {\n      var _this4 = this;\n\n      if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n\n      var C = getSpecies(this);\n      var hasSeed = arguments.length > 1;\n      var hasValue = false;\n      var seed = arguments[1];\n      var acc = seed;\n\n      return new C(function (observer) {\n        return _this4.subscribe({\n          next: function (value) {\n            var first = !hasValue;\n            hasValue = true;\n\n            if (!first || hasSeed) {\n              try {\n                acc = fn(acc, value);\n              } catch (e) {\n                return observer.error(e);\n              }\n            } else {\n              acc = value;\n            }\n          },\n          error: function (e) {\n            observer.error(e);\n          },\n          complete: function () {\n            if (!hasValue && !hasSeed) return observer.error(new TypeError('Cannot reduce an empty sequence'));\n\n            observer.next(acc);\n            observer.complete();\n          }\n        });\n      });\n    }\n  }, {\n    key: 'concat',\n    value: function concat() {\n      var _this5 = this;\n\n      for (var _len = arguments.length, sources = Array(_len), _key = 0; _key < _len; _key++) {\n        sources[_key] = arguments[_key];\n      }\n\n      var C = getSpecies(this);\n\n      return new C(function (observer) {\n        var subscription = void 0;\n        var index = 0;\n\n        function startNext(next) {\n          subscription = next.subscribe({\n            next: function (v) {\n              observer.next(v);\n            },\n            error: function (e) {\n              observer.error(e);\n            },\n            complete: function () {\n              if (index === sources.length) {\n                subscription = undefined;\n                observer.complete();\n              } else {\n                startNext(C.from(sources[index++]));\n              }\n            }\n          });\n        }\n\n        startNext(_this5);\n\n        return function () {\n          if (subscription) {\n            subscription.unsubscribe();\n            subscription = undefined;\n          }\n        };\n      });\n    }\n  }, {\n    key: 'flatMap',\n    value: function flatMap(fn) {\n      var _this6 = this;\n\n      if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n\n      var C = getSpecies(this);\n\n      return new C(function (observer) {\n        var subscriptions = [];\n\n        var outer = _this6.subscribe({\n          next: function (value) {\n            if (fn) {\n              try {\n                value = fn(value);\n              } catch (e) {\n                return observer.error(e);\n              }\n            }\n\n            var inner = C.from(value).subscribe({\n              next: function (value) {\n                observer.next(value);\n              },\n              error: function (e) {\n                observer.error(e);\n              },\n              complete: function () {\n                var i = subscriptions.indexOf(inner);\n                if (i >= 0) subscriptions.splice(i, 1);\n                completeIfDone();\n              }\n            });\n\n            subscriptions.push(inner);\n          },\n          error: function (e) {\n            observer.error(e);\n          },\n          complete: function () {\n            completeIfDone();\n          }\n        });\n\n        function completeIfDone() {\n          if (outer.closed && subscriptions.length === 0) observer.complete();\n        }\n\n        return function () {\n          subscriptions.forEach(function (s) {\n            return s.unsubscribe();\n          });\n          outer.unsubscribe();\n        };\n      });\n    }\n  }, {\n    key: SymbolObservable,\n    value: function () {\n      return this;\n    }\n  }], [{\n    key: 'from',\n    value: function from(x) {\n      var C = typeof this === 'function' ? this : Observable;\n\n      if (x == null) throw new TypeError(x + ' is not an object');\n\n      var method = getMethod(x, SymbolObservable);\n      if (method) {\n        var observable = method.call(x);\n\n        if (Object(observable) !== observable) throw new TypeError(observable + ' is not an object');\n\n        if (isObservable(observable) && observable.constructor === C) return observable;\n\n        return new C(function (observer) {\n          return observable.subscribe(observer);\n        });\n      }\n\n      if (hasSymbol('iterator')) {\n        method = getMethod(x, SymbolIterator);\n        if (method) {\n          return new C(function (observer) {\n            enqueue(function () {\n              if (observer.closed) return;\n              var _iteratorNormalCompletion = true;\n              var _didIteratorError = false;\n              var _iteratorError = undefined;\n\n              try {\n                for (var _iterator = method.call(x)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                  var item = _step.value;\n\n                  observer.next(item);\n                  if (observer.closed) return;\n                }\n              } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                  }\n                } finally {\n                  if (_didIteratorError) {\n                    throw _iteratorError;\n                  }\n                }\n              }\n\n              observer.complete();\n            });\n          });\n        }\n      }\n\n      if (Array.isArray(x)) {\n        return new C(function (observer) {\n          enqueue(function () {\n            if (observer.closed) return;\n            for (var i = 0; i < x.length; ++i) {\n              observer.next(x[i]);\n              if (observer.closed) return;\n            }\n            observer.complete();\n          });\n        });\n      }\n\n      throw new TypeError(x + ' is not observable');\n    }\n  }, {\n    key: 'of',\n    value: function of() {\n      for (var _len2 = arguments.length, items = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        items[_key2] = arguments[_key2];\n      }\n\n      var C = typeof this === 'function' ? this : Observable;\n\n      return new C(function (observer) {\n        enqueue(function () {\n          if (observer.closed) return;\n          for (var i = 0; i < items.length; ++i) {\n            observer.next(items[i]);\n            if (observer.closed) return;\n          }\n          observer.complete();\n        });\n      });\n    }\n  }, {\n    key: SymbolSpecies,\n    get: function () {\n      return this;\n    }\n  }]);\n\n  return Observable;\n}();\n\nif (hasSymbols()) {\n  Object.defineProperty(Observable, Symbol('extensions'), {\n    value: {\n      symbol: SymbolObservable,\n      hostReportError: hostReportError\n    },\n    configurable: true\n  });\n}","module.exports = require('./lib/Observable.js').Observable;\n","import zenObservable from 'zen-observable';\n\nvar Observable = zenObservable;\n\nexport default Observable;\nexport { Observable };\n//# sourceMappingURL=bundle.esm.js.map\n","import Observable from 'zen-observable-ts';\nexport { default as Observable } from 'zen-observable-ts';\nimport { invariant, InvariantError } from 'ts-invariant';\nimport { __extends, __assign } from 'tslib';\nimport { getOperationName } from 'apollo-utilities';\nexport { getOperationName } from 'apollo-utilities';\n\nfunction validateOperation(operation) {\n    var OPERATION_FIELDS = [\n        'query',\n        'operationName',\n        'variables',\n        'extensions',\n        'context',\n    ];\n    for (var _i = 0, _a = Object.keys(operation); _i < _a.length; _i++) {\n        var key = _a[_i];\n        if (OPERATION_FIELDS.indexOf(key) < 0) {\n            throw process.env.NODE_ENV === \"production\" ? new InvariantError(2) : new InvariantError(\"illegal argument: \" + key);\n        }\n    }\n    return operation;\n}\nvar LinkError = (function (_super) {\n    __extends(LinkError, _super);\n    function LinkError(message, link) {\n        var _this = _super.call(this, message) || this;\n        _this.link = link;\n        return _this;\n    }\n    return LinkError;\n}(Error));\nfunction isTerminating(link) {\n    return link.request.length <= 1;\n}\nfunction toPromise(observable) {\n    var completed = false;\n    return new Promise(function (resolve, reject) {\n        observable.subscribe({\n            next: function (data) {\n                if (completed) {\n                    process.env.NODE_ENV === \"production\" || invariant.warn(\"Promise Wrapper does not support multiple results from Observable\");\n                }\n                else {\n                    completed = true;\n                    resolve(data);\n                }\n            },\n            error: reject,\n        });\n    });\n}\nvar makePromise = toPromise;\nfunction fromPromise(promise) {\n    return new Observable(function (observer) {\n        promise\n            .then(function (value) {\n            observer.next(value);\n            observer.complete();\n        })\n            .catch(observer.error.bind(observer));\n    });\n}\nfunction fromError(errorValue) {\n    return new Observable(function (observer) {\n        observer.error(errorValue);\n    });\n}\nfunction transformOperation(operation) {\n    var transformedOperation = {\n        variables: operation.variables || {},\n        extensions: operation.extensions || {},\n        operationName: operation.operationName,\n        query: operation.query,\n    };\n    if (!transformedOperation.operationName) {\n        transformedOperation.operationName =\n            typeof transformedOperation.query !== 'string'\n                ? getOperationName(transformedOperation.query)\n                : '';\n    }\n    return transformedOperation;\n}\nfunction createOperation(starting, operation) {\n    var context = __assign({}, starting);\n    var setContext = function (next) {\n        if (typeof next === 'function') {\n            context = __assign({}, context, next(context));\n        }\n        else {\n            context = __assign({}, context, next);\n        }\n    };\n    var getContext = function () { return (__assign({}, context)); };\n    Object.defineProperty(operation, 'setContext', {\n        enumerable: false,\n        value: setContext,\n    });\n    Object.defineProperty(operation, 'getContext', {\n        enumerable: false,\n        value: getContext,\n    });\n    Object.defineProperty(operation, 'toKey', {\n        enumerable: false,\n        value: function () { return getKey(operation); },\n    });\n    return operation;\n}\nfunction getKey(operation) {\n    var query = operation.query, variables = operation.variables, operationName = operation.operationName;\n    return JSON.stringify([operationName, query, variables]);\n}\n\nfunction passthrough(op, forward) {\n    return forward ? forward(op) : Observable.of();\n}\nfunction toLink(handler) {\n    return typeof handler === 'function' ? new ApolloLink(handler) : handler;\n}\nfunction empty() {\n    return new ApolloLink(function () { return Observable.of(); });\n}\nfunction from(links) {\n    if (links.length === 0)\n        return empty();\n    return links.map(toLink).reduce(function (x, y) { return x.concat(y); });\n}\nfunction split(test, left, right) {\n    var leftLink = toLink(left);\n    var rightLink = toLink(right || new ApolloLink(passthrough));\n    if (isTerminating(leftLink) && isTerminating(rightLink)) {\n        return new ApolloLink(function (operation) {\n            return test(operation)\n                ? leftLink.request(operation) || Observable.of()\n                : rightLink.request(operation) || Observable.of();\n        });\n    }\n    else {\n        return new ApolloLink(function (operation, forward) {\n            return test(operation)\n                ? leftLink.request(operation, forward) || Observable.of()\n                : rightLink.request(operation, forward) || Observable.of();\n        });\n    }\n}\nvar concat = function (first, second) {\n    var firstLink = toLink(first);\n    if (isTerminating(firstLink)) {\n        process.env.NODE_ENV === \"production\" || invariant.warn(new LinkError(\"You are calling concat on a terminating link, which will have no effect\", firstLink));\n        return firstLink;\n    }\n    var nextLink = toLink(second);\n    if (isTerminating(nextLink)) {\n        return new ApolloLink(function (operation) {\n            return firstLink.request(operation, function (op) { return nextLink.request(op) || Observable.of(); }) || Observable.of();\n        });\n    }\n    else {\n        return new ApolloLink(function (operation, forward) {\n            return (firstLink.request(operation, function (op) {\n                return nextLink.request(op, forward) || Observable.of();\n            }) || Observable.of());\n        });\n    }\n};\nvar ApolloLink = (function () {\n    function ApolloLink(request) {\n        if (request)\n            this.request = request;\n    }\n    ApolloLink.prototype.split = function (test, left, right) {\n        return this.concat(split(test, left, right || new ApolloLink(passthrough)));\n    };\n    ApolloLink.prototype.concat = function (next) {\n        return concat(this, next);\n    };\n    ApolloLink.prototype.request = function (operation, forward) {\n        throw process.env.NODE_ENV === \"production\" ? new InvariantError(1) : new InvariantError('request is not implemented');\n    };\n    ApolloLink.empty = empty;\n    ApolloLink.from = from;\n    ApolloLink.split = split;\n    ApolloLink.execute = execute;\n    return ApolloLink;\n}());\nfunction execute(link, operation) {\n    return (link.request(createOperation(operation.context, transformOperation(validateOperation(operation)))) || Observable.of());\n}\n\nexport { ApolloLink, concat, createOperation, empty, execute, from, fromError, fromPromise, makePromise, split, toPromise };\n//# sourceMappingURL=bundle.esm.js.map\n","export default function symbolObservablePonyfill(root) {\n\tvar result;\n\tvar Symbol = root.Symbol;\n\n\tif (typeof Symbol === 'function') {\n\t\tif (Symbol.observable) {\n\t\t\tresult = Symbol.observable;\n\t\t} else {\n\t\t\tresult = Symbol('observable');\n\t\t\tSymbol.observable = result;\n\t\t}\n\t} else {\n\t\tresult = '@@observable';\n\t}\n\n\treturn result;\n};\n","/* global window */\nimport ponyfill from './ponyfill.js';\n\nvar root;\n\nif (typeof self !== 'undefined') {\n  root = self;\n} else if (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n} else if (typeof module !== 'undefined') {\n  root = module;\n} else {\n  root = Function('return this')();\n}\n\nvar result = ponyfill(root);\nexport default result;\n","import { __extends, __assign, __awaiter, __generator } from 'tslib';\nimport { getOperationDefinition, isEqual, tryFunctionOrLogError, cloneDeep, mergeDeep, hasDirectives, removeClientSetsFromDocument, buildQueryFromSelectionSet, getMainDefinition, getFragmentDefinitions, createFragmentMap, mergeDeepArray, resultKeyNameFromField, argumentsObjectFromField, shouldInclude, isField, isInlineFragment, canUseWeakMap, graphQLResultHasError, removeConnectionDirectiveFromDocument, hasClientExports, getDefaultValues, getOperationName } from 'apollo-utilities';\nimport { Observable as Observable$1, execute, ApolloLink } from 'apollo-link';\nimport $$observable from 'symbol-observable';\nimport { InvariantError, invariant } from 'ts-invariant';\nimport { visit, BREAK } from 'graphql/language/visitor';\n\nvar NetworkStatus;\n(function (NetworkStatus) {\n    NetworkStatus[NetworkStatus[\"loading\"] = 1] = \"loading\";\n    NetworkStatus[NetworkStatus[\"setVariables\"] = 2] = \"setVariables\";\n    NetworkStatus[NetworkStatus[\"fetchMore\"] = 3] = \"fetchMore\";\n    NetworkStatus[NetworkStatus[\"refetch\"] = 4] = \"refetch\";\n    NetworkStatus[NetworkStatus[\"poll\"] = 6] = \"poll\";\n    NetworkStatus[NetworkStatus[\"ready\"] = 7] = \"ready\";\n    NetworkStatus[NetworkStatus[\"error\"] = 8] = \"error\";\n})(NetworkStatus || (NetworkStatus = {}));\nfunction isNetworkRequestInFlight(networkStatus) {\n    return networkStatus < 7;\n}\n\nvar Observable = (function (_super) {\n    __extends(Observable, _super);\n    function Observable() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Observable.prototype[$$observable] = function () {\n        return this;\n    };\n    Observable.prototype['@@observable'] = function () {\n        return this;\n    };\n    return Observable;\n}(Observable$1));\n\nfunction isNonEmptyArray(value) {\n    return Array.isArray(value) && value.length > 0;\n}\n\nfunction isApolloError(err) {\n    return err.hasOwnProperty('graphQLErrors');\n}\nvar generateErrorMessage = function (err) {\n    var message = '';\n    if (isNonEmptyArray(err.graphQLErrors)) {\n        err.graphQLErrors.forEach(function (graphQLError) {\n            var errorMessage = graphQLError\n                ? graphQLError.message\n                : 'Error message not found.';\n            message += \"GraphQL error: \" + errorMessage + \"\\n\";\n        });\n    }\n    if (err.networkError) {\n        message += 'Network error: ' + err.networkError.message + '\\n';\n    }\n    message = message.replace(/\\n$/, '');\n    return message;\n};\nvar ApolloError = (function (_super) {\n    __extends(ApolloError, _super);\n    function ApolloError(_a) {\n        var graphQLErrors = _a.graphQLErrors, networkError = _a.networkError, errorMessage = _a.errorMessage, extraInfo = _a.extraInfo;\n        var _this = _super.call(this, errorMessage) || this;\n        _this.graphQLErrors = graphQLErrors || [];\n        _this.networkError = networkError || null;\n        if (!errorMessage) {\n            _this.message = generateErrorMessage(_this);\n        }\n        else {\n            _this.message = errorMessage;\n        }\n        _this.extraInfo = extraInfo;\n        _this.__proto__ = ApolloError.prototype;\n        return _this;\n    }\n    return ApolloError;\n}(Error));\n\nvar FetchType;\n(function (FetchType) {\n    FetchType[FetchType[\"normal\"] = 1] = \"normal\";\n    FetchType[FetchType[\"refetch\"] = 2] = \"refetch\";\n    FetchType[FetchType[\"poll\"] = 3] = \"poll\";\n})(FetchType || (FetchType = {}));\n\nvar hasError = function (storeValue, policy) {\n    if (policy === void 0) { policy = 'none'; }\n    return storeValue && (storeValue.networkError ||\n        (policy === 'none' && isNonEmptyArray(storeValue.graphQLErrors)));\n};\nvar ObservableQuery = (function (_super) {\n    __extends(ObservableQuery, _super);\n    function ObservableQuery(_a) {\n        var queryManager = _a.queryManager, options = _a.options, _b = _a.shouldSubscribe, shouldSubscribe = _b === void 0 ? true : _b;\n        var _this = _super.call(this, function (observer) {\n            return _this.onSubscribe(observer);\n        }) || this;\n        _this.observers = new Set();\n        _this.subscriptions = new Set();\n        _this.isTornDown = false;\n        _this.options = options;\n        _this.variables = options.variables || {};\n        _this.queryId = queryManager.generateQueryId();\n        _this.shouldSubscribe = shouldSubscribe;\n        var opDef = getOperationDefinition(options.query);\n        _this.queryName = opDef && opDef.name && opDef.name.value;\n        _this.queryManager = queryManager;\n        return _this;\n    }\n    ObservableQuery.prototype.result = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var observer = {\n                next: function (result) {\n                    resolve(result);\n                    _this.observers.delete(observer);\n                    if (!_this.observers.size) {\n                        _this.queryManager.removeQuery(_this.queryId);\n                    }\n                    setTimeout(function () {\n                        subscription.unsubscribe();\n                    }, 0);\n                },\n                error: reject,\n            };\n            var subscription = _this.subscribe(observer);\n        });\n    };\n    ObservableQuery.prototype.currentResult = function () {\n        var result = this.getCurrentResult();\n        if (result.data === undefined) {\n            result.data = {};\n        }\n        return result;\n    };\n    ObservableQuery.prototype.getCurrentResult = function () {\n        if (this.isTornDown) {\n            var lastResult = this.lastResult;\n            return {\n                data: !this.lastError && lastResult && lastResult.data || void 0,\n                error: this.lastError,\n                loading: false,\n                networkStatus: NetworkStatus.error,\n            };\n        }\n        var _a = this.queryManager.getCurrentQueryResult(this), data = _a.data, partial = _a.partial;\n        var queryStoreValue = this.queryManager.queryStore.get(this.queryId);\n        var result;\n        var fetchPolicy = this.options.fetchPolicy;\n        var isNetworkFetchPolicy = fetchPolicy === 'network-only' ||\n            fetchPolicy === 'no-cache';\n        if (queryStoreValue) {\n            var networkStatus = queryStoreValue.networkStatus;\n            if (hasError(queryStoreValue, this.options.errorPolicy)) {\n                return {\n                    data: void 0,\n                    loading: false,\n                    networkStatus: networkStatus,\n                    error: new ApolloError({\n                        graphQLErrors: queryStoreValue.graphQLErrors,\n                        networkError: queryStoreValue.networkError,\n                    }),\n                };\n            }\n            if (queryStoreValue.variables) {\n                this.options.variables = __assign({}, this.options.variables, queryStoreValue.variables);\n                this.variables = this.options.variables;\n            }\n            result = {\n                data: data,\n                loading: isNetworkRequestInFlight(networkStatus),\n                networkStatus: networkStatus,\n            };\n            if (queryStoreValue.graphQLErrors && this.options.errorPolicy === 'all') {\n                result.errors = queryStoreValue.graphQLErrors;\n            }\n        }\n        else {\n            var loading = isNetworkFetchPolicy ||\n                (partial && fetchPolicy !== 'cache-only');\n            result = {\n                data: data,\n                loading: loading,\n                networkStatus: loading ? NetworkStatus.loading : NetworkStatus.ready,\n            };\n        }\n        if (!partial) {\n            this.updateLastResult(__assign({}, result, { stale: false }));\n        }\n        return __assign({}, result, { partial: partial });\n    };\n    ObservableQuery.prototype.isDifferentFromLastResult = function (newResult) {\n        var snapshot = this.lastResultSnapshot;\n        return !(snapshot &&\n            newResult &&\n            snapshot.networkStatus === newResult.networkStatus &&\n            snapshot.stale === newResult.stale &&\n            isEqual(snapshot.data, newResult.data));\n    };\n    ObservableQuery.prototype.getLastResult = function () {\n        return this.lastResult;\n    };\n    ObservableQuery.prototype.getLastError = function () {\n        return this.lastError;\n    };\n    ObservableQuery.prototype.resetLastResults = function () {\n        delete this.lastResult;\n        delete this.lastResultSnapshot;\n        delete this.lastError;\n        this.isTornDown = false;\n    };\n    ObservableQuery.prototype.resetQueryStoreErrors = function () {\n        var queryStore = this.queryManager.queryStore.get(this.queryId);\n        if (queryStore) {\n            queryStore.networkError = null;\n            queryStore.graphQLErrors = [];\n        }\n    };\n    ObservableQuery.prototype.refetch = function (variables) {\n        var fetchPolicy = this.options.fetchPolicy;\n        if (fetchPolicy === 'cache-only') {\n            return Promise.reject(process.env.NODE_ENV === \"production\" ? new InvariantError(3) : new InvariantError('cache-only fetchPolicy option should not be used together with query refetch.'));\n        }\n        if (fetchPolicy !== 'no-cache' &&\n            fetchPolicy !== 'cache-and-network') {\n            fetchPolicy = 'network-only';\n        }\n        if (!isEqual(this.variables, variables)) {\n            this.variables = __assign({}, this.variables, variables);\n        }\n        if (!isEqual(this.options.variables, this.variables)) {\n            this.options.variables = __assign({}, this.options.variables, this.variables);\n        }\n        return this.queryManager.fetchQuery(this.queryId, __assign({}, this.options, { fetchPolicy: fetchPolicy }), FetchType.refetch);\n    };\n    ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n        var _this = this;\n        process.env.NODE_ENV === \"production\" ? invariant(fetchMoreOptions.updateQuery, 4) : invariant(fetchMoreOptions.updateQuery, 'updateQuery option is required. This function defines how to update the query data with the new results.');\n        var combinedOptions = __assign({}, (fetchMoreOptions.query ? fetchMoreOptions : __assign({}, this.options, fetchMoreOptions, { variables: __assign({}, this.variables, fetchMoreOptions.variables) })), { fetchPolicy: 'network-only' });\n        var qid = this.queryManager.generateQueryId();\n        return this.queryManager\n            .fetchQuery(qid, combinedOptions, FetchType.normal, this.queryId)\n            .then(function (fetchMoreResult) {\n            _this.updateQuery(function (previousResult) {\n                return fetchMoreOptions.updateQuery(previousResult, {\n                    fetchMoreResult: fetchMoreResult.data,\n                    variables: combinedOptions.variables,\n                });\n            });\n            _this.queryManager.stopQuery(qid);\n            return fetchMoreResult;\n        }, function (error) {\n            _this.queryManager.stopQuery(qid);\n            throw error;\n        });\n    };\n    ObservableQuery.prototype.subscribeToMore = function (options) {\n        var _this = this;\n        var subscription = this.queryManager\n            .startGraphQLSubscription({\n            query: options.document,\n            variables: options.variables,\n        })\n            .subscribe({\n            next: function (subscriptionData) {\n                var updateQuery = options.updateQuery;\n                if (updateQuery) {\n                    _this.updateQuery(function (previous, _a) {\n                        var variables = _a.variables;\n                        return updateQuery(previous, {\n                            subscriptionData: subscriptionData,\n                            variables: variables,\n                        });\n                    });\n                }\n            },\n            error: function (err) {\n                if (options.onError) {\n                    options.onError(err);\n                    return;\n                }\n                process.env.NODE_ENV === \"production\" || invariant.error('Unhandled GraphQL subscription error', err);\n            },\n        });\n        this.subscriptions.add(subscription);\n        return function () {\n            if (_this.subscriptions.delete(subscription)) {\n                subscription.unsubscribe();\n            }\n        };\n    };\n    ObservableQuery.prototype.setOptions = function (opts) {\n        var oldFetchPolicy = this.options.fetchPolicy;\n        this.options = __assign({}, this.options, opts);\n        if (opts.pollInterval) {\n            this.startPolling(opts.pollInterval);\n        }\n        else if (opts.pollInterval === 0) {\n            this.stopPolling();\n        }\n        var fetchPolicy = opts.fetchPolicy;\n        return this.setVariables(this.options.variables, oldFetchPolicy !== fetchPolicy && (oldFetchPolicy === 'cache-only' ||\n            oldFetchPolicy === 'standby' ||\n            fetchPolicy === 'network-only'), opts.fetchResults);\n    };\n    ObservableQuery.prototype.setVariables = function (variables, tryFetch, fetchResults) {\n        if (tryFetch === void 0) { tryFetch = false; }\n        if (fetchResults === void 0) { fetchResults = true; }\n        this.isTornDown = false;\n        variables = variables || this.variables;\n        if (!tryFetch && isEqual(variables, this.variables)) {\n            return this.observers.size && fetchResults\n                ? this.result()\n                : Promise.resolve();\n        }\n        this.variables = this.options.variables = variables;\n        if (!this.observers.size) {\n            return Promise.resolve();\n        }\n        return this.queryManager.fetchQuery(this.queryId, this.options);\n    };\n    ObservableQuery.prototype.updateQuery = function (mapFn) {\n        var queryManager = this.queryManager;\n        var _a = queryManager.getQueryWithPreviousResult(this.queryId), previousResult = _a.previousResult, variables = _a.variables, document = _a.document;\n        var newResult = tryFunctionOrLogError(function () {\n            return mapFn(previousResult, { variables: variables });\n        });\n        if (newResult) {\n            queryManager.dataStore.markUpdateQueryResult(document, variables, newResult);\n            queryManager.broadcastQueries();\n        }\n    };\n    ObservableQuery.prototype.stopPolling = function () {\n        this.queryManager.stopPollingQuery(this.queryId);\n        this.options.pollInterval = undefined;\n    };\n    ObservableQuery.prototype.startPolling = function (pollInterval) {\n        assertNotCacheFirstOrOnly(this);\n        this.options.pollInterval = pollInterval;\n        this.queryManager.startPollingQuery(this.options, this.queryId);\n    };\n    ObservableQuery.prototype.updateLastResult = function (newResult) {\n        var previousResult = this.lastResult;\n        this.lastResult = newResult;\n        this.lastResultSnapshot = this.queryManager.assumeImmutableResults\n            ? newResult\n            : cloneDeep(newResult);\n        return previousResult;\n    };\n    ObservableQuery.prototype.onSubscribe = function (observer) {\n        var _this = this;\n        try {\n            var subObserver = observer._subscription._observer;\n            if (subObserver && !subObserver.error) {\n                subObserver.error = defaultSubscriptionObserverErrorCallback;\n            }\n        }\n        catch (_a) { }\n        var first = !this.observers.size;\n        this.observers.add(observer);\n        if (observer.next && this.lastResult)\n            observer.next(this.lastResult);\n        if (observer.error && this.lastError)\n            observer.error(this.lastError);\n        if (first) {\n            this.setUpQuery();\n        }\n        return function () {\n            if (_this.observers.delete(observer) && !_this.observers.size) {\n                _this.tearDownQuery();\n            }\n        };\n    };\n    ObservableQuery.prototype.setUpQuery = function () {\n        var _this = this;\n        var _a = this, queryManager = _a.queryManager, queryId = _a.queryId;\n        if (this.shouldSubscribe) {\n            queryManager.addObservableQuery(queryId, this);\n        }\n        if (this.options.pollInterval) {\n            assertNotCacheFirstOrOnly(this);\n            queryManager.startPollingQuery(this.options, queryId);\n        }\n        var onError = function (error) {\n            _this.updateLastResult(__assign({}, _this.lastResult, { errors: error.graphQLErrors, networkStatus: NetworkStatus.error, loading: false }));\n            iterateObserversSafely(_this.observers, 'error', _this.lastError = error);\n        };\n        queryManager.observeQuery(queryId, this.options, {\n            next: function (result) {\n                if (_this.lastError || _this.isDifferentFromLastResult(result)) {\n                    var previousResult_1 = _this.updateLastResult(result);\n                    var _a = _this.options, query_1 = _a.query, variables = _a.variables, fetchPolicy_1 = _a.fetchPolicy;\n                    if (queryManager.transform(query_1).hasClientExports) {\n                        queryManager.getLocalState().addExportedVariables(query_1, variables).then(function (variables) {\n                            var previousVariables = _this.variables;\n                            _this.variables = _this.options.variables = variables;\n                            if (!result.loading &&\n                                previousResult_1 &&\n                                fetchPolicy_1 !== 'cache-only' &&\n                                queryManager.transform(query_1).serverQuery &&\n                                !isEqual(previousVariables, variables)) {\n                                _this.refetch();\n                            }\n                            else {\n                                iterateObserversSafely(_this.observers, 'next', result);\n                            }\n                        });\n                    }\n                    else {\n                        iterateObserversSafely(_this.observers, 'next', result);\n                    }\n                }\n            },\n            error: onError,\n        }).catch(onError);\n    };\n    ObservableQuery.prototype.tearDownQuery = function () {\n        var queryManager = this.queryManager;\n        this.isTornDown = true;\n        queryManager.stopPollingQuery(this.queryId);\n        this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });\n        this.subscriptions.clear();\n        queryManager.removeObservableQuery(this.queryId);\n        queryManager.stopQuery(this.queryId);\n        this.observers.clear();\n    };\n    return ObservableQuery;\n}(Observable));\nfunction defaultSubscriptionObserverErrorCallback(error) {\n    process.env.NODE_ENV === \"production\" || invariant.error('Unhandled error', error.message, error.stack);\n}\nfunction iterateObserversSafely(observers, method, argument) {\n    var observersWithMethod = [];\n    observers.forEach(function (obs) { return obs[method] && observersWithMethod.push(obs); });\n    observersWithMethod.forEach(function (obs) { return obs[method](argument); });\n}\nfunction assertNotCacheFirstOrOnly(obsQuery) {\n    var fetchPolicy = obsQuery.options.fetchPolicy;\n    process.env.NODE_ENV === \"production\" ? invariant(fetchPolicy !== 'cache-first' && fetchPolicy !== 'cache-only', 5) : invariant(fetchPolicy !== 'cache-first' && fetchPolicy !== 'cache-only', 'Queries that specify the cache-first and cache-only fetchPolicies cannot also be polling queries.');\n}\n\nvar MutationStore = (function () {\n    function MutationStore() {\n        this.store = {};\n    }\n    MutationStore.prototype.getStore = function () {\n        return this.store;\n    };\n    MutationStore.prototype.get = function (mutationId) {\n        return this.store[mutationId];\n    };\n    MutationStore.prototype.initMutation = function (mutationId, mutation, variables) {\n        this.store[mutationId] = {\n            mutation: mutation,\n            variables: variables || {},\n            loading: true,\n            error: null,\n        };\n    };\n    MutationStore.prototype.markMutationError = function (mutationId, error) {\n        var mutation = this.store[mutationId];\n        if (mutation) {\n            mutation.loading = false;\n            mutation.error = error;\n        }\n    };\n    MutationStore.prototype.markMutationResult = function (mutationId) {\n        var mutation = this.store[mutationId];\n        if (mutation) {\n            mutation.loading = false;\n            mutation.error = null;\n        }\n    };\n    MutationStore.prototype.reset = function () {\n        this.store = {};\n    };\n    return MutationStore;\n}());\n\nvar QueryStore = (function () {\n    function QueryStore() {\n        this.store = {};\n    }\n    QueryStore.prototype.getStore = function () {\n        return this.store;\n    };\n    QueryStore.prototype.get = function (queryId) {\n        return this.store[queryId];\n    };\n    QueryStore.prototype.initQuery = function (query) {\n        var previousQuery = this.store[query.queryId];\n        process.env.NODE_ENV === \"production\" ? invariant(!previousQuery ||\n            previousQuery.document === query.document ||\n            isEqual(previousQuery.document, query.document), 19) : invariant(!previousQuery ||\n            previousQuery.document === query.document ||\n            isEqual(previousQuery.document, query.document), 'Internal Error: may not update existing query string in store');\n        var isSetVariables = false;\n        var previousVariables = null;\n        if (query.storePreviousVariables &&\n            previousQuery &&\n            previousQuery.networkStatus !== NetworkStatus.loading) {\n            if (!isEqual(previousQuery.variables, query.variables)) {\n                isSetVariables = true;\n                previousVariables = previousQuery.variables;\n            }\n        }\n        var networkStatus;\n        if (isSetVariables) {\n            networkStatus = NetworkStatus.setVariables;\n        }\n        else if (query.isPoll) {\n            networkStatus = NetworkStatus.poll;\n        }\n        else if (query.isRefetch) {\n            networkStatus = NetworkStatus.refetch;\n        }\n        else {\n            networkStatus = NetworkStatus.loading;\n        }\n        var graphQLErrors = [];\n        if (previousQuery && previousQuery.graphQLErrors) {\n            graphQLErrors = previousQuery.graphQLErrors;\n        }\n        this.store[query.queryId] = {\n            document: query.document,\n            variables: query.variables,\n            previousVariables: previousVariables,\n            networkError: null,\n            graphQLErrors: graphQLErrors,\n            networkStatus: networkStatus,\n            metadata: query.metadata,\n        };\n        if (typeof query.fetchMoreForQueryId === 'string' &&\n            this.store[query.fetchMoreForQueryId]) {\n            this.store[query.fetchMoreForQueryId].networkStatus =\n                NetworkStatus.fetchMore;\n        }\n    };\n    QueryStore.prototype.markQueryResult = function (queryId, result, fetchMoreForQueryId) {\n        if (!this.store || !this.store[queryId])\n            return;\n        this.store[queryId].networkError = null;\n        this.store[queryId].graphQLErrors = isNonEmptyArray(result.errors) ? result.errors : [];\n        this.store[queryId].previousVariables = null;\n        this.store[queryId].networkStatus = NetworkStatus.ready;\n        if (typeof fetchMoreForQueryId === 'string' &&\n            this.store[fetchMoreForQueryId]) {\n            this.store[fetchMoreForQueryId].networkStatus = NetworkStatus.ready;\n        }\n    };\n    QueryStore.prototype.markQueryError = function (queryId, error, fetchMoreForQueryId) {\n        if (!this.store || !this.store[queryId])\n            return;\n        this.store[queryId].networkError = error;\n        this.store[queryId].networkStatus = NetworkStatus.error;\n        if (typeof fetchMoreForQueryId === 'string') {\n            this.markQueryResultClient(fetchMoreForQueryId, true);\n        }\n    };\n    QueryStore.prototype.markQueryResultClient = function (queryId, complete) {\n        var storeValue = this.store && this.store[queryId];\n        if (storeValue) {\n            storeValue.networkError = null;\n            storeValue.previousVariables = null;\n            if (complete) {\n                storeValue.networkStatus = NetworkStatus.ready;\n            }\n        }\n    };\n    QueryStore.prototype.stopQuery = function (queryId) {\n        delete this.store[queryId];\n    };\n    QueryStore.prototype.reset = function (observableQueryIds) {\n        var _this = this;\n        Object.keys(this.store).forEach(function (queryId) {\n            if (observableQueryIds.indexOf(queryId) < 0) {\n                _this.stopQuery(queryId);\n            }\n            else {\n                _this.store[queryId].networkStatus = NetworkStatus.loading;\n            }\n        });\n    };\n    return QueryStore;\n}());\n\nfunction capitalizeFirstLetter(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nvar LocalState = (function () {\n    function LocalState(_a) {\n        var cache = _a.cache, client = _a.client, resolvers = _a.resolvers, fragmentMatcher = _a.fragmentMatcher;\n        this.cache = cache;\n        if (client) {\n            this.client = client;\n        }\n        if (resolvers) {\n            this.addResolvers(resolvers);\n        }\n        if (fragmentMatcher) {\n            this.setFragmentMatcher(fragmentMatcher);\n        }\n    }\n    LocalState.prototype.addResolvers = function (resolvers) {\n        var _this = this;\n        this.resolvers = this.resolvers || {};\n        if (Array.isArray(resolvers)) {\n            resolvers.forEach(function (resolverGroup) {\n                _this.resolvers = mergeDeep(_this.resolvers, resolverGroup);\n            });\n        }\n        else {\n            this.resolvers = mergeDeep(this.resolvers, resolvers);\n        }\n    };\n    LocalState.prototype.setResolvers = function (resolvers) {\n        this.resolvers = {};\n        this.addResolvers(resolvers);\n    };\n    LocalState.prototype.getResolvers = function () {\n        return this.resolvers || {};\n    };\n    LocalState.prototype.runResolvers = function (_a) {\n        var document = _a.document, remoteResult = _a.remoteResult, context = _a.context, variables = _a.variables, _b = _a.onlyRunForcedResolvers, onlyRunForcedResolvers = _b === void 0 ? false : _b;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_c) {\n                if (document) {\n                    return [2, this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function (localResult) { return (__assign({}, remoteResult, { data: localResult.result })); })];\n                }\n                return [2, remoteResult];\n            });\n        });\n    };\n    LocalState.prototype.setFragmentMatcher = function (fragmentMatcher) {\n        this.fragmentMatcher = fragmentMatcher;\n    };\n    LocalState.prototype.getFragmentMatcher = function () {\n        return this.fragmentMatcher;\n    };\n    LocalState.prototype.clientQuery = function (document) {\n        if (hasDirectives(['client'], document)) {\n            if (this.resolvers) {\n                return document;\n            }\n            process.env.NODE_ENV === \"production\" || invariant.warn('Found @client directives in a query but no ApolloClient resolvers ' +\n                'were specified. This means ApolloClient local resolver handling ' +\n                'has been disabled, and @client directives will be passed through ' +\n                'to your link chain.');\n        }\n        return null;\n    };\n    LocalState.prototype.serverQuery = function (document) {\n        return this.resolvers ? removeClientSetsFromDocument(document) : document;\n    };\n    LocalState.prototype.prepareContext = function (context) {\n        if (context === void 0) { context = {}; }\n        var cache = this.cache;\n        var newContext = __assign({}, context, { cache: cache, getCacheKey: function (obj) {\n                if (cache.config) {\n                    return cache.config.dataIdFromObject(obj);\n                }\n                else {\n                    process.env.NODE_ENV === \"production\" ? invariant(false, 6) : invariant(false, 'To use context.getCacheKey, you need to use a cache that has ' +\n                        'a configurable dataIdFromObject, like apollo-cache-inmemory.');\n                }\n            } });\n        return newContext;\n    };\n    LocalState.prototype.addExportedVariables = function (document, variables, context) {\n        if (variables === void 0) { variables = {}; }\n        if (context === void 0) { context = {}; }\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (document) {\n                    return [2, this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function (data) { return (__assign({}, variables, data.exportedVariables)); })];\n                }\n                return [2, __assign({}, variables)];\n            });\n        });\n    };\n    LocalState.prototype.shouldForceResolvers = function (document) {\n        var forceResolvers = false;\n        visit(document, {\n            Directive: {\n                enter: function (node) {\n                    if (node.name.value === 'client' && node.arguments) {\n                        forceResolvers = node.arguments.some(function (arg) {\n                            return arg.name.value === 'always' &&\n                                arg.value.kind === 'BooleanValue' &&\n                                arg.value.value === true;\n                        });\n                        if (forceResolvers) {\n                            return BREAK;\n                        }\n                    }\n                },\n            },\n        });\n        return forceResolvers;\n    };\n    LocalState.prototype.buildRootValueFromCache = function (document, variables) {\n        return this.cache.diff({\n            query: buildQueryFromSelectionSet(document),\n            variables: variables,\n            returnPartialData: true,\n            optimistic: false,\n        }).result;\n    };\n    LocalState.prototype.resolveDocument = function (document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {\n        if (context === void 0) { context = {}; }\n        if (variables === void 0) { variables = {}; }\n        if (fragmentMatcher === void 0) { fragmentMatcher = function () { return true; }; }\n        if (onlyRunForcedResolvers === void 0) { onlyRunForcedResolvers = false; }\n        return __awaiter(this, void 0, void 0, function () {\n            var mainDefinition, fragments, fragmentMap, definitionOperation, defaultOperationType, _a, cache, client, execContext;\n            return __generator(this, function (_b) {\n                mainDefinition = getMainDefinition(document);\n                fragments = getFragmentDefinitions(document);\n                fragmentMap = createFragmentMap(fragments);\n                definitionOperation = mainDefinition\n                    .operation;\n                defaultOperationType = definitionOperation\n                    ? capitalizeFirstLetter(definitionOperation)\n                    : 'Query';\n                _a = this, cache = _a.cache, client = _a.client;\n                execContext = {\n                    fragmentMap: fragmentMap,\n                    context: __assign({}, context, { cache: cache,\n                        client: client }),\n                    variables: variables,\n                    fragmentMatcher: fragmentMatcher,\n                    defaultOperationType: defaultOperationType,\n                    exportedVariables: {},\n                    onlyRunForcedResolvers: onlyRunForcedResolvers,\n                };\n                return [2, this.resolveSelectionSet(mainDefinition.selectionSet, rootValue, execContext).then(function (result) { return ({\n                        result: result,\n                        exportedVariables: execContext.exportedVariables,\n                    }); })];\n            });\n        });\n    };\n    LocalState.prototype.resolveSelectionSet = function (selectionSet, rootValue, execContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var fragmentMap, context, variables, resultsToMerge, execute;\n            var _this = this;\n            return __generator(this, function (_a) {\n                fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;\n                resultsToMerge = [rootValue];\n                execute = function (selection) { return __awaiter(_this, void 0, void 0, function () {\n                    var fragment, typeCondition;\n                    return __generator(this, function (_a) {\n                        if (!shouldInclude(selection, variables)) {\n                            return [2];\n                        }\n                        if (isField(selection)) {\n                            return [2, this.resolveField(selection, rootValue, execContext).then(function (fieldResult) {\n                                    var _a;\n                                    if (typeof fieldResult !== 'undefined') {\n                                        resultsToMerge.push((_a = {},\n                                            _a[resultKeyNameFromField(selection)] = fieldResult,\n                                            _a));\n                                    }\n                                })];\n                        }\n                        if (isInlineFragment(selection)) {\n                            fragment = selection;\n                        }\n                        else {\n                            fragment = fragmentMap[selection.name.value];\n                            process.env.NODE_ENV === \"production\" ? invariant(fragment, 7) : invariant(fragment, \"No fragment named \" + selection.name.value);\n                        }\n                        if (fragment && fragment.typeCondition) {\n                            typeCondition = fragment.typeCondition.name.value;\n                            if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n                                return [2, this.resolveSelectionSet(fragment.selectionSet, rootValue, execContext).then(function (fragmentResult) {\n                                        resultsToMerge.push(fragmentResult);\n                                    })];\n                            }\n                        }\n                        return [2];\n                    });\n                }); };\n                return [2, Promise.all(selectionSet.selections.map(execute)).then(function () {\n                        return mergeDeepArray(resultsToMerge);\n                    })];\n            });\n        });\n    };\n    LocalState.prototype.resolveField = function (field, rootValue, execContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;\n            var _this = this;\n            return __generator(this, function (_a) {\n                variables = execContext.variables;\n                fieldName = field.name.value;\n                aliasedFieldName = resultKeyNameFromField(field);\n                aliasUsed = fieldName !== aliasedFieldName;\n                defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n                resultPromise = Promise.resolve(defaultResult);\n                if (!execContext.onlyRunForcedResolvers ||\n                    this.shouldForceResolvers(field)) {\n                    resolverType = rootValue.__typename || execContext.defaultOperationType;\n                    resolverMap = this.resolvers && this.resolvers[resolverType];\n                    if (resolverMap) {\n                        resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n                        if (resolve) {\n                            resultPromise = Promise.resolve(resolve(rootValue, argumentsObjectFromField(field, variables), execContext.context, { field: field }));\n                        }\n                    }\n                }\n                return [2, resultPromise.then(function (result) {\n                        if (result === void 0) { result = defaultResult; }\n                        if (field.directives) {\n                            field.directives.forEach(function (directive) {\n                                if (directive.name.value === 'export' && directive.arguments) {\n                                    directive.arguments.forEach(function (arg) {\n                                        if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {\n                                            execContext.exportedVariables[arg.value.value] = result;\n                                        }\n                                    });\n                                }\n                            });\n                        }\n                        if (!field.selectionSet) {\n                            return result;\n                        }\n                        if (result == null) {\n                            return result;\n                        }\n                        if (Array.isArray(result)) {\n                            return _this.resolveSubSelectedArray(field, result, execContext);\n                        }\n                        if (field.selectionSet) {\n                            return _this.resolveSelectionSet(field.selectionSet, result, execContext);\n                        }\n                    })];\n            });\n        });\n    };\n    LocalState.prototype.resolveSubSelectedArray = function (field, result, execContext) {\n        var _this = this;\n        return Promise.all(result.map(function (item) {\n            if (item === null) {\n                return null;\n            }\n            if (Array.isArray(item)) {\n                return _this.resolveSubSelectedArray(field, item, execContext);\n            }\n            if (field.selectionSet) {\n                return _this.resolveSelectionSet(field.selectionSet, item, execContext);\n            }\n        }));\n    };\n    return LocalState;\n}());\n\nfunction multiplex(inner) {\n    var observers = new Set();\n    var sub = null;\n    return new Observable(function (observer) {\n        observers.add(observer);\n        sub = sub || inner.subscribe({\n            next: function (value) {\n                observers.forEach(function (obs) { return obs.next && obs.next(value); });\n            },\n            error: function (error) {\n                observers.forEach(function (obs) { return obs.error && obs.error(error); });\n            },\n            complete: function () {\n                observers.forEach(function (obs) { return obs.complete && obs.complete(); });\n            },\n        });\n        return function () {\n            if (observers.delete(observer) && !observers.size && sub) {\n                sub.unsubscribe();\n                sub = null;\n            }\n        };\n    });\n}\nfunction asyncMap(observable, mapFn) {\n    return new Observable(function (observer) {\n        var next = observer.next, error = observer.error, complete = observer.complete;\n        var activeNextCount = 0;\n        var completed = false;\n        var handler = {\n            next: function (value) {\n                ++activeNextCount;\n                new Promise(function (resolve) {\n                    resolve(mapFn(value));\n                }).then(function (result) {\n                    --activeNextCount;\n                    next && next.call(observer, result);\n                    completed && handler.complete();\n                }, function (e) {\n                    --activeNextCount;\n                    error && error.call(observer, e);\n                });\n            },\n            error: function (e) {\n                error && error.call(observer, e);\n            },\n            complete: function () {\n                completed = true;\n                if (!activeNextCount) {\n                    complete && complete.call(observer);\n                }\n            },\n        };\n        var sub = observable.subscribe(handler);\n        return function () { return sub.unsubscribe(); };\n    });\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar QueryManager = (function () {\n    function QueryManager(_a) {\n        var link = _a.link, _b = _a.queryDeduplication, queryDeduplication = _b === void 0 ? false : _b, store = _a.store, _c = _a.onBroadcast, onBroadcast = _c === void 0 ? function () { return undefined; } : _c, _d = _a.ssrMode, ssrMode = _d === void 0 ? false : _d, _e = _a.clientAwareness, clientAwareness = _e === void 0 ? {} : _e, localState = _a.localState, assumeImmutableResults = _a.assumeImmutableResults;\n        this.mutationStore = new MutationStore();\n        this.queryStore = new QueryStore();\n        this.clientAwareness = {};\n        this.idCounter = 1;\n        this.queries = new Map();\n        this.fetchQueryRejectFns = new Map();\n        this.transformCache = new (canUseWeakMap ? WeakMap : Map)();\n        this.inFlightLinkObservables = new Map();\n        this.pollingInfoByQueryId = new Map();\n        this.link = link;\n        this.queryDeduplication = queryDeduplication;\n        this.dataStore = store;\n        this.onBroadcast = onBroadcast;\n        this.clientAwareness = clientAwareness;\n        this.localState = localState || new LocalState({ cache: store.getCache() });\n        this.ssrMode = ssrMode;\n        this.assumeImmutableResults = !!assumeImmutableResults;\n    }\n    QueryManager.prototype.stop = function () {\n        var _this = this;\n        this.queries.forEach(function (_info, queryId) {\n            _this.stopQueryNoBroadcast(queryId);\n        });\n        this.fetchQueryRejectFns.forEach(function (reject) {\n            reject(process.env.NODE_ENV === \"production\" ? new InvariantError(8) : new InvariantError('QueryManager stopped while query was in flight'));\n        });\n    };\n    QueryManager.prototype.mutate = function (_a) {\n        var mutation = _a.mutation, variables = _a.variables, optimisticResponse = _a.optimisticResponse, updateQueriesByName = _a.updateQueries, _b = _a.refetchQueries, refetchQueries = _b === void 0 ? [] : _b, _c = _a.awaitRefetchQueries, awaitRefetchQueries = _c === void 0 ? false : _c, updateWithProxyFn = _a.update, _d = _a.errorPolicy, errorPolicy = _d === void 0 ? 'none' : _d, fetchPolicy = _a.fetchPolicy, _e = _a.context, context = _e === void 0 ? {} : _e;\n        return __awaiter(this, void 0, void 0, function () {\n            var mutationId, generateUpdateQueriesInfo, self;\n            var _this = this;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0:\n                        process.env.NODE_ENV === \"production\" ? invariant(mutation, 9) : invariant(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.');\n                        process.env.NODE_ENV === \"production\" ? invariant(!fetchPolicy || fetchPolicy === 'no-cache', 10) : invariant(!fetchPolicy || fetchPolicy === 'no-cache', \"fetchPolicy for mutations currently only supports the 'no-cache' policy\");\n                        mutationId = this.generateQueryId();\n                        mutation = this.transform(mutation).document;\n                        this.setQuery(mutationId, function () { return ({ document: mutation }); });\n                        variables = this.getVariables(mutation, variables);\n                        if (!this.transform(mutation).hasClientExports) return [3, 2];\n                        return [4, this.localState.addExportedVariables(mutation, variables, context)];\n                    case 1:\n                        variables = _f.sent();\n                        _f.label = 2;\n                    case 2:\n                        generateUpdateQueriesInfo = function () {\n                            var ret = {};\n                            if (updateQueriesByName) {\n                                _this.queries.forEach(function (_a, queryId) {\n                                    var observableQuery = _a.observableQuery;\n                                    if (observableQuery) {\n                                        var queryName = observableQuery.queryName;\n                                        if (queryName &&\n                                            hasOwnProperty.call(updateQueriesByName, queryName)) {\n                                            ret[queryId] = {\n                                                updater: updateQueriesByName[queryName],\n                                                query: _this.queryStore.get(queryId),\n                                            };\n                                        }\n                                    }\n                                });\n                            }\n                            return ret;\n                        };\n                        this.mutationStore.initMutation(mutationId, mutation, variables);\n                        this.dataStore.markMutationInit({\n                            mutationId: mutationId,\n                            document: mutation,\n                            variables: variables,\n                            updateQueries: generateUpdateQueriesInfo(),\n                            update: updateWithProxyFn,\n                            optimisticResponse: optimisticResponse,\n                        });\n                        this.broadcastQueries();\n                        self = this;\n                        return [2, new Promise(function (resolve, reject) {\n                                var storeResult;\n                                var error;\n                                self.getObservableFromLink(mutation, __assign({}, context, { optimisticResponse: optimisticResponse }), variables, false).subscribe({\n                                    next: function (result) {\n                                        if (graphQLResultHasError(result) && errorPolicy === 'none') {\n                                            error = new ApolloError({\n                                                graphQLErrors: result.errors,\n                                            });\n                                            return;\n                                        }\n                                        self.mutationStore.markMutationResult(mutationId);\n                                        if (fetchPolicy !== 'no-cache') {\n                                            self.dataStore.markMutationResult({\n                                                mutationId: mutationId,\n                                                result: result,\n                                                document: mutation,\n                                                variables: variables,\n                                                updateQueries: generateUpdateQueriesInfo(),\n                                                update: updateWithProxyFn,\n                                            });\n                                        }\n                                        storeResult = result;\n                                    },\n                                    error: function (err) {\n                                        self.mutationStore.markMutationError(mutationId, err);\n                                        self.dataStore.markMutationComplete({\n                                            mutationId: mutationId,\n                                            optimisticResponse: optimisticResponse,\n                                        });\n                                        self.broadcastQueries();\n                                        self.setQuery(mutationId, function () { return ({ document: null }); });\n                                        reject(new ApolloError({\n                                            networkError: err,\n                                        }));\n                                    },\n                                    complete: function () {\n                                        if (error) {\n                                            self.mutationStore.markMutationError(mutationId, error);\n                                        }\n                                        self.dataStore.markMutationComplete({\n                                            mutationId: mutationId,\n                                            optimisticResponse: optimisticResponse,\n                                        });\n                                        self.broadcastQueries();\n                                        if (error) {\n                                            reject(error);\n                                            return;\n                                        }\n                                        if (typeof refetchQueries === 'function') {\n                                            refetchQueries = refetchQueries(storeResult);\n                                        }\n                                        var refetchQueryPromises = [];\n                                        if (isNonEmptyArray(refetchQueries)) {\n                                            refetchQueries.forEach(function (refetchQuery) {\n                                                if (typeof refetchQuery === 'string') {\n                                                    self.queries.forEach(function (_a) {\n                                                        var observableQuery = _a.observableQuery;\n                                                        if (observableQuery &&\n                                                            observableQuery.queryName === refetchQuery) {\n                                                            refetchQueryPromises.push(observableQuery.refetch());\n                                                        }\n                                                    });\n                                                }\n                                                else {\n                                                    var queryOptions = {\n                                                        query: refetchQuery.query,\n                                                        variables: refetchQuery.variables,\n                                                        fetchPolicy: 'network-only',\n                                                    };\n                                                    if (refetchQuery.context) {\n                                                        queryOptions.context = refetchQuery.context;\n                                                    }\n                                                    refetchQueryPromises.push(self.query(queryOptions));\n                                                }\n                                            });\n                                        }\n                                        Promise.all(awaitRefetchQueries ? refetchQueryPromises : []).then(function () {\n                                            self.setQuery(mutationId, function () { return ({ document: null }); });\n                                            if (errorPolicy === 'ignore' &&\n                                                storeResult &&\n                                                graphQLResultHasError(storeResult)) {\n                                                delete storeResult.errors;\n                                            }\n                                            resolve(storeResult);\n                                        });\n                                    },\n                                });\n                            })];\n                }\n            });\n        });\n    };\n    QueryManager.prototype.fetchQuery = function (queryId, options, fetchType, fetchMoreForQueryId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, metadata, _b, fetchPolicy, _c, context, query, variables, storeResult, isNetworkOnly, needToFetch, _d, complete, result, shouldFetch, requestId, cancel, networkResult;\n            var _this = this;\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        _a = options.metadata, metadata = _a === void 0 ? null : _a, _b = options.fetchPolicy, fetchPolicy = _b === void 0 ? 'cache-first' : _b, _c = options.context, context = _c === void 0 ? {} : _c;\n                        query = this.transform(options.query).document;\n                        variables = this.getVariables(query, options.variables);\n                        if (!this.transform(query).hasClientExports) return [3, 2];\n                        return [4, this.localState.addExportedVariables(query, variables, context)];\n                    case 1:\n                        variables = _e.sent();\n                        _e.label = 2;\n                    case 2:\n                        options = __assign({}, options, { variables: variables });\n                        isNetworkOnly = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n                        needToFetch = isNetworkOnly;\n                        if (!isNetworkOnly) {\n                            _d = this.dataStore.getCache().diff({\n                                query: query,\n                                variables: variables,\n                                returnPartialData: true,\n                                optimistic: false,\n                            }), complete = _d.complete, result = _d.result;\n                            needToFetch = !complete || fetchPolicy === 'cache-and-network';\n                            storeResult = result;\n                        }\n                        shouldFetch = needToFetch && fetchPolicy !== 'cache-only' && fetchPolicy !== 'standby';\n                        if (hasDirectives(['live'], query))\n                            shouldFetch = true;\n                        requestId = this.idCounter++;\n                        cancel = fetchPolicy !== 'no-cache'\n                            ? this.updateQueryWatch(queryId, query, options)\n                            : undefined;\n                        this.setQuery(queryId, function () { return ({\n                            document: query,\n                            lastRequestId: requestId,\n                            invalidated: true,\n                            cancel: cancel,\n                        }); });\n                        this.invalidate(fetchMoreForQueryId);\n                        this.queryStore.initQuery({\n                            queryId: queryId,\n                            document: query,\n                            storePreviousVariables: shouldFetch,\n                            variables: variables,\n                            isPoll: fetchType === FetchType.poll,\n                            isRefetch: fetchType === FetchType.refetch,\n                            metadata: metadata,\n                            fetchMoreForQueryId: fetchMoreForQueryId,\n                        });\n                        this.broadcastQueries();\n                        if (shouldFetch) {\n                            networkResult = this.fetchRequest({\n                                requestId: requestId,\n                                queryId: queryId,\n                                document: query,\n                                options: options,\n                                fetchMoreForQueryId: fetchMoreForQueryId,\n                            }).catch(function (error) {\n                                if (isApolloError(error)) {\n                                    throw error;\n                                }\n                                else {\n                                    if (requestId >= _this.getQuery(queryId).lastRequestId) {\n                                        _this.queryStore.markQueryError(queryId, error, fetchMoreForQueryId);\n                                        _this.invalidate(queryId);\n                                        _this.invalidate(fetchMoreForQueryId);\n                                        _this.broadcastQueries();\n                                    }\n                                    throw new ApolloError({ networkError: error });\n                                }\n                            });\n                            if (fetchPolicy !== 'cache-and-network') {\n                                return [2, networkResult];\n                            }\n                            networkResult.catch(function () { });\n                        }\n                        this.queryStore.markQueryResultClient(queryId, !shouldFetch);\n                        this.invalidate(queryId);\n                        this.invalidate(fetchMoreForQueryId);\n                        if (this.transform(query).hasForcedResolvers) {\n                            return [2, this.localState.runResolvers({\n                                    document: query,\n                                    remoteResult: { data: storeResult },\n                                    context: context,\n                                    variables: variables,\n                                    onlyRunForcedResolvers: true,\n                                }).then(function (result) {\n                                    _this.markQueryResult(queryId, result, options, fetchMoreForQueryId);\n                                    _this.broadcastQueries();\n                                    return result;\n                                })];\n                        }\n                        this.broadcastQueries();\n                        return [2, { data: storeResult }];\n                }\n            });\n        });\n    };\n    QueryManager.prototype.markQueryResult = function (queryId, result, _a, fetchMoreForQueryId) {\n        var fetchPolicy = _a.fetchPolicy, variables = _a.variables, errorPolicy = _a.errorPolicy;\n        if (fetchPolicy === 'no-cache') {\n            this.setQuery(queryId, function () { return ({\n                newData: { result: result.data, complete: true },\n            }); });\n        }\n        else {\n            this.dataStore.markQueryResult(result, this.getQuery(queryId).document, variables, fetchMoreForQueryId, errorPolicy === 'ignore' || errorPolicy === 'all');\n        }\n    };\n    QueryManager.prototype.queryListenerForObserver = function (queryId, options, observer) {\n        var _this = this;\n        function invoke(method, argument) {\n            if (observer[method]) {\n                try {\n                    observer[method](argument);\n                }\n                catch (e) {\n                    process.env.NODE_ENV === \"production\" || invariant.error(e);\n                }\n            }\n            else if (method === 'error') {\n                process.env.NODE_ENV === \"production\" || invariant.error(argument);\n            }\n        }\n        return function (queryStoreValue, newData) {\n            _this.invalidate(queryId, false);\n            if (!queryStoreValue)\n                return;\n            var _a = _this.getQuery(queryId), observableQuery = _a.observableQuery, document = _a.document;\n            var fetchPolicy = observableQuery\n                ? observableQuery.options.fetchPolicy\n                : options.fetchPolicy;\n            if (fetchPolicy === 'standby')\n                return;\n            var loading = isNetworkRequestInFlight(queryStoreValue.networkStatus);\n            var lastResult = observableQuery && observableQuery.getLastResult();\n            var networkStatusChanged = !!(lastResult &&\n                lastResult.networkStatus !== queryStoreValue.networkStatus);\n            var shouldNotifyIfLoading = options.returnPartialData ||\n                (!newData && queryStoreValue.previousVariables) ||\n                (networkStatusChanged && options.notifyOnNetworkStatusChange) ||\n                fetchPolicy === 'cache-only' ||\n                fetchPolicy === 'cache-and-network';\n            if (loading && !shouldNotifyIfLoading) {\n                return;\n            }\n            var hasGraphQLErrors = isNonEmptyArray(queryStoreValue.graphQLErrors);\n            var errorPolicy = observableQuery\n                && observableQuery.options.errorPolicy\n                || options.errorPolicy\n                || 'none';\n            if (errorPolicy === 'none' && hasGraphQLErrors || queryStoreValue.networkError) {\n                return invoke('error', new ApolloError({\n                    graphQLErrors: queryStoreValue.graphQLErrors,\n                    networkError: queryStoreValue.networkError,\n                }));\n            }\n            try {\n                var data = void 0;\n                var isMissing = void 0;\n                if (newData) {\n                    if (fetchPolicy !== 'no-cache' && fetchPolicy !== 'network-only') {\n                        _this.setQuery(queryId, function () { return ({ newData: null }); });\n                    }\n                    data = newData.result;\n                    isMissing = !newData.complete;\n                }\n                else {\n                    var lastError = observableQuery && observableQuery.getLastError();\n                    var errorStatusChanged = errorPolicy !== 'none' &&\n                        (lastError && lastError.graphQLErrors) !==\n                            queryStoreValue.graphQLErrors;\n                    if (lastResult && lastResult.data && !errorStatusChanged) {\n                        data = lastResult.data;\n                        isMissing = false;\n                    }\n                    else {\n                        var diffResult = _this.dataStore.getCache().diff({\n                            query: document,\n                            variables: queryStoreValue.previousVariables ||\n                                queryStoreValue.variables,\n                            returnPartialData: true,\n                            optimistic: true,\n                        });\n                        data = diffResult.result;\n                        isMissing = !diffResult.complete;\n                    }\n                }\n                var stale = isMissing && !(options.returnPartialData ||\n                    fetchPolicy === 'cache-only');\n                var resultFromStore = {\n                    data: stale ? lastResult && lastResult.data : data,\n                    loading: loading,\n                    networkStatus: queryStoreValue.networkStatus,\n                    stale: stale,\n                };\n                if (errorPolicy === 'all' && hasGraphQLErrors) {\n                    resultFromStore.errors = queryStoreValue.graphQLErrors;\n                }\n                invoke('next', resultFromStore);\n            }\n            catch (networkError) {\n                invoke('error', new ApolloError({ networkError: networkError }));\n            }\n        };\n    };\n    QueryManager.prototype.transform = function (document) {\n        var transformCache = this.transformCache;\n        if (!transformCache.has(document)) {\n            var cache = this.dataStore.getCache();\n            var transformed = cache.transformDocument(document);\n            var forLink = removeConnectionDirectiveFromDocument(cache.transformForLink(transformed));\n            var clientQuery = this.localState.clientQuery(transformed);\n            var serverQuery = this.localState.serverQuery(forLink);\n            var cacheEntry_1 = {\n                document: transformed,\n                hasClientExports: hasClientExports(transformed),\n                hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n                clientQuery: clientQuery,\n                serverQuery: serverQuery,\n                defaultVars: getDefaultValues(getOperationDefinition(transformed)),\n            };\n            var add = function (doc) {\n                if (doc && !transformCache.has(doc)) {\n                    transformCache.set(doc, cacheEntry_1);\n                }\n            };\n            add(document);\n            add(transformed);\n            add(clientQuery);\n            add(serverQuery);\n        }\n        return transformCache.get(document);\n    };\n    QueryManager.prototype.getVariables = function (document, variables) {\n        return __assign({}, this.transform(document).defaultVars, variables);\n    };\n    QueryManager.prototype.watchQuery = function (options, shouldSubscribe) {\n        if (shouldSubscribe === void 0) { shouldSubscribe = true; }\n        process.env.NODE_ENV === \"production\" ? invariant(options.fetchPolicy !== 'standby', 11) : invariant(options.fetchPolicy !== 'standby', 'client.watchQuery cannot be called with fetchPolicy set to \"standby\"');\n        options.variables = this.getVariables(options.query, options.variables);\n        if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n            options.notifyOnNetworkStatusChange = false;\n        }\n        var transformedOptions = __assign({}, options);\n        return new ObservableQuery({\n            queryManager: this,\n            options: transformedOptions,\n            shouldSubscribe: shouldSubscribe,\n        });\n    };\n    QueryManager.prototype.query = function (options) {\n        var _this = this;\n        process.env.NODE_ENV === \"production\" ? invariant(options.query, 12) : invariant(options.query, 'query option is required. You must specify your GraphQL document ' +\n            'in the query option.');\n        process.env.NODE_ENV === \"production\" ? invariant(options.query.kind === 'Document', 13) : invariant(options.query.kind === 'Document', 'You must wrap the query string in a \"gql\" tag.');\n        process.env.NODE_ENV === \"production\" ? invariant(!options.returnPartialData, 14) : invariant(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.');\n        process.env.NODE_ENV === \"production\" ? invariant(!options.pollInterval, 15) : invariant(!options.pollInterval, 'pollInterval option only supported on watchQuery.');\n        return new Promise(function (resolve, reject) {\n            var watchedQuery = _this.watchQuery(options, false);\n            _this.fetchQueryRejectFns.set(\"query:\" + watchedQuery.queryId, reject);\n            watchedQuery\n                .result()\n                .then(resolve, reject)\n                .then(function () {\n                return _this.fetchQueryRejectFns.delete(\"query:\" + watchedQuery.queryId);\n            });\n        });\n    };\n    QueryManager.prototype.generateQueryId = function () {\n        return String(this.idCounter++);\n    };\n    QueryManager.prototype.stopQueryInStore = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n        this.stopPollingQuery(queryId);\n        this.queryStore.stopQuery(queryId);\n        this.invalidate(queryId);\n    };\n    QueryManager.prototype.addQueryListener = function (queryId, listener) {\n        this.setQuery(queryId, function (_a) {\n            var listeners = _a.listeners;\n            listeners.add(listener);\n            return { invalidated: false };\n        });\n    };\n    QueryManager.prototype.updateQueryWatch = function (queryId, document, options) {\n        var _this = this;\n        var cancel = this.getQuery(queryId).cancel;\n        if (cancel)\n            cancel();\n        var previousResult = function () {\n            var previousResult = null;\n            var observableQuery = _this.getQuery(queryId).observableQuery;\n            if (observableQuery) {\n                var lastResult = observableQuery.getLastResult();\n                if (lastResult) {\n                    previousResult = lastResult.data;\n                }\n            }\n            return previousResult;\n        };\n        return this.dataStore.getCache().watch({\n            query: document,\n            variables: options.variables,\n            optimistic: true,\n            previousResult: previousResult,\n            callback: function (newData) {\n                _this.setQuery(queryId, function () { return ({ invalidated: true, newData: newData }); });\n            },\n        });\n    };\n    QueryManager.prototype.addObservableQuery = function (queryId, observableQuery) {\n        this.setQuery(queryId, function () { return ({ observableQuery: observableQuery }); });\n    };\n    QueryManager.prototype.removeObservableQuery = function (queryId) {\n        var cancel = this.getQuery(queryId).cancel;\n        this.setQuery(queryId, function () { return ({ observableQuery: null }); });\n        if (cancel)\n            cancel();\n    };\n    QueryManager.prototype.clearStore = function () {\n        this.fetchQueryRejectFns.forEach(function (reject) {\n            reject(process.env.NODE_ENV === \"production\" ? new InvariantError(16) : new InvariantError('Store reset while query was in flight (not completed in link chain)'));\n        });\n        var resetIds = [];\n        this.queries.forEach(function (_a, queryId) {\n            var observableQuery = _a.observableQuery;\n            if (observableQuery)\n                resetIds.push(queryId);\n        });\n        this.queryStore.reset(resetIds);\n        this.mutationStore.reset();\n        return this.dataStore.reset();\n    };\n    QueryManager.prototype.resetStore = function () {\n        var _this = this;\n        return this.clearStore().then(function () {\n            return _this.reFetchObservableQueries();\n        });\n    };\n    QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n        var _this = this;\n        if (includeStandby === void 0) { includeStandby = false; }\n        var observableQueryPromises = [];\n        this.queries.forEach(function (_a, queryId) {\n            var observableQuery = _a.observableQuery;\n            if (observableQuery) {\n                var fetchPolicy = observableQuery.options.fetchPolicy;\n                observableQuery.resetLastResults();\n                if (fetchPolicy !== 'cache-only' &&\n                    (includeStandby || fetchPolicy !== 'standby')) {\n                    observableQueryPromises.push(observableQuery.refetch());\n                }\n                _this.setQuery(queryId, function () { return ({ newData: null }); });\n                _this.invalidate(queryId);\n            }\n        });\n        this.broadcastQueries();\n        return Promise.all(observableQueryPromises);\n    };\n    QueryManager.prototype.observeQuery = function (queryId, options, observer) {\n        this.addQueryListener(queryId, this.queryListenerForObserver(queryId, options, observer));\n        return this.fetchQuery(queryId, options);\n    };\n    QueryManager.prototype.startQuery = function (queryId, options, listener) {\n        process.env.NODE_ENV === \"production\" || invariant.warn(\"The QueryManager.startQuery method has been deprecated\");\n        this.addQueryListener(queryId, listener);\n        this.fetchQuery(queryId, options)\n            .catch(function () { return undefined; });\n        return queryId;\n    };\n    QueryManager.prototype.startGraphQLSubscription = function (_a) {\n        var _this = this;\n        var query = _a.query, fetchPolicy = _a.fetchPolicy, variables = _a.variables;\n        query = this.transform(query).document;\n        variables = this.getVariables(query, variables);\n        var makeObservable = function (variables) {\n            return _this.getObservableFromLink(query, {}, variables, false).map(function (result) {\n                if (!fetchPolicy || fetchPolicy !== 'no-cache') {\n                    _this.dataStore.markSubscriptionResult(result, query, variables);\n                    _this.broadcastQueries();\n                }\n                if (graphQLResultHasError(result)) {\n                    throw new ApolloError({\n                        graphQLErrors: result.errors,\n                    });\n                }\n                return result;\n            });\n        };\n        if (this.transform(query).hasClientExports) {\n            var observablePromise_1 = this.localState.addExportedVariables(query, variables).then(makeObservable);\n            return new Observable(function (observer) {\n                var sub = null;\n                observablePromise_1.then(function (observable) { return sub = observable.subscribe(observer); }, observer.error);\n                return function () { return sub && sub.unsubscribe(); };\n            });\n        }\n        return makeObservable(variables);\n    };\n    QueryManager.prototype.stopQuery = function (queryId) {\n        this.stopQueryNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.removeQuery(queryId);\n    };\n    QueryManager.prototype.removeQuery = function (queryId) {\n        this.fetchQueryRejectFns.delete(\"query:\" + queryId);\n        this.fetchQueryRejectFns.delete(\"fetchRequest:\" + queryId);\n        this.getQuery(queryId).subscriptions.forEach(function (x) { return x.unsubscribe(); });\n        this.queries.delete(queryId);\n    };\n    QueryManager.prototype.getCurrentQueryResult = function (observableQuery, optimistic) {\n        if (optimistic === void 0) { optimistic = true; }\n        var _a = observableQuery.options, variables = _a.variables, query = _a.query, fetchPolicy = _a.fetchPolicy, returnPartialData = _a.returnPartialData;\n        var lastResult = observableQuery.getLastResult();\n        var newData = this.getQuery(observableQuery.queryId).newData;\n        if (newData && newData.complete) {\n            return { data: newData.result, partial: false };\n        }\n        if (fetchPolicy === 'no-cache' || fetchPolicy === 'network-only') {\n            return { data: undefined, partial: false };\n        }\n        var _b = this.dataStore.getCache().diff({\n            query: query,\n            variables: variables,\n            previousResult: lastResult ? lastResult.data : undefined,\n            returnPartialData: true,\n            optimistic: optimistic,\n        }), result = _b.result, complete = _b.complete;\n        return {\n            data: (complete || returnPartialData) ? result : void 0,\n            partial: !complete,\n        };\n    };\n    QueryManager.prototype.getQueryWithPreviousResult = function (queryIdOrObservable) {\n        var observableQuery;\n        if (typeof queryIdOrObservable === 'string') {\n            var foundObserveableQuery = this.getQuery(queryIdOrObservable).observableQuery;\n            process.env.NODE_ENV === \"production\" ? invariant(foundObserveableQuery, 17) : invariant(foundObserveableQuery, \"ObservableQuery with this id doesn't exist: \" + queryIdOrObservable);\n            observableQuery = foundObserveableQuery;\n        }\n        else {\n            observableQuery = queryIdOrObservable;\n        }\n        var _a = observableQuery.options, variables = _a.variables, query = _a.query;\n        return {\n            previousResult: this.getCurrentQueryResult(observableQuery, false).data,\n            variables: variables,\n            document: query,\n        };\n    };\n    QueryManager.prototype.broadcastQueries = function () {\n        var _this = this;\n        this.onBroadcast();\n        this.queries.forEach(function (info, id) {\n            if (info.invalidated) {\n                info.listeners.forEach(function (listener) {\n                    if (listener) {\n                        listener(_this.queryStore.get(id), info.newData);\n                    }\n                });\n            }\n        });\n    };\n    QueryManager.prototype.getLocalState = function () {\n        return this.localState;\n    };\n    QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {\n        var _this = this;\n        if (deduplication === void 0) { deduplication = this.queryDeduplication; }\n        var observable;\n        var serverQuery = this.transform(query).serverQuery;\n        if (serverQuery) {\n            var _a = this, inFlightLinkObservables_1 = _a.inFlightLinkObservables, link = _a.link;\n            var operation = {\n                query: serverQuery,\n                variables: variables,\n                operationName: getOperationName(serverQuery) || void 0,\n                context: this.prepareContext(__assign({}, context, { forceFetch: !deduplication })),\n            };\n            context = operation.context;\n            if (deduplication) {\n                var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || new Map();\n                inFlightLinkObservables_1.set(serverQuery, byVariables_1);\n                var varJson_1 = JSON.stringify(variables);\n                observable = byVariables_1.get(varJson_1);\n                if (!observable) {\n                    byVariables_1.set(varJson_1, observable = multiplex(execute(link, operation)));\n                    var cleanup = function () {\n                        byVariables_1.delete(varJson_1);\n                        if (!byVariables_1.size)\n                            inFlightLinkObservables_1.delete(serverQuery);\n                        cleanupSub_1.unsubscribe();\n                    };\n                    var cleanupSub_1 = observable.subscribe({\n                        next: cleanup,\n                        error: cleanup,\n                        complete: cleanup,\n                    });\n                }\n            }\n            else {\n                observable = multiplex(execute(link, operation));\n            }\n        }\n        else {\n            observable = Observable.of({ data: {} });\n            context = this.prepareContext(context);\n        }\n        var clientQuery = this.transform(query).clientQuery;\n        if (clientQuery) {\n            observable = asyncMap(observable, function (result) {\n                return _this.localState.runResolvers({\n                    document: clientQuery,\n                    remoteResult: result,\n                    context: context,\n                    variables: variables,\n                });\n            });\n        }\n        return observable;\n    };\n    QueryManager.prototype.fetchRequest = function (_a) {\n        var _this = this;\n        var requestId = _a.requestId, queryId = _a.queryId, document = _a.document, options = _a.options, fetchMoreForQueryId = _a.fetchMoreForQueryId;\n        var variables = options.variables, _b = options.errorPolicy, errorPolicy = _b === void 0 ? 'none' : _b, fetchPolicy = options.fetchPolicy;\n        var resultFromStore;\n        var errorsFromStore;\n        return new Promise(function (resolve, reject) {\n            var observable = _this.getObservableFromLink(document, options.context, variables);\n            var fqrfId = \"fetchRequest:\" + queryId;\n            _this.fetchQueryRejectFns.set(fqrfId, reject);\n            var cleanup = function () {\n                _this.fetchQueryRejectFns.delete(fqrfId);\n                _this.setQuery(queryId, function (_a) {\n                    var subscriptions = _a.subscriptions;\n                    subscriptions.delete(subscription);\n                });\n            };\n            var subscription = observable.map(function (result) {\n                if (requestId >= _this.getQuery(queryId).lastRequestId) {\n                    _this.markQueryResult(queryId, result, options, fetchMoreForQueryId);\n                    _this.queryStore.markQueryResult(queryId, result, fetchMoreForQueryId);\n                    _this.invalidate(queryId);\n                    _this.invalidate(fetchMoreForQueryId);\n                    _this.broadcastQueries();\n                }\n                if (errorPolicy === 'none' && isNonEmptyArray(result.errors)) {\n                    return reject(new ApolloError({\n                        graphQLErrors: result.errors,\n                    }));\n                }\n                if (errorPolicy === 'all') {\n                    errorsFromStore = result.errors;\n                }\n                if (fetchMoreForQueryId || fetchPolicy === 'no-cache') {\n                    resultFromStore = result.data;\n                }\n                else {\n                    var _a = _this.dataStore.getCache().diff({\n                        variables: variables,\n                        query: document,\n                        optimistic: false,\n                        returnPartialData: true,\n                    }), result_1 = _a.result, complete = _a.complete;\n                    if (complete || options.returnPartialData) {\n                        resultFromStore = result_1;\n                    }\n                }\n            }).subscribe({\n                error: function (error) {\n                    cleanup();\n                    reject(error);\n                },\n                complete: function () {\n                    cleanup();\n                    resolve({\n                        data: resultFromStore,\n                        errors: errorsFromStore,\n                        loading: false,\n                        networkStatus: NetworkStatus.ready,\n                        stale: false,\n                    });\n                },\n            });\n            _this.setQuery(queryId, function (_a) {\n                var subscriptions = _a.subscriptions;\n                subscriptions.add(subscription);\n            });\n        });\n    };\n    QueryManager.prototype.getQuery = function (queryId) {\n        return (this.queries.get(queryId) || {\n            listeners: new Set(),\n            invalidated: false,\n            document: null,\n            newData: null,\n            lastRequestId: 1,\n            observableQuery: null,\n            subscriptions: new Set(),\n        });\n    };\n    QueryManager.prototype.setQuery = function (queryId, updater) {\n        var prev = this.getQuery(queryId);\n        var newInfo = __assign({}, prev, updater(prev));\n        this.queries.set(queryId, newInfo);\n    };\n    QueryManager.prototype.invalidate = function (queryId, invalidated) {\n        if (invalidated === void 0) { invalidated = true; }\n        if (queryId) {\n            this.setQuery(queryId, function () { return ({ invalidated: invalidated }); });\n        }\n    };\n    QueryManager.prototype.prepareContext = function (context) {\n        if (context === void 0) { context = {}; }\n        var newContext = this.localState.prepareContext(context);\n        return __assign({}, newContext, { clientAwareness: this.clientAwareness });\n    };\n    QueryManager.prototype.checkInFlight = function (queryId) {\n        var query = this.queryStore.get(queryId);\n        return (query &&\n            query.networkStatus !== NetworkStatus.ready &&\n            query.networkStatus !== NetworkStatus.error);\n    };\n    QueryManager.prototype.startPollingQuery = function (options, queryId, listener) {\n        var _this = this;\n        var pollInterval = options.pollInterval;\n        process.env.NODE_ENV === \"production\" ? invariant(pollInterval, 18) : invariant(pollInterval, 'Attempted to start a polling query without a polling interval.');\n        if (!this.ssrMode) {\n            var info = this.pollingInfoByQueryId.get(queryId);\n            if (!info) {\n                this.pollingInfoByQueryId.set(queryId, (info = {}));\n            }\n            info.interval = pollInterval;\n            info.options = __assign({}, options, { fetchPolicy: 'network-only' });\n            var maybeFetch_1 = function () {\n                var info = _this.pollingInfoByQueryId.get(queryId);\n                if (info) {\n                    if (_this.checkInFlight(queryId)) {\n                        poll_1();\n                    }\n                    else {\n                        _this.fetchQuery(queryId, info.options, FetchType.poll).then(poll_1, poll_1);\n                    }\n                }\n            };\n            var poll_1 = function () {\n                var info = _this.pollingInfoByQueryId.get(queryId);\n                if (info) {\n                    clearTimeout(info.timeout);\n                    info.timeout = setTimeout(maybeFetch_1, info.interval);\n                }\n            };\n            if (listener) {\n                this.addQueryListener(queryId, listener);\n            }\n            poll_1();\n        }\n        return queryId;\n    };\n    QueryManager.prototype.stopPollingQuery = function (queryId) {\n        this.pollingInfoByQueryId.delete(queryId);\n    };\n    return QueryManager;\n}());\n\nvar DataStore = (function () {\n    function DataStore(initialCache) {\n        this.cache = initialCache;\n    }\n    DataStore.prototype.getCache = function () {\n        return this.cache;\n    };\n    DataStore.prototype.markQueryResult = function (result, document, variables, fetchMoreForQueryId, ignoreErrors) {\n        if (ignoreErrors === void 0) { ignoreErrors = false; }\n        var writeWithErrors = !graphQLResultHasError(result);\n        if (ignoreErrors && graphQLResultHasError(result) && result.data) {\n            writeWithErrors = true;\n        }\n        if (!fetchMoreForQueryId && writeWithErrors) {\n            this.cache.write({\n                result: result.data,\n                dataId: 'ROOT_QUERY',\n                query: document,\n                variables: variables,\n            });\n        }\n    };\n    DataStore.prototype.markSubscriptionResult = function (result, document, variables) {\n        if (!graphQLResultHasError(result)) {\n            this.cache.write({\n                result: result.data,\n                dataId: 'ROOT_SUBSCRIPTION',\n                query: document,\n                variables: variables,\n            });\n        }\n    };\n    DataStore.prototype.markMutationInit = function (mutation) {\n        var _this = this;\n        if (mutation.optimisticResponse) {\n            var optimistic_1;\n            if (typeof mutation.optimisticResponse === 'function') {\n                optimistic_1 = mutation.optimisticResponse(mutation.variables);\n            }\n            else {\n                optimistic_1 = mutation.optimisticResponse;\n            }\n            this.cache.recordOptimisticTransaction(function (c) {\n                var orig = _this.cache;\n                _this.cache = c;\n                try {\n                    _this.markMutationResult({\n                        mutationId: mutation.mutationId,\n                        result: { data: optimistic_1 },\n                        document: mutation.document,\n                        variables: mutation.variables,\n                        updateQueries: mutation.updateQueries,\n                        update: mutation.update,\n                    });\n                }\n                finally {\n                    _this.cache = orig;\n                }\n            }, mutation.mutationId);\n        }\n    };\n    DataStore.prototype.markMutationResult = function (mutation) {\n        var _this = this;\n        if (!graphQLResultHasError(mutation.result)) {\n            var cacheWrites_1 = [{\n                    result: mutation.result.data,\n                    dataId: 'ROOT_MUTATION',\n                    query: mutation.document,\n                    variables: mutation.variables,\n                }];\n            var updateQueries_1 = mutation.updateQueries;\n            if (updateQueries_1) {\n                Object.keys(updateQueries_1).forEach(function (id) {\n                    var _a = updateQueries_1[id], query = _a.query, updater = _a.updater;\n                    var _b = _this.cache.diff({\n                        query: query.document,\n                        variables: query.variables,\n                        returnPartialData: true,\n                        optimistic: false,\n                    }), currentQueryResult = _b.result, complete = _b.complete;\n                    if (complete) {\n                        var nextQueryResult = tryFunctionOrLogError(function () {\n                            return updater(currentQueryResult, {\n                                mutationResult: mutation.result,\n                                queryName: getOperationName(query.document) || undefined,\n                                queryVariables: query.variables,\n                            });\n                        });\n                        if (nextQueryResult) {\n                            cacheWrites_1.push({\n                                result: nextQueryResult,\n                                dataId: 'ROOT_QUERY',\n                                query: query.document,\n                                variables: query.variables,\n                            });\n                        }\n                    }\n                });\n            }\n            this.cache.performTransaction(function (c) {\n                cacheWrites_1.forEach(function (write) { return c.write(write); });\n                var update = mutation.update;\n                if (update) {\n                    tryFunctionOrLogError(function () { return update(c, mutation.result); });\n                }\n            });\n        }\n    };\n    DataStore.prototype.markMutationComplete = function (_a) {\n        var mutationId = _a.mutationId, optimisticResponse = _a.optimisticResponse;\n        if (optimisticResponse) {\n            this.cache.removeOptimistic(mutationId);\n        }\n    };\n    DataStore.prototype.markUpdateQueryResult = function (document, variables, newResult) {\n        this.cache.write({\n            result: newResult,\n            dataId: 'ROOT_QUERY',\n            variables: variables,\n            query: document,\n        });\n    };\n    DataStore.prototype.reset = function () {\n        return this.cache.reset();\n    };\n    return DataStore;\n}());\n\nvar version = \"2.6.4\";\n\nvar hasSuggestedDevtools = false;\nvar ApolloClient = (function () {\n    function ApolloClient(options) {\n        var _this = this;\n        this.defaultOptions = {};\n        this.resetStoreCallbacks = [];\n        this.clearStoreCallbacks = [];\n        var cache = options.cache, _a = options.ssrMode, ssrMode = _a === void 0 ? false : _a, _b = options.ssrForceFetchDelay, ssrForceFetchDelay = _b === void 0 ? 0 : _b, connectToDevTools = options.connectToDevTools, _c = options.queryDeduplication, queryDeduplication = _c === void 0 ? true : _c, defaultOptions = options.defaultOptions, _d = options.assumeImmutableResults, assumeImmutableResults = _d === void 0 ? false : _d, resolvers = options.resolvers, typeDefs = options.typeDefs, fragmentMatcher = options.fragmentMatcher, clientAwarenessName = options.name, clientAwarenessVersion = options.version;\n        var link = options.link;\n        if (!link && resolvers) {\n            link = ApolloLink.empty();\n        }\n        if (!link || !cache) {\n            throw process.env.NODE_ENV === \"production\" ? new InvariantError(1) : new InvariantError(\"In order to initialize Apollo Client, you must specify 'link' and 'cache' properties in the options object.\\n\" +\n                \"These options are part of the upgrade requirements when migrating from Apollo Client 1.x to Apollo Client 2.x.\\n\" +\n                \"For more information, please visit: https://www.apollographql.com/docs/tutorial/client.html#apollo-client-setup\");\n        }\n        this.link = link;\n        this.cache = cache;\n        this.store = new DataStore(cache);\n        this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n        this.queryDeduplication = queryDeduplication;\n        this.defaultOptions = defaultOptions || {};\n        this.typeDefs = typeDefs;\n        if (ssrForceFetchDelay) {\n            setTimeout(function () { return (_this.disableNetworkFetches = false); }, ssrForceFetchDelay);\n        }\n        this.watchQuery = this.watchQuery.bind(this);\n        this.query = this.query.bind(this);\n        this.mutate = this.mutate.bind(this);\n        this.resetStore = this.resetStore.bind(this);\n        this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n        var defaultConnectToDevTools = process.env.NODE_ENV !== 'production' &&\n            typeof window !== 'undefined' &&\n            !window.__APOLLO_CLIENT__;\n        if (typeof connectToDevTools === 'undefined'\n            ? defaultConnectToDevTools\n            : connectToDevTools && typeof window !== 'undefined') {\n            window.__APOLLO_CLIENT__ = this;\n        }\n        if (!hasSuggestedDevtools && process.env.NODE_ENV !== 'production') {\n            hasSuggestedDevtools = true;\n            if (typeof window !== 'undefined' &&\n                window.document &&\n                window.top === window.self) {\n                if (typeof window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n                    if (window.navigator &&\n                        window.navigator.userAgent &&\n                        window.navigator.userAgent.indexOf('Chrome') > -1) {\n                        console.debug('Download the Apollo DevTools ' +\n                            'for a better development experience: ' +\n                            'https://chrome.google.com/webstore/detail/apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm');\n                    }\n                }\n            }\n        }\n        this.version = version;\n        this.localState = new LocalState({\n            cache: cache,\n            client: this,\n            resolvers: resolvers,\n            fragmentMatcher: fragmentMatcher,\n        });\n        this.queryManager = new QueryManager({\n            link: this.link,\n            store: this.store,\n            queryDeduplication: queryDeduplication,\n            ssrMode: ssrMode,\n            clientAwareness: {\n                name: clientAwarenessName,\n                version: clientAwarenessVersion,\n            },\n            localState: this.localState,\n            assumeImmutableResults: assumeImmutableResults,\n            onBroadcast: function () {\n                if (_this.devToolsHookCb) {\n                    _this.devToolsHookCb({\n                        action: {},\n                        state: {\n                            queries: _this.queryManager.queryStore.getStore(),\n                            mutations: _this.queryManager.mutationStore.getStore(),\n                        },\n                        dataWithOptimisticResults: _this.cache.extract(true),\n                    });\n                }\n            },\n        });\n    }\n    ApolloClient.prototype.stop = function () {\n        this.queryManager.stop();\n    };\n    ApolloClient.prototype.watchQuery = function (options) {\n        if (this.defaultOptions.watchQuery) {\n            options = __assign({}, this.defaultOptions.watchQuery, options);\n        }\n        if (this.disableNetworkFetches &&\n            (options.fetchPolicy === 'network-only' ||\n                options.fetchPolicy === 'cache-and-network')) {\n            options = __assign({}, options, { fetchPolicy: 'cache-first' });\n        }\n        return this.queryManager.watchQuery(options);\n    };\n    ApolloClient.prototype.query = function (options) {\n        if (this.defaultOptions.query) {\n            options = __assign({}, this.defaultOptions.query, options);\n        }\n        process.env.NODE_ENV === \"production\" ? invariant(options.fetchPolicy !== 'cache-and-network', 2) : invariant(options.fetchPolicy !== 'cache-and-network', 'The cache-and-network fetchPolicy does not work with client.query, because ' +\n            'client.query can only return a single result. Please use client.watchQuery ' +\n            'to receive multiple results from the cache and the network, or consider ' +\n            'using a different fetchPolicy, such as cache-first or network-only.');\n        if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {\n            options = __assign({}, options, { fetchPolicy: 'cache-first' });\n        }\n        return this.queryManager.query(options);\n    };\n    ApolloClient.prototype.mutate = function (options) {\n        if (this.defaultOptions.mutate) {\n            options = __assign({}, this.defaultOptions.mutate, options);\n        }\n        return this.queryManager.mutate(options);\n    };\n    ApolloClient.prototype.subscribe = function (options) {\n        return this.queryManager.startGraphQLSubscription(options);\n    };\n    ApolloClient.prototype.readQuery = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.cache.readQuery(options, optimistic);\n    };\n    ApolloClient.prototype.readFragment = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.cache.readFragment(options, optimistic);\n    };\n    ApolloClient.prototype.writeQuery = function (options) {\n        var result = this.cache.writeQuery(options);\n        this.queryManager.broadcastQueries();\n        return result;\n    };\n    ApolloClient.prototype.writeFragment = function (options) {\n        var result = this.cache.writeFragment(options);\n        this.queryManager.broadcastQueries();\n        return result;\n    };\n    ApolloClient.prototype.writeData = function (options) {\n        var result = this.cache.writeData(options);\n        this.queryManager.broadcastQueries();\n        return result;\n    };\n    ApolloClient.prototype.__actionHookForDevTools = function (cb) {\n        this.devToolsHookCb = cb;\n    };\n    ApolloClient.prototype.__requestRaw = function (payload) {\n        return execute(this.link, payload);\n    };\n    ApolloClient.prototype.initQueryManager = function () {\n        process.env.NODE_ENV === \"production\" || invariant.warn('Calling the initQueryManager method is no longer necessary, ' +\n            'and it will be removed from ApolloClient in version 3.0.');\n        return this.queryManager;\n    };\n    ApolloClient.prototype.resetStore = function () {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () { return _this.queryManager.clearStore(); })\n            .then(function () { return Promise.all(_this.resetStoreCallbacks.map(function (fn) { return fn(); })); })\n            .then(function () { return _this.reFetchObservableQueries(); });\n    };\n    ApolloClient.prototype.clearStore = function () {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () { return _this.queryManager.clearStore(); })\n            .then(function () { return Promise.all(_this.clearStoreCallbacks.map(function (fn) { return fn(); })); });\n    };\n    ApolloClient.prototype.onResetStore = function (cb) {\n        var _this = this;\n        this.resetStoreCallbacks.push(cb);\n        return function () {\n            _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function (c) { return c !== cb; });\n        };\n    };\n    ApolloClient.prototype.onClearStore = function (cb) {\n        var _this = this;\n        this.clearStoreCallbacks.push(cb);\n        return function () {\n            _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function (c) { return c !== cb; });\n        };\n    };\n    ApolloClient.prototype.reFetchObservableQueries = function (includeStandby) {\n        return this.queryManager.reFetchObservableQueries(includeStandby);\n    };\n    ApolloClient.prototype.extract = function (optimistic) {\n        return this.cache.extract(optimistic);\n    };\n    ApolloClient.prototype.restore = function (serializedState) {\n        return this.cache.restore(serializedState);\n    };\n    ApolloClient.prototype.addResolvers = function (resolvers) {\n        this.localState.addResolvers(resolvers);\n    };\n    ApolloClient.prototype.setResolvers = function (resolvers) {\n        this.localState.setResolvers(resolvers);\n    };\n    ApolloClient.prototype.getResolvers = function () {\n        return this.localState.getResolvers();\n    };\n    ApolloClient.prototype.setLocalStateFragmentMatcher = function (fragmentMatcher) {\n        this.localState.setFragmentMatcher(fragmentMatcher);\n    };\n    return ApolloClient;\n}());\n\nexport default ApolloClient;\nexport { ApolloClient, ApolloError, FetchType, NetworkStatus, ObservableQuery, isApolloError };\n//# sourceMappingURL=bundle.esm.js.map\n","import { getFragmentQueryDocument } from 'apollo-utilities';\n\nfunction queryFromPojo(obj) {\n    var op = {\n        kind: 'OperationDefinition',\n        operation: 'query',\n        name: {\n            kind: 'Name',\n            value: 'GeneratedClientQuery',\n        },\n        selectionSet: selectionSetFromObj(obj),\n    };\n    var out = {\n        kind: 'Document',\n        definitions: [op],\n    };\n    return out;\n}\nfunction fragmentFromPojo(obj, typename) {\n    var frag = {\n        kind: 'FragmentDefinition',\n        typeCondition: {\n            kind: 'NamedType',\n            name: {\n                kind: 'Name',\n                value: typename || '__FakeType',\n            },\n        },\n        name: {\n            kind: 'Name',\n            value: 'GeneratedClientQuery',\n        },\n        selectionSet: selectionSetFromObj(obj),\n    };\n    var out = {\n        kind: 'Document',\n        definitions: [frag],\n    };\n    return out;\n}\nfunction selectionSetFromObj(obj) {\n    if (typeof obj === 'number' ||\n        typeof obj === 'boolean' ||\n        typeof obj === 'string' ||\n        typeof obj === 'undefined' ||\n        obj === null) {\n        return null;\n    }\n    if (Array.isArray(obj)) {\n        return selectionSetFromObj(obj[0]);\n    }\n    var selections = [];\n    Object.keys(obj).forEach(function (key) {\n        var nestedSelSet = selectionSetFromObj(obj[key]);\n        var field = {\n            kind: 'Field',\n            name: {\n                kind: 'Name',\n                value: key,\n            },\n            selectionSet: nestedSelSet || undefined,\n        };\n        selections.push(field);\n    });\n    var selectionSet = {\n        kind: 'SelectionSet',\n        selections: selections,\n    };\n    return selectionSet;\n}\nvar justTypenameQuery = {\n    kind: 'Document',\n    definitions: [\n        {\n            kind: 'OperationDefinition',\n            operation: 'query',\n            name: null,\n            variableDefinitions: null,\n            directives: [],\n            selectionSet: {\n                kind: 'SelectionSet',\n                selections: [\n                    {\n                        kind: 'Field',\n                        alias: null,\n                        name: {\n                            kind: 'Name',\n                            value: '__typename',\n                        },\n                        arguments: [],\n                        directives: [],\n                        selectionSet: null,\n                    },\n                ],\n            },\n        },\n    ],\n};\n\nvar ApolloCache = (function () {\n    function ApolloCache() {\n    }\n    ApolloCache.prototype.transformDocument = function (document) {\n        return document;\n    };\n    ApolloCache.prototype.transformForLink = function (document) {\n        return document;\n    };\n    ApolloCache.prototype.readQuery = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.read({\n            query: options.query,\n            variables: options.variables,\n            optimistic: optimistic,\n        });\n    };\n    ApolloCache.prototype.readFragment = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.read({\n            query: getFragmentQueryDocument(options.fragment, options.fragmentName),\n            variables: options.variables,\n            rootId: options.id,\n            optimistic: optimistic,\n        });\n    };\n    ApolloCache.prototype.writeQuery = function (options) {\n        this.write({\n            dataId: 'ROOT_QUERY',\n            result: options.data,\n            query: options.query,\n            variables: options.variables,\n        });\n    };\n    ApolloCache.prototype.writeFragment = function (options) {\n        this.write({\n            dataId: options.id,\n            result: options.data,\n            variables: options.variables,\n            query: getFragmentQueryDocument(options.fragment, options.fragmentName),\n        });\n    };\n    ApolloCache.prototype.writeData = function (_a) {\n        var id = _a.id, data = _a.data;\n        if (typeof id !== 'undefined') {\n            var typenameResult = null;\n            try {\n                typenameResult = this.read({\n                    rootId: id,\n                    optimistic: false,\n                    query: justTypenameQuery,\n                });\n            }\n            catch (e) {\n            }\n            var __typename = (typenameResult && typenameResult.__typename) || '__ClientData';\n            var dataToWrite = Object.assign({ __typename: __typename }, data);\n            this.writeFragment({\n                id: id,\n                fragment: fragmentFromPojo(dataToWrite, __typename),\n                data: dataToWrite,\n            });\n        }\n        else {\n            this.writeQuery({ query: queryFromPojo(data), data: data });\n        }\n    };\n    return ApolloCache;\n}());\n\nvar Cache;\n(function (Cache) {\n})(Cache || (Cache = {}));\n\nexport { ApolloCache, Cache };\n//# sourceMappingURL=bundle.esm.js.map\n","// This currentContext variable will only be used if the makeSlotClass\r\n// function is called, which happens only if this is the first copy of the\r\n// @wry/context package to be imported.\r\nvar currentContext = null;\r\n// This unique internal object is used to denote the absence of a value\r\n// for a given Slot, and is never exposed to outside code.\r\nvar MISSING_VALUE = {};\r\nvar idCounter = 1;\r\n// Although we can't do anything about the cost of duplicated code from\r\n// accidentally bundling multiple copies of the @wry/context package, we can\r\n// avoid creating the Slot class more than once using makeSlotClass.\r\nvar makeSlotClass = function () { return /** @class */ (function () {\r\n    function Slot() {\r\n        // If you have a Slot object, you can find out its slot.id, but you cannot\r\n        // guess the slot.id of a Slot you don't have access to, thanks to the\r\n        // randomized suffix.\r\n        this.id = [\r\n            \"slot\",\r\n            idCounter++,\r\n            Date.now(),\r\n            Math.random().toString(36).slice(2),\r\n        ].join(\":\");\r\n    }\r\n    Slot.prototype.hasValue = function () {\r\n        for (var context_1 = currentContext; context_1; context_1 = context_1.parent) {\r\n            // We use the Slot object iself as a key to its value, which means the\r\n            // value cannot be obtained without a reference to the Slot object.\r\n            if (this.id in context_1.slots) {\r\n                var value = context_1.slots[this.id];\r\n                if (value === MISSING_VALUE)\r\n                    break;\r\n                if (context_1 !== currentContext) {\r\n                    // Cache the value in currentContext.slots so the next lookup will\r\n                    // be faster. This caching is safe because the tree of contexts and\r\n                    // the values of the slots are logically immutable.\r\n                    currentContext.slots[this.id] = value;\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n        if (currentContext) {\r\n            // If a value was not found for this Slot, it's never going to be found\r\n            // no matter how many times we look it up, so we might as well cache\r\n            // the absence of the value, too.\r\n            currentContext.slots[this.id] = MISSING_VALUE;\r\n        }\r\n        return false;\r\n    };\r\n    Slot.prototype.getValue = function () {\r\n        if (this.hasValue()) {\r\n            return currentContext.slots[this.id];\r\n        }\r\n    };\r\n    Slot.prototype.withValue = function (value, callback, \r\n    // Given the prevalence of arrow functions, specifying arguments is likely\r\n    // to be much more common than specifying `this`, hence this ordering:\r\n    args, thisArg) {\r\n        var _a;\r\n        var slots = (_a = {\r\n                __proto__: null\r\n            },\r\n            _a[this.id] = value,\r\n            _a);\r\n        var parent = currentContext;\r\n        currentContext = { parent: parent, slots: slots };\r\n        try {\r\n            // Function.prototype.apply allows the arguments array argument to be\r\n            // omitted or undefined, so args! is fine here.\r\n            return callback.apply(thisArg, args);\r\n        }\r\n        finally {\r\n            currentContext = parent;\r\n        }\r\n    };\r\n    // Capture the current context and wrap a callback function so that it\r\n    // reestablishes the captured context when called.\r\n    Slot.bind = function (callback) {\r\n        var context = currentContext;\r\n        return function () {\r\n            var saved = currentContext;\r\n            try {\r\n                currentContext = context;\r\n                return callback.apply(this, arguments);\r\n            }\r\n            finally {\r\n                currentContext = saved;\r\n            }\r\n        };\r\n    };\r\n    // Immediately run a callback function without any captured context.\r\n    Slot.noContext = function (callback, \r\n    // Given the prevalence of arrow functions, specifying arguments is likely\r\n    // to be much more common than specifying `this`, hence this ordering:\r\n    args, thisArg) {\r\n        if (currentContext) {\r\n            var saved = currentContext;\r\n            try {\r\n                currentContext = null;\r\n                // Function.prototype.apply allows the arguments array argument to be\r\n                // omitted or undefined, so args! is fine here.\r\n                return callback.apply(thisArg, args);\r\n            }\r\n            finally {\r\n                currentContext = saved;\r\n            }\r\n        }\r\n        else {\r\n            return callback.apply(thisArg, args);\r\n        }\r\n    };\r\n    return Slot;\r\n}()); };\r\n// We store a single global implementation of the Slot class as a permanent\r\n// non-enumerable symbol property of the Array constructor. This obfuscation\r\n// does nothing to prevent access to the Slot class, but at least it ensures\r\n// the implementation (i.e. currentContext) cannot be tampered with, and all\r\n// copies of the @wry/context package (hopefully just one) will share the\r\n// same Slot implementation. Since the first copy of the @wry/context package\r\n// to be imported wins, this technique imposes a very high cost for any\r\n// future breaking changes to the Slot class.\r\nvar globalKey = \"@wry/context:Slot\";\r\nvar host = Array;\r\nvar Slot = host[globalKey] || function () {\r\n    var Slot = makeSlotClass();\r\n    try {\r\n        Object.defineProperty(host, globalKey, {\r\n            value: host[globalKey] = Slot,\r\n            enumerable: false,\r\n            writable: false,\r\n            configurable: false,\r\n        });\r\n    }\r\n    finally {\r\n        return Slot;\r\n    }\r\n}();\n\nvar bind = Slot.bind, noContext = Slot.noContext;\r\nfunction setTimeoutWithContext(callback, delay) {\r\n    return setTimeout(bind(callback), delay);\r\n}\r\n// Turn any generator function into an async function (using yield instead\r\n// of await), with context automatically preserved across yields.\r\nfunction asyncFromGen(genFn) {\r\n    return function () {\r\n        var gen = genFn.apply(this, arguments);\r\n        var boundNext = bind(gen.next);\r\n        var boundThrow = bind(gen.throw);\r\n        return new Promise(function (resolve, reject) {\r\n            function invoke(method, argument) {\r\n                try {\r\n                    var result = method.call(gen, argument);\r\n                }\r\n                catch (error) {\r\n                    return reject(error);\r\n                }\r\n                var next = result.done ? resolve : invokeNext;\r\n                if (isPromiseLike(result.value)) {\r\n                    result.value.then(next, result.done ? reject : invokeThrow);\r\n                }\r\n                else {\r\n                    next(result.value);\r\n                }\r\n            }\r\n            var invokeNext = function (value) { return invoke(boundNext, value); };\r\n            var invokeThrow = function (error) { return invoke(boundThrow, error); };\r\n            invokeNext();\r\n        });\r\n    };\r\n}\r\nfunction isPromiseLike(value) {\r\n    return value && typeof value.then === \"function\";\r\n}\r\n// If you use the fibers npm package to implement coroutines in Node.js,\r\n// you should call this function at least once to ensure context management\r\n// remains coherent across any yields.\r\nvar wrappedFibers = [];\r\nfunction wrapYieldingFiberMethods(Fiber) {\r\n    // There can be only one implementation of Fiber per process, so this array\r\n    // should never grow longer than one element.\r\n    if (wrappedFibers.indexOf(Fiber) < 0) {\r\n        var wrap = function (obj, method) {\r\n            var fn = obj[method];\r\n            obj[method] = function () {\r\n                return noContext(fn, arguments, this);\r\n            };\r\n        };\r\n        // These methods can yield, according to\r\n        // https://github.com/laverdet/node-fibers/blob/ddebed9b8ae3883e57f822e2108e6943e5c8d2a8/fibers.js#L97-L100\r\n        wrap(Fiber, \"yield\");\r\n        wrap(Fiber.prototype, \"run\");\r\n        wrap(Fiber.prototype, \"throwInto\");\r\n        wrappedFibers.push(Fiber);\r\n    }\r\n    return Fiber;\r\n}\n\nexport { Slot, asyncFromGen, bind, noContext, setTimeoutWithContext as setTimeout, wrapYieldingFiberMethods };\n//# sourceMappingURL=context.esm.js.map\n","import { Slot } from '@wry/context';\nexport { asyncFromGen, bind as bindContext, noContext, setTimeout } from '@wry/context';\n\nfunction defaultDispose() { }\r\nvar Cache = /** @class */ (function () {\r\n    function Cache(max, dispose) {\r\n        if (max === void 0) { max = Infinity; }\r\n        if (dispose === void 0) { dispose = defaultDispose; }\r\n        this.max = max;\r\n        this.dispose = dispose;\r\n        this.map = new Map();\r\n        this.newest = null;\r\n        this.oldest = null;\r\n    }\r\n    Cache.prototype.has = function (key) {\r\n        return this.map.has(key);\r\n    };\r\n    Cache.prototype.get = function (key) {\r\n        var entry = this.getEntry(key);\r\n        return entry && entry.value;\r\n    };\r\n    Cache.prototype.getEntry = function (key) {\r\n        var entry = this.map.get(key);\r\n        if (entry && entry !== this.newest) {\r\n            var older = entry.older, newer = entry.newer;\r\n            if (newer) {\r\n                newer.older = older;\r\n            }\r\n            if (older) {\r\n                older.newer = newer;\r\n            }\r\n            entry.older = this.newest;\r\n            entry.older.newer = entry;\r\n            entry.newer = null;\r\n            this.newest = entry;\r\n            if (entry === this.oldest) {\r\n                this.oldest = newer;\r\n            }\r\n        }\r\n        return entry;\r\n    };\r\n    Cache.prototype.set = function (key, value) {\r\n        var entry = this.getEntry(key);\r\n        if (entry) {\r\n            return entry.value = value;\r\n        }\r\n        entry = {\r\n            key: key,\r\n            value: value,\r\n            newer: null,\r\n            older: this.newest\r\n        };\r\n        if (this.newest) {\r\n            this.newest.newer = entry;\r\n        }\r\n        this.newest = entry;\r\n        this.oldest = this.oldest || entry;\r\n        this.map.set(key, entry);\r\n        return entry.value;\r\n    };\r\n    Cache.prototype.clean = function () {\r\n        while (this.oldest && this.map.size > this.max) {\r\n            this.delete(this.oldest.key);\r\n        }\r\n    };\r\n    Cache.prototype.delete = function (key) {\r\n        var entry = this.map.get(key);\r\n        if (entry) {\r\n            if (entry === this.newest) {\r\n                this.newest = entry.older;\r\n            }\r\n            if (entry === this.oldest) {\r\n                this.oldest = entry.newer;\r\n            }\r\n            if (entry.newer) {\r\n                entry.newer.older = entry.older;\r\n            }\r\n            if (entry.older) {\r\n                entry.older.newer = entry.newer;\r\n            }\r\n            this.map.delete(key);\r\n            this.dispose(entry.value, key);\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    return Cache;\r\n}());\n\nvar parentEntrySlot = new Slot();\n\nvar reusableEmptyArray = [];\r\nvar emptySetPool = [];\r\nvar POOL_TARGET_SIZE = 100;\r\n// Since this package might be used browsers, we should avoid using the\r\n// Node built-in assert module.\r\nfunction assert(condition, optionalMessage) {\r\n    if (!condition) {\r\n        throw new Error(optionalMessage || \"assertion failure\");\r\n    }\r\n}\r\nfunction valueIs(a, b) {\r\n    var len = a.length;\r\n    return (\r\n    // Unknown values are not equal to each other.\r\n    len > 0 &&\r\n        // Both values must be ordinary (or both exceptional) to be equal.\r\n        len === b.length &&\r\n        // The underlying value or exception must be the same.\r\n        a[len - 1] === b[len - 1]);\r\n}\r\nfunction valueGet(value) {\r\n    switch (value.length) {\r\n        case 0: throw new Error(\"unknown value\");\r\n        case 1: return value[0];\r\n        case 2: throw value[1];\r\n    }\r\n}\r\nfunction valueCopy(value) {\r\n    return value.slice(0);\r\n}\r\nvar Entry = /** @class */ (function () {\r\n    function Entry(fn, args) {\r\n        this.fn = fn;\r\n        this.args = args;\r\n        this.parents = new Set();\r\n        this.childValues = new Map();\r\n        // When this Entry has children that are dirty, this property becomes\r\n        // a Set containing other Entry objects, borrowed from emptySetPool.\r\n        // When the set becomes empty, it gets recycled back to emptySetPool.\r\n        this.dirtyChildren = null;\r\n        this.dirty = true;\r\n        this.recomputing = false;\r\n        this.value = [];\r\n        ++Entry.count;\r\n    }\r\n    // This is the most important method of the Entry API, because it\r\n    // determines whether the cached this.value can be returned immediately,\r\n    // or must be recomputed. The overall performance of the caching system\r\n    // depends on the truth of the following observations: (1) this.dirty is\r\n    // usually false, (2) this.dirtyChildren is usually null/empty, and thus\r\n    // (3) valueGet(this.value) is usually returned without recomputation.\r\n    Entry.prototype.recompute = function () {\r\n        assert(!this.recomputing, \"already recomputing\");\r\n        if (!rememberParent(this) && maybeReportOrphan(this)) {\r\n            // The recipient of the entry.reportOrphan callback decided to dispose\r\n            // of this orphan entry by calling entry.dispose(), so we don't need to\r\n            // (and should not) proceed with the recomputation.\r\n            return void 0;\r\n        }\r\n        return mightBeDirty(this)\r\n            ? reallyRecompute(this)\r\n            : valueGet(this.value);\r\n    };\r\n    Entry.prototype.setDirty = function () {\r\n        if (this.dirty)\r\n            return;\r\n        this.dirty = true;\r\n        this.value.length = 0;\r\n        reportDirty(this);\r\n        // We can go ahead and unsubscribe here, since any further dirty\r\n        // notifications we receive will be redundant, and unsubscribing may\r\n        // free up some resources, e.g. file watchers.\r\n        maybeUnsubscribe(this);\r\n    };\r\n    Entry.prototype.dispose = function () {\r\n        var _this = this;\r\n        forgetChildren(this).forEach(maybeReportOrphan);\r\n        maybeUnsubscribe(this);\r\n        // Because this entry has been kicked out of the cache (in index.js),\r\n        // we've lost the ability to find out if/when this entry becomes dirty,\r\n        // whether that happens through a subscription, because of a direct call\r\n        // to entry.setDirty(), or because one of its children becomes dirty.\r\n        // Because of this loss of future information, we have to assume the\r\n        // worst (that this entry might have become dirty very soon), so we must\r\n        // immediately mark this entry's parents as dirty. Normally we could\r\n        // just call entry.setDirty() rather than calling parent.setDirty() for\r\n        // each parent, but that would leave this entry in parent.childValues\r\n        // and parent.dirtyChildren, which would prevent the child from being\r\n        // truly forgotten.\r\n        this.parents.forEach(function (parent) {\r\n            parent.setDirty();\r\n            forgetChild(parent, _this);\r\n        });\r\n    };\r\n    Entry.count = 0;\r\n    return Entry;\r\n}());\r\nfunction rememberParent(child) {\r\n    var parent = parentEntrySlot.getValue();\r\n    if (parent) {\r\n        child.parents.add(parent);\r\n        if (!parent.childValues.has(child)) {\r\n            parent.childValues.set(child, []);\r\n        }\r\n        if (mightBeDirty(child)) {\r\n            reportDirtyChild(parent, child);\r\n        }\r\n        else {\r\n            reportCleanChild(parent, child);\r\n        }\r\n        return parent;\r\n    }\r\n}\r\nfunction reallyRecompute(entry) {\r\n    // Since this recomputation is likely to re-remember some of this\r\n    // entry's children, we forget our children here but do not call\r\n    // maybeReportOrphan until after the recomputation finishes.\r\n    var originalChildren = forgetChildren(entry);\r\n    // Set entry as the parent entry while calling recomputeNewValue(entry).\r\n    parentEntrySlot.withValue(entry, recomputeNewValue, [entry]);\r\n    if (maybeSubscribe(entry)) {\r\n        // If we successfully recomputed entry.value and did not fail to\r\n        // (re)subscribe, then this Entry is no longer explicitly dirty.\r\n        setClean(entry);\r\n    }\r\n    // Now that we've had a chance to re-remember any children that were\r\n    // involved in the recomputation, we can safely report any orphan\r\n    // children that remain.\r\n    originalChildren.forEach(maybeReportOrphan);\r\n    return valueGet(entry.value);\r\n}\r\nfunction recomputeNewValue(entry) {\r\n    entry.recomputing = true;\r\n    // Set entry.value as unknown.\r\n    entry.value.length = 0;\r\n    try {\r\n        // If entry.fn succeeds, entry.value will become a normal Value.\r\n        entry.value[0] = entry.fn.apply(null, entry.args);\r\n    }\r\n    catch (e) {\r\n        // If entry.fn throws, entry.value will become exceptional.\r\n        entry.value[1] = e;\r\n    }\r\n    // Either way, this line is always reached.\r\n    entry.recomputing = false;\r\n}\r\nfunction mightBeDirty(entry) {\r\n    return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);\r\n}\r\nfunction setClean(entry) {\r\n    entry.dirty = false;\r\n    if (mightBeDirty(entry)) {\r\n        // This Entry may still have dirty children, in which case we can't\r\n        // let our parents know we're clean just yet.\r\n        return;\r\n    }\r\n    reportClean(entry);\r\n}\r\nfunction reportDirty(child) {\r\n    child.parents.forEach(function (parent) { return reportDirtyChild(parent, child); });\r\n}\r\nfunction reportClean(child) {\r\n    child.parents.forEach(function (parent) { return reportCleanChild(parent, child); });\r\n}\r\n// Let a parent Entry know that one of its children may be dirty.\r\nfunction reportDirtyChild(parent, child) {\r\n    // Must have called rememberParent(child) before calling\r\n    // reportDirtyChild(parent, child).\r\n    assert(parent.childValues.has(child));\r\n    assert(mightBeDirty(child));\r\n    if (!parent.dirtyChildren) {\r\n        parent.dirtyChildren = emptySetPool.pop() || new Set;\r\n    }\r\n    else if (parent.dirtyChildren.has(child)) {\r\n        // If we already know this child is dirty, then we must have already\r\n        // informed our own parents that we are dirty, so we can terminate\r\n        // the recursion early.\r\n        return;\r\n    }\r\n    parent.dirtyChildren.add(child);\r\n    reportDirty(parent);\r\n}\r\n// Let a parent Entry know that one of its children is no longer dirty.\r\nfunction reportCleanChild(parent, child) {\r\n    // Must have called rememberChild(child) before calling\r\n    // reportCleanChild(parent, child).\r\n    assert(parent.childValues.has(child));\r\n    assert(!mightBeDirty(child));\r\n    var childValue = parent.childValues.get(child);\r\n    if (childValue.length === 0) {\r\n        parent.childValues.set(child, valueCopy(child.value));\r\n    }\r\n    else if (!valueIs(childValue, child.value)) {\r\n        parent.setDirty();\r\n    }\r\n    removeDirtyChild(parent, child);\r\n    if (mightBeDirty(parent)) {\r\n        return;\r\n    }\r\n    reportClean(parent);\r\n}\r\nfunction removeDirtyChild(parent, child) {\r\n    var dc = parent.dirtyChildren;\r\n    if (dc) {\r\n        dc.delete(child);\r\n        if (dc.size === 0) {\r\n            if (emptySetPool.length < POOL_TARGET_SIZE) {\r\n                emptySetPool.push(dc);\r\n            }\r\n            parent.dirtyChildren = null;\r\n        }\r\n    }\r\n}\r\n// If the given entry has a reportOrphan method, and no remaining parents,\r\n// call entry.reportOrphan and return true iff it returns true. The\r\n// reportOrphan function should return true to indicate entry.dispose()\r\n// has been called, and the entry has been removed from any other caches\r\n// (see index.js for the only current example).\r\nfunction maybeReportOrphan(entry) {\r\n    return entry.parents.size === 0 &&\r\n        typeof entry.reportOrphan === \"function\" &&\r\n        entry.reportOrphan() === true;\r\n}\r\n// Removes all children from this entry and returns an array of the\r\n// removed children.\r\nfunction forgetChildren(parent) {\r\n    var children = reusableEmptyArray;\r\n    if (parent.childValues.size > 0) {\r\n        children = [];\r\n        parent.childValues.forEach(function (_value, child) {\r\n            forgetChild(parent, child);\r\n            children.push(child);\r\n        });\r\n    }\r\n    // After we forget all our children, this.dirtyChildren must be empty\r\n    // and therefore must have been reset to null.\r\n    assert(parent.dirtyChildren === null);\r\n    return children;\r\n}\r\nfunction forgetChild(parent, child) {\r\n    child.parents.delete(parent);\r\n    parent.childValues.delete(child);\r\n    removeDirtyChild(parent, child);\r\n}\r\nfunction maybeSubscribe(entry) {\r\n    if (typeof entry.subscribe === \"function\") {\r\n        try {\r\n            maybeUnsubscribe(entry); // Prevent double subscriptions.\r\n            entry.unsubscribe = entry.subscribe.apply(null, entry.args);\r\n        }\r\n        catch (e) {\r\n            // If this Entry has a subscribe function and it threw an exception\r\n            // (or an unsubscribe function it previously returned now throws),\r\n            // return false to indicate that we were not able to subscribe (or\r\n            // unsubscribe), and this Entry should remain dirty.\r\n            entry.setDirty();\r\n            return false;\r\n        }\r\n    }\r\n    // Returning true indicates either that there was no entry.subscribe\r\n    // function or that it succeeded.\r\n    return true;\r\n}\r\nfunction maybeUnsubscribe(entry) {\r\n    var unsubscribe = entry.unsubscribe;\r\n    if (typeof unsubscribe === \"function\") {\r\n        entry.unsubscribe = void 0;\r\n        unsubscribe();\r\n    }\r\n}\n\n// A trie data structure that holds object keys weakly, yet can also hold\r\n// non-object keys, unlike the native `WeakMap`.\r\nvar KeyTrie = /** @class */ (function () {\r\n    function KeyTrie(weakness) {\r\n        this.weakness = weakness;\r\n    }\r\n    KeyTrie.prototype.lookup = function () {\r\n        var array = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            array[_i] = arguments[_i];\r\n        }\r\n        return this.lookupArray(array);\r\n    };\r\n    KeyTrie.prototype.lookupArray = function (array) {\r\n        var node = this;\r\n        array.forEach(function (key) { return node = node.getChildTrie(key); });\r\n        return node.data || (node.data = Object.create(null));\r\n    };\r\n    KeyTrie.prototype.getChildTrie = function (key) {\r\n        var map = this.weakness && isObjRef(key)\r\n            ? this.weak || (this.weak = new WeakMap())\r\n            : this.strong || (this.strong = new Map());\r\n        var child = map.get(key);\r\n        if (!child)\r\n            map.set(key, child = new KeyTrie(this.weakness));\r\n        return child;\r\n    };\r\n    return KeyTrie;\r\n}());\r\nfunction isObjRef(value) {\r\n    switch (typeof value) {\r\n        case \"object\":\r\n            if (value === null)\r\n                break;\r\n        // Fall through to return true...\r\n        case \"function\":\r\n            return true;\r\n    }\r\n    return false;\r\n}\n\n// The defaultMakeCacheKey function is remarkably powerful, because it gives\r\n// a unique object for any shallow-identical list of arguments. If you need\r\n// to implement a custom makeCacheKey function, you may find it helpful to\r\n// delegate the final work to defaultMakeCacheKey, which is why we export it\r\n// here. However, you may want to avoid defaultMakeCacheKey if your runtime\r\n// does not support WeakMap, or you have the ability to return a string key.\r\n// In those cases, just write your own custom makeCacheKey functions.\r\nvar keyTrie = new KeyTrie(typeof WeakMap === \"function\");\r\nfunction defaultMakeCacheKey() {\r\n    var args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        args[_i] = arguments[_i];\r\n    }\r\n    return keyTrie.lookupArray(args);\r\n}\r\nvar caches = new Set();\r\nfunction wrap(originalFunction, options) {\r\n    if (options === void 0) { options = Object.create(null); }\r\n    var cache = new Cache(options.max || Math.pow(2, 16), function (entry) { return entry.dispose(); });\r\n    var disposable = !!options.disposable;\r\n    var makeCacheKey = options.makeCacheKey || defaultMakeCacheKey;\r\n    function optimistic() {\r\n        if (disposable && !parentEntrySlot.hasValue()) {\r\n            // If there's no current parent computation, and this wrapped\r\n            // function is disposable (meaning we don't care about entry.value,\r\n            // just dependency tracking), then we can short-cut everything else\r\n            // in this function, because entry.recompute() is going to recycle\r\n            // the entry object without recomputing anything, anyway.\r\n            return void 0;\r\n        }\r\n        var key = makeCacheKey.apply(null, arguments);\r\n        if (key === void 0) {\r\n            return originalFunction.apply(null, arguments);\r\n        }\r\n        var args = Array.prototype.slice.call(arguments);\r\n        var entry = cache.get(key);\r\n        if (entry) {\r\n            entry.args = args;\r\n        }\r\n        else {\r\n            entry = new Entry(originalFunction, args);\r\n            cache.set(key, entry);\r\n            entry.subscribe = options.subscribe;\r\n            if (disposable) {\r\n                entry.reportOrphan = function () { return cache.delete(key); };\r\n            }\r\n        }\r\n        var value = entry.recompute();\r\n        // Move this entry to the front of the least-recently used queue,\r\n        // since we just finished computing its value.\r\n        cache.set(key, entry);\r\n        caches.add(cache);\r\n        // Clean up any excess entries in the cache, but only if there is no\r\n        // active parent entry, meaning we're not in the middle of a larger\r\n        // computation that might be flummoxed by the cleaning.\r\n        if (!parentEntrySlot.hasValue()) {\r\n            caches.forEach(function (cache) { return cache.clean(); });\r\n            caches.clear();\r\n        }\r\n        // If options.disposable is truthy, the caller of wrap is telling us\r\n        // they don't care about the result of entry.recompute(), so we should\r\n        // avoid returning the value, so it won't be accidentally used.\r\n        return disposable ? void 0 : value;\r\n    }\r\n    optimistic.dirty = function () {\r\n        var key = makeCacheKey.apply(null, arguments);\r\n        var child = key !== void 0 && cache.get(key);\r\n        if (child) {\r\n            child.setDirty();\r\n        }\r\n    };\r\n    return optimistic;\r\n}\n\nexport { KeyTrie, defaultMakeCacheKey, wrap };\n//# sourceMappingURL=bundle.esm.js.map\n","import { __assign, __extends } from 'tslib';\nimport { ApolloCache } from 'apollo-cache';\nimport { isTest, getQueryDefinition, assign, getDefaultValues, isEqual, getMainDefinition, getFragmentDefinitions, createFragmentMap, shouldInclude, isField, resultKeyNameFromField, isInlineFragment, mergeDeepArray, argumentsObjectFromField, getDirectiveInfoFromField, maybeDeepFreeze, isIdValue, getStoreKeyName, toIdValue, isJsonValue, canUseWeakMap, getOperationDefinition, isProduction, storeKeyNameFromField, addTypenameToDocument } from 'apollo-utilities';\nimport { wrap, KeyTrie } from 'optimism';\nimport { invariant, InvariantError } from 'ts-invariant';\n\nvar haveWarned = false;\nfunction shouldWarn() {\n    var answer = !haveWarned;\n    if (!isTest()) {\n        haveWarned = true;\n    }\n    return answer;\n}\nvar HeuristicFragmentMatcher = (function () {\n    function HeuristicFragmentMatcher() {\n    }\n    HeuristicFragmentMatcher.prototype.ensureReady = function () {\n        return Promise.resolve();\n    };\n    HeuristicFragmentMatcher.prototype.canBypassInit = function () {\n        return true;\n    };\n    HeuristicFragmentMatcher.prototype.match = function (idValue, typeCondition, context) {\n        var obj = context.store.get(idValue.id);\n        var isRootQuery = idValue.id === 'ROOT_QUERY';\n        if (!obj) {\n            return isRootQuery;\n        }\n        var _a = obj.__typename, __typename = _a === void 0 ? isRootQuery && 'Query' : _a;\n        if (!__typename) {\n            if (shouldWarn()) {\n                process.env.NODE_ENV === \"production\" || invariant.warn(\"You're using fragments in your queries, but either don't have the addTypename:\\n  true option set in Apollo Client, or you are trying to write a fragment to the store without the __typename.\\n   Please turn on the addTypename option and include __typename when writing fragments so that Apollo Client\\n   can accurately match fragments.\");\n                process.env.NODE_ENV === \"production\" || invariant.warn('Could not find __typename on Fragment ', typeCondition, obj);\n                process.env.NODE_ENV === \"production\" || invariant.warn(\"DEPRECATION WARNING: using fragments without __typename is unsupported behavior \" +\n                    \"and will be removed in future versions of Apollo client. You should fix this and set addTypename to true now.\");\n            }\n            return 'heuristic';\n        }\n        if (__typename === typeCondition) {\n            return true;\n        }\n        if (shouldWarn()) {\n            process.env.NODE_ENV === \"production\" || invariant.error('You are using the simple (heuristic) fragment matcher, but your ' +\n                'queries contain union or interface types. Apollo Client will not be ' +\n                'able to accurately map fragments. To make this error go away, use ' +\n                'the `IntrospectionFragmentMatcher` as described in the docs: ' +\n                'https://www.apollographql.com/docs/react/advanced/fragments.html#fragment-matcher');\n        }\n        return 'heuristic';\n    };\n    return HeuristicFragmentMatcher;\n}());\nvar IntrospectionFragmentMatcher = (function () {\n    function IntrospectionFragmentMatcher(options) {\n        if (options && options.introspectionQueryResultData) {\n            this.possibleTypesMap = this.parseIntrospectionResult(options.introspectionQueryResultData);\n            this.isReady = true;\n        }\n        else {\n            this.isReady = false;\n        }\n        this.match = this.match.bind(this);\n    }\n    IntrospectionFragmentMatcher.prototype.match = function (idValue, typeCondition, context) {\n        process.env.NODE_ENV === \"production\" ? invariant(this.isReady, 6) : invariant(this.isReady, 'FragmentMatcher.match() was called before FragmentMatcher.init()');\n        var obj = context.store.get(idValue.id);\n        var isRootQuery = idValue.id === 'ROOT_QUERY';\n        if (!obj) {\n            return isRootQuery;\n        }\n        var _a = obj.__typename, __typename = _a === void 0 ? isRootQuery && 'Query' : _a;\n        process.env.NODE_ENV === \"production\" ? invariant(__typename, 7) : invariant(__typename, \"Cannot match fragment because __typename property is missing: \" + JSON.stringify(obj));\n        if (__typename === typeCondition) {\n            return true;\n        }\n        var implementingTypes = this.possibleTypesMap[typeCondition];\n        if (__typename &&\n            implementingTypes &&\n            implementingTypes.indexOf(__typename) > -1) {\n            return true;\n        }\n        return false;\n    };\n    IntrospectionFragmentMatcher.prototype.parseIntrospectionResult = function (introspectionResultData) {\n        var typeMap = {};\n        introspectionResultData.__schema.types.forEach(function (type) {\n            if (type.kind === 'UNION' || type.kind === 'INTERFACE') {\n                typeMap[type.name] = type.possibleTypes.map(function (implementingType) { return implementingType.name; });\n            }\n        });\n        return typeMap;\n    };\n    return IntrospectionFragmentMatcher;\n}());\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar DepTrackingCache = (function () {\n    function DepTrackingCache(data) {\n        var _this = this;\n        if (data === void 0) { data = Object.create(null); }\n        this.data = data;\n        this.depend = wrap(function (dataId) { return _this.data[dataId]; }, {\n            disposable: true,\n            makeCacheKey: function (dataId) {\n                return dataId;\n            },\n        });\n    }\n    DepTrackingCache.prototype.toObject = function () {\n        return this.data;\n    };\n    DepTrackingCache.prototype.get = function (dataId) {\n        this.depend(dataId);\n        return this.data[dataId];\n    };\n    DepTrackingCache.prototype.set = function (dataId, value) {\n        var oldValue = this.data[dataId];\n        if (value !== oldValue) {\n            this.data[dataId] = value;\n            this.depend.dirty(dataId);\n        }\n    };\n    DepTrackingCache.prototype.delete = function (dataId) {\n        if (hasOwn.call(this.data, dataId)) {\n            delete this.data[dataId];\n            this.depend.dirty(dataId);\n        }\n    };\n    DepTrackingCache.prototype.clear = function () {\n        this.replace(null);\n    };\n    DepTrackingCache.prototype.replace = function (newData) {\n        var _this = this;\n        if (newData) {\n            Object.keys(newData).forEach(function (dataId) {\n                _this.set(dataId, newData[dataId]);\n            });\n            Object.keys(this.data).forEach(function (dataId) {\n                if (!hasOwn.call(newData, dataId)) {\n                    _this.delete(dataId);\n                }\n            });\n        }\n        else {\n            Object.keys(this.data).forEach(function (dataId) {\n                _this.delete(dataId);\n            });\n        }\n    };\n    return DepTrackingCache;\n}());\nfunction defaultNormalizedCacheFactory(seed) {\n    return new DepTrackingCache(seed);\n}\n\nvar StoreReader = (function () {\n    function StoreReader(_a) {\n        var _this = this;\n        var _b = _a === void 0 ? {} : _a, _c = _b.cacheKeyRoot, cacheKeyRoot = _c === void 0 ? new KeyTrie(canUseWeakMap) : _c, _d = _b.freezeResults, freezeResults = _d === void 0 ? false : _d;\n        var _e = this, executeStoreQuery = _e.executeStoreQuery, executeSelectionSet = _e.executeSelectionSet, executeSubSelectedArray = _e.executeSubSelectedArray;\n        this.freezeResults = freezeResults;\n        this.executeStoreQuery = wrap(function (options) {\n            return executeStoreQuery.call(_this, options);\n        }, {\n            makeCacheKey: function (_a) {\n                var query = _a.query, rootValue = _a.rootValue, contextValue = _a.contextValue, variableValues = _a.variableValues, fragmentMatcher = _a.fragmentMatcher;\n                if (contextValue.store instanceof DepTrackingCache) {\n                    return cacheKeyRoot.lookup(contextValue.store, query, fragmentMatcher, JSON.stringify(variableValues), rootValue.id);\n                }\n            }\n        });\n        this.executeSelectionSet = wrap(function (options) {\n            return executeSelectionSet.call(_this, options);\n        }, {\n            makeCacheKey: function (_a) {\n                var selectionSet = _a.selectionSet, rootValue = _a.rootValue, execContext = _a.execContext;\n                if (execContext.contextValue.store instanceof DepTrackingCache) {\n                    return cacheKeyRoot.lookup(execContext.contextValue.store, selectionSet, execContext.fragmentMatcher, JSON.stringify(execContext.variableValues), rootValue.id);\n                }\n            }\n        });\n        this.executeSubSelectedArray = wrap(function (options) {\n            return executeSubSelectedArray.call(_this, options);\n        }, {\n            makeCacheKey: function (_a) {\n                var field = _a.field, array = _a.array, execContext = _a.execContext;\n                if (execContext.contextValue.store instanceof DepTrackingCache) {\n                    return cacheKeyRoot.lookup(execContext.contextValue.store, field, array, JSON.stringify(execContext.variableValues));\n                }\n            }\n        });\n    }\n    StoreReader.prototype.readQueryFromStore = function (options) {\n        return this.diffQueryAgainstStore(__assign({}, options, { returnPartialData: false })).result;\n    };\n    StoreReader.prototype.diffQueryAgainstStore = function (_a) {\n        var store = _a.store, query = _a.query, variables = _a.variables, previousResult = _a.previousResult, _b = _a.returnPartialData, returnPartialData = _b === void 0 ? true : _b, _c = _a.rootId, rootId = _c === void 0 ? 'ROOT_QUERY' : _c, fragmentMatcherFunction = _a.fragmentMatcherFunction, config = _a.config;\n        var queryDefinition = getQueryDefinition(query);\n        variables = assign({}, getDefaultValues(queryDefinition), variables);\n        var context = {\n            store: store,\n            dataIdFromObject: config && config.dataIdFromObject,\n            cacheRedirects: (config && config.cacheRedirects) || {},\n        };\n        var execResult = this.executeStoreQuery({\n            query: query,\n            rootValue: {\n                type: 'id',\n                id: rootId,\n                generated: true,\n                typename: 'Query',\n            },\n            contextValue: context,\n            variableValues: variables,\n            fragmentMatcher: fragmentMatcherFunction,\n        });\n        var hasMissingFields = execResult.missing && execResult.missing.length > 0;\n        if (hasMissingFields && !returnPartialData) {\n            execResult.missing.forEach(function (info) {\n                if (info.tolerable)\n                    return;\n                throw process.env.NODE_ENV === \"production\" ? new InvariantError(8) : new InvariantError(\"Can't find field \" + info.fieldName + \" on object \" + JSON.stringify(info.object, null, 2) + \".\");\n            });\n        }\n        if (previousResult) {\n            if (isEqual(previousResult, execResult.result)) {\n                execResult.result = previousResult;\n            }\n        }\n        return {\n            result: execResult.result,\n            complete: !hasMissingFields,\n        };\n    };\n    StoreReader.prototype.executeStoreQuery = function (_a) {\n        var query = _a.query, rootValue = _a.rootValue, contextValue = _a.contextValue, variableValues = _a.variableValues, _b = _a.fragmentMatcher, fragmentMatcher = _b === void 0 ? defaultFragmentMatcher : _b;\n        var mainDefinition = getMainDefinition(query);\n        var fragments = getFragmentDefinitions(query);\n        var fragmentMap = createFragmentMap(fragments);\n        var execContext = {\n            query: query,\n            fragmentMap: fragmentMap,\n            contextValue: contextValue,\n            variableValues: variableValues,\n            fragmentMatcher: fragmentMatcher,\n        };\n        return this.executeSelectionSet({\n            selectionSet: mainDefinition.selectionSet,\n            rootValue: rootValue,\n            execContext: execContext,\n        });\n    };\n    StoreReader.prototype.executeSelectionSet = function (_a) {\n        var _this = this;\n        var selectionSet = _a.selectionSet, rootValue = _a.rootValue, execContext = _a.execContext;\n        var fragmentMap = execContext.fragmentMap, contextValue = execContext.contextValue, variables = execContext.variableValues;\n        var finalResult = { result: null };\n        var objectsToMerge = [];\n        var object = contextValue.store.get(rootValue.id);\n        var typename = (object && object.__typename) ||\n            (rootValue.id === 'ROOT_QUERY' && 'Query') ||\n            void 0;\n        function handleMissing(result) {\n            var _a;\n            if (result.missing) {\n                finalResult.missing = finalResult.missing || [];\n                (_a = finalResult.missing).push.apply(_a, result.missing);\n            }\n            return result.result;\n        }\n        selectionSet.selections.forEach(function (selection) {\n            var _a;\n            if (!shouldInclude(selection, variables)) {\n                return;\n            }\n            if (isField(selection)) {\n                var fieldResult = handleMissing(_this.executeField(object, typename, selection, execContext));\n                if (typeof fieldResult !== 'undefined') {\n                    objectsToMerge.push((_a = {},\n                        _a[resultKeyNameFromField(selection)] = fieldResult,\n                        _a));\n                }\n            }\n            else {\n                var fragment = void 0;\n                if (isInlineFragment(selection)) {\n                    fragment = selection;\n                }\n                else {\n                    fragment = fragmentMap[selection.name.value];\n                    if (!fragment) {\n                        throw process.env.NODE_ENV === \"production\" ? new InvariantError(9) : new InvariantError(\"No fragment named \" + selection.name.value);\n                    }\n                }\n                var typeCondition = fragment.typeCondition && fragment.typeCondition.name.value;\n                var match = !typeCondition ||\n                    execContext.fragmentMatcher(rootValue, typeCondition, contextValue);\n                if (match) {\n                    var fragmentExecResult = _this.executeSelectionSet({\n                        selectionSet: fragment.selectionSet,\n                        rootValue: rootValue,\n                        execContext: execContext,\n                    });\n                    if (match === 'heuristic' && fragmentExecResult.missing) {\n                        fragmentExecResult = __assign({}, fragmentExecResult, { missing: fragmentExecResult.missing.map(function (info) {\n                                return __assign({}, info, { tolerable: true });\n                            }) });\n                    }\n                    objectsToMerge.push(handleMissing(fragmentExecResult));\n                }\n            }\n        });\n        finalResult.result = mergeDeepArray(objectsToMerge);\n        if (this.freezeResults && process.env.NODE_ENV !== 'production') {\n            Object.freeze(finalResult.result);\n        }\n        return finalResult;\n    };\n    StoreReader.prototype.executeField = function (object, typename, field, execContext) {\n        var variables = execContext.variableValues, contextValue = execContext.contextValue;\n        var fieldName = field.name.value;\n        var args = argumentsObjectFromField(field, variables);\n        var info = {\n            resultKey: resultKeyNameFromField(field),\n            directives: getDirectiveInfoFromField(field, variables),\n        };\n        var readStoreResult = readStoreResolver(object, typename, fieldName, args, contextValue, info);\n        if (Array.isArray(readStoreResult.result)) {\n            return this.combineExecResults(readStoreResult, this.executeSubSelectedArray({\n                field: field,\n                array: readStoreResult.result,\n                execContext: execContext,\n            }));\n        }\n        if (!field.selectionSet) {\n            assertSelectionSetForIdValue(field, readStoreResult.result);\n            if (this.freezeResults && process.env.NODE_ENV !== 'production') {\n                maybeDeepFreeze(readStoreResult);\n            }\n            return readStoreResult;\n        }\n        if (readStoreResult.result == null) {\n            return readStoreResult;\n        }\n        return this.combineExecResults(readStoreResult, this.executeSelectionSet({\n            selectionSet: field.selectionSet,\n            rootValue: readStoreResult.result,\n            execContext: execContext,\n        }));\n    };\n    StoreReader.prototype.combineExecResults = function () {\n        var execResults = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            execResults[_i] = arguments[_i];\n        }\n        var missing;\n        execResults.forEach(function (execResult) {\n            if (execResult.missing) {\n                missing = missing || [];\n                missing.push.apply(missing, execResult.missing);\n            }\n        });\n        return {\n            result: execResults.pop().result,\n            missing: missing,\n        };\n    };\n    StoreReader.prototype.executeSubSelectedArray = function (_a) {\n        var _this = this;\n        var field = _a.field, array = _a.array, execContext = _a.execContext;\n        var missing;\n        function handleMissing(childResult) {\n            if (childResult.missing) {\n                missing = missing || [];\n                missing.push.apply(missing, childResult.missing);\n            }\n            return childResult.result;\n        }\n        array = array.map(function (item) {\n            if (item === null) {\n                return null;\n            }\n            if (Array.isArray(item)) {\n                return handleMissing(_this.executeSubSelectedArray({\n                    field: field,\n                    array: item,\n                    execContext: execContext,\n                }));\n            }\n            if (field.selectionSet) {\n                return handleMissing(_this.executeSelectionSet({\n                    selectionSet: field.selectionSet,\n                    rootValue: item,\n                    execContext: execContext,\n                }));\n            }\n            assertSelectionSetForIdValue(field, item);\n            return item;\n        });\n        if (this.freezeResults && process.env.NODE_ENV !== 'production') {\n            Object.freeze(array);\n        }\n        return { result: array, missing: missing };\n    };\n    return StoreReader;\n}());\nfunction assertSelectionSetForIdValue(field, value) {\n    if (!field.selectionSet && isIdValue(value)) {\n        throw process.env.NODE_ENV === \"production\" ? new InvariantError(10) : new InvariantError(\"Missing selection set for object of type \" + value.typename + \" returned for query field \" + field.name.value);\n    }\n}\nfunction defaultFragmentMatcher() {\n    return true;\n}\nfunction assertIdValue(idValue) {\n    process.env.NODE_ENV === \"production\" ? invariant(isIdValue(idValue), 11) : invariant(isIdValue(idValue), \"Encountered a sub-selection on the query, but the store doesn't have an object reference. This should never happen during normal use unless you have custom code that is directly manipulating the store; please file an issue.\");\n}\nfunction readStoreResolver(object, typename, fieldName, args, context, _a) {\n    var resultKey = _a.resultKey, directives = _a.directives;\n    var storeKeyName = fieldName;\n    if (args || directives) {\n        storeKeyName = getStoreKeyName(storeKeyName, args, directives);\n    }\n    var fieldValue = void 0;\n    if (object) {\n        fieldValue = object[storeKeyName];\n        if (typeof fieldValue === 'undefined' &&\n            context.cacheRedirects &&\n            typeof typename === 'string') {\n            var type = context.cacheRedirects[typename];\n            if (type) {\n                var resolver = type[fieldName];\n                if (resolver) {\n                    fieldValue = resolver(object, args, {\n                        getCacheKey: function (storeObj) {\n                            var id = context.dataIdFromObject(storeObj);\n                            return id && toIdValue({\n                                id: id,\n                                typename: storeObj.__typename,\n                            });\n                        },\n                    });\n                }\n            }\n        }\n    }\n    if (typeof fieldValue === 'undefined') {\n        return {\n            result: fieldValue,\n            missing: [{\n                    object: object,\n                    fieldName: storeKeyName,\n                    tolerable: false,\n                }],\n        };\n    }\n    if (isJsonValue(fieldValue)) {\n        fieldValue = fieldValue.json;\n    }\n    return {\n        result: fieldValue,\n    };\n}\n\nvar ObjectCache = (function () {\n    function ObjectCache(data) {\n        if (data === void 0) { data = Object.create(null); }\n        this.data = data;\n    }\n    ObjectCache.prototype.toObject = function () {\n        return this.data;\n    };\n    ObjectCache.prototype.get = function (dataId) {\n        return this.data[dataId];\n    };\n    ObjectCache.prototype.set = function (dataId, value) {\n        this.data[dataId] = value;\n    };\n    ObjectCache.prototype.delete = function (dataId) {\n        this.data[dataId] = void 0;\n    };\n    ObjectCache.prototype.clear = function () {\n        this.data = Object.create(null);\n    };\n    ObjectCache.prototype.replace = function (newData) {\n        this.data = newData || Object.create(null);\n    };\n    return ObjectCache;\n}());\nfunction defaultNormalizedCacheFactory$1(seed) {\n    return new ObjectCache(seed);\n}\n\nvar WriteError = (function (_super) {\n    __extends(WriteError, _super);\n    function WriteError() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = 'WriteError';\n        return _this;\n    }\n    return WriteError;\n}(Error));\nfunction enhanceErrorWithDocument(error, document) {\n    var enhancedError = new WriteError(\"Error writing result to store for query:\\n \" + JSON.stringify(document));\n    enhancedError.message += '\\n' + error.message;\n    enhancedError.stack = error.stack;\n    return enhancedError;\n}\nvar StoreWriter = (function () {\n    function StoreWriter() {\n    }\n    StoreWriter.prototype.writeQueryToStore = function (_a) {\n        var query = _a.query, result = _a.result, _b = _a.store, store = _b === void 0 ? defaultNormalizedCacheFactory() : _b, variables = _a.variables, dataIdFromObject = _a.dataIdFromObject, fragmentMatcherFunction = _a.fragmentMatcherFunction;\n        return this.writeResultToStore({\n            dataId: 'ROOT_QUERY',\n            result: result,\n            document: query,\n            store: store,\n            variables: variables,\n            dataIdFromObject: dataIdFromObject,\n            fragmentMatcherFunction: fragmentMatcherFunction,\n        });\n    };\n    StoreWriter.prototype.writeResultToStore = function (_a) {\n        var dataId = _a.dataId, result = _a.result, document = _a.document, _b = _a.store, store = _b === void 0 ? defaultNormalizedCacheFactory() : _b, variables = _a.variables, dataIdFromObject = _a.dataIdFromObject, fragmentMatcherFunction = _a.fragmentMatcherFunction;\n        var operationDefinition = getOperationDefinition(document);\n        try {\n            return this.writeSelectionSetToStore({\n                result: result,\n                dataId: dataId,\n                selectionSet: operationDefinition.selectionSet,\n                context: {\n                    store: store,\n                    processedData: {},\n                    variables: assign({}, getDefaultValues(operationDefinition), variables),\n                    dataIdFromObject: dataIdFromObject,\n                    fragmentMap: createFragmentMap(getFragmentDefinitions(document)),\n                    fragmentMatcherFunction: fragmentMatcherFunction,\n                },\n            });\n        }\n        catch (e) {\n            throw enhanceErrorWithDocument(e, document);\n        }\n    };\n    StoreWriter.prototype.writeSelectionSetToStore = function (_a) {\n        var _this = this;\n        var result = _a.result, dataId = _a.dataId, selectionSet = _a.selectionSet, context = _a.context;\n        var variables = context.variables, store = context.store, fragmentMap = context.fragmentMap;\n        selectionSet.selections.forEach(function (selection) {\n            var _a;\n            if (!shouldInclude(selection, variables)) {\n                return;\n            }\n            if (isField(selection)) {\n                var resultFieldKey = resultKeyNameFromField(selection);\n                var value = result[resultFieldKey];\n                if (typeof value !== 'undefined') {\n                    _this.writeFieldToStore({\n                        dataId: dataId,\n                        value: value,\n                        field: selection,\n                        context: context,\n                    });\n                }\n                else {\n                    var isDefered = false;\n                    var isClient = false;\n                    if (selection.directives && selection.directives.length) {\n                        isDefered = selection.directives.some(function (directive) { return directive.name && directive.name.value === 'defer'; });\n                        isClient = selection.directives.some(function (directive) { return directive.name && directive.name.value === 'client'; });\n                    }\n                    if (!isDefered && !isClient && context.fragmentMatcherFunction) {\n                        process.env.NODE_ENV === \"production\" || invariant.warn(\"Missing field \" + resultFieldKey + \" in \" + JSON.stringify(result, null, 2).substring(0, 100));\n                    }\n                }\n            }\n            else {\n                var fragment = void 0;\n                if (isInlineFragment(selection)) {\n                    fragment = selection;\n                }\n                else {\n                    fragment = (fragmentMap || {})[selection.name.value];\n                    process.env.NODE_ENV === \"production\" ? invariant(fragment, 2) : invariant(fragment, \"No fragment named \" + selection.name.value + \".\");\n                }\n                var matches = true;\n                if (context.fragmentMatcherFunction && fragment.typeCondition) {\n                    var id = dataId || 'self';\n                    var idValue = toIdValue({ id: id, typename: undefined });\n                    var fakeContext = {\n                        store: new ObjectCache((_a = {}, _a[id] = result, _a)),\n                        cacheRedirects: {},\n                    };\n                    var match = context.fragmentMatcherFunction(idValue, fragment.typeCondition.name.value, fakeContext);\n                    if (!isProduction() && match === 'heuristic') {\n                        process.env.NODE_ENV === \"production\" || invariant.error('WARNING: heuristic fragment matching going on!');\n                    }\n                    matches = !!match;\n                }\n                if (matches) {\n                    _this.writeSelectionSetToStore({\n                        result: result,\n                        selectionSet: fragment.selectionSet,\n                        dataId: dataId,\n                        context: context,\n                    });\n                }\n            }\n        });\n        return store;\n    };\n    StoreWriter.prototype.writeFieldToStore = function (_a) {\n        var _b;\n        var field = _a.field, value = _a.value, dataId = _a.dataId, context = _a.context;\n        var variables = context.variables, dataIdFromObject = context.dataIdFromObject, store = context.store;\n        var storeValue;\n        var storeObject;\n        var storeFieldName = storeKeyNameFromField(field, variables);\n        if (!field.selectionSet || value === null) {\n            storeValue =\n                value != null && typeof value === 'object'\n                    ?\n                        { type: 'json', json: value }\n                    :\n                        value;\n        }\n        else if (Array.isArray(value)) {\n            var generatedId = dataId + \".\" + storeFieldName;\n            storeValue = this.processArrayValue(value, generatedId, field.selectionSet, context);\n        }\n        else {\n            var valueDataId = dataId + \".\" + storeFieldName;\n            var generated = true;\n            if (!isGeneratedId(valueDataId)) {\n                valueDataId = '$' + valueDataId;\n            }\n            if (dataIdFromObject) {\n                var semanticId = dataIdFromObject(value);\n                process.env.NODE_ENV === \"production\" ? invariant(!semanticId || !isGeneratedId(semanticId), 3) : invariant(!semanticId || !isGeneratedId(semanticId), 'IDs returned by dataIdFromObject cannot begin with the \"$\" character.');\n                if (semanticId ||\n                    (typeof semanticId === 'number' && semanticId === 0)) {\n                    valueDataId = semanticId;\n                    generated = false;\n                }\n            }\n            if (!isDataProcessed(valueDataId, field, context.processedData)) {\n                this.writeSelectionSetToStore({\n                    dataId: valueDataId,\n                    result: value,\n                    selectionSet: field.selectionSet,\n                    context: context,\n                });\n            }\n            var typename = value.__typename;\n            storeValue = toIdValue({ id: valueDataId, typename: typename }, generated);\n            storeObject = store.get(dataId);\n            var escapedId = storeObject && storeObject[storeFieldName];\n            if (escapedId !== storeValue && isIdValue(escapedId)) {\n                var hadTypename = escapedId.typename !== undefined;\n                var hasTypename = typename !== undefined;\n                var typenameChanged = hadTypename && hasTypename && escapedId.typename !== typename;\n                process.env.NODE_ENV === \"production\" ? invariant(!generated || escapedId.generated || typenameChanged, 4) : invariant(!generated || escapedId.generated || typenameChanged, \"Store error: the application attempted to write an object with no provided id but the store already contains an id of \" + escapedId.id + \" for this object. The selectionSet that was trying to be written is:\\n\" + JSON.stringify(field));\n                process.env.NODE_ENV === \"production\" ? invariant(!hadTypename || hasTypename, 5) : invariant(!hadTypename || hasTypename, \"Store error: the application attempted to write an object with no provided typename but the store already contains an object with typename of \" + escapedId.typename + \" for the object of id \" + escapedId.id + \". The selectionSet that was trying to be written is:\\n\" + JSON.stringify(field));\n                if (escapedId.generated) {\n                    if (typenameChanged) {\n                        if (!generated) {\n                            store.delete(escapedId.id);\n                        }\n                    }\n                    else {\n                        mergeWithGenerated(escapedId.id, storeValue.id, store);\n                    }\n                }\n            }\n        }\n        storeObject = store.get(dataId);\n        if (!storeObject || !isEqual(storeValue, storeObject[storeFieldName])) {\n            store.set(dataId, __assign({}, storeObject, (_b = {}, _b[storeFieldName] = storeValue, _b)));\n        }\n    };\n    StoreWriter.prototype.processArrayValue = function (value, generatedId, selectionSet, context) {\n        var _this = this;\n        return value.map(function (item, index) {\n            if (item === null) {\n                return null;\n            }\n            var itemDataId = generatedId + \".\" + index;\n            if (Array.isArray(item)) {\n                return _this.processArrayValue(item, itemDataId, selectionSet, context);\n            }\n            var generated = true;\n            if (context.dataIdFromObject) {\n                var semanticId = context.dataIdFromObject(item);\n                if (semanticId) {\n                    itemDataId = semanticId;\n                    generated = false;\n                }\n            }\n            if (!isDataProcessed(itemDataId, selectionSet, context.processedData)) {\n                _this.writeSelectionSetToStore({\n                    dataId: itemDataId,\n                    result: item,\n                    selectionSet: selectionSet,\n                    context: context,\n                });\n            }\n            return toIdValue({ id: itemDataId, typename: item.__typename }, generated);\n        });\n    };\n    return StoreWriter;\n}());\nfunction isGeneratedId(id) {\n    return id[0] === '$';\n}\nfunction mergeWithGenerated(generatedKey, realKey, cache) {\n    if (generatedKey === realKey) {\n        return false;\n    }\n    var generated = cache.get(generatedKey);\n    var real = cache.get(realKey);\n    var madeChanges = false;\n    Object.keys(generated).forEach(function (key) {\n        var value = generated[key];\n        var realValue = real[key];\n        if (isIdValue(value) &&\n            isGeneratedId(value.id) &&\n            isIdValue(realValue) &&\n            !isEqual(value, realValue) &&\n            mergeWithGenerated(value.id, realValue.id, cache)) {\n            madeChanges = true;\n        }\n    });\n    cache.delete(generatedKey);\n    var newRealValue = __assign({}, generated, real);\n    if (isEqual(newRealValue, real)) {\n        return madeChanges;\n    }\n    cache.set(realKey, newRealValue);\n    return true;\n}\nfunction isDataProcessed(dataId, field, processedData) {\n    if (!processedData) {\n        return false;\n    }\n    if (processedData[dataId]) {\n        if (processedData[dataId].indexOf(field) >= 0) {\n            return true;\n        }\n        else {\n            processedData[dataId].push(field);\n        }\n    }\n    else {\n        processedData[dataId] = [field];\n    }\n    return false;\n}\n\nvar defaultConfig = {\n    fragmentMatcher: new HeuristicFragmentMatcher(),\n    dataIdFromObject: defaultDataIdFromObject,\n    addTypename: true,\n    resultCaching: true,\n    freezeResults: false,\n};\nfunction defaultDataIdFromObject(result) {\n    if (result.__typename) {\n        if (result.id !== undefined) {\n            return result.__typename + \":\" + result.id;\n        }\n        if (result._id !== undefined) {\n            return result.__typename + \":\" + result._id;\n        }\n    }\n    return null;\n}\nvar hasOwn$1 = Object.prototype.hasOwnProperty;\nvar OptimisticCacheLayer = (function (_super) {\n    __extends(OptimisticCacheLayer, _super);\n    function OptimisticCacheLayer(optimisticId, parent, transaction) {\n        var _this = _super.call(this, Object.create(null)) || this;\n        _this.optimisticId = optimisticId;\n        _this.parent = parent;\n        _this.transaction = transaction;\n        return _this;\n    }\n    OptimisticCacheLayer.prototype.toObject = function () {\n        return __assign({}, this.parent.toObject(), this.data);\n    };\n    OptimisticCacheLayer.prototype.get = function (dataId) {\n        return hasOwn$1.call(this.data, dataId)\n            ? this.data[dataId]\n            : this.parent.get(dataId);\n    };\n    return OptimisticCacheLayer;\n}(ObjectCache));\nvar InMemoryCache = (function (_super) {\n    __extends(InMemoryCache, _super);\n    function InMemoryCache(config) {\n        if (config === void 0) { config = {}; }\n        var _this = _super.call(this) || this;\n        _this.watches = new Set();\n        _this.typenameDocumentCache = new Map();\n        _this.cacheKeyRoot = new KeyTrie(canUseWeakMap);\n        _this.silenceBroadcast = false;\n        _this.config = __assign({}, defaultConfig, config);\n        if (_this.config.customResolvers) {\n            process.env.NODE_ENV === \"production\" || invariant.warn('customResolvers have been renamed to cacheRedirects. Please update your config as we will be deprecating customResolvers in the next major version.');\n            _this.config.cacheRedirects = _this.config.customResolvers;\n        }\n        if (_this.config.cacheResolvers) {\n            process.env.NODE_ENV === \"production\" || invariant.warn('cacheResolvers have been renamed to cacheRedirects. Please update your config as we will be deprecating cacheResolvers in the next major version.');\n            _this.config.cacheRedirects = _this.config.cacheResolvers;\n        }\n        _this.addTypename = !!_this.config.addTypename;\n        _this.data = _this.config.resultCaching\n            ? new DepTrackingCache()\n            : new ObjectCache();\n        _this.optimisticData = _this.data;\n        _this.storeWriter = new StoreWriter();\n        _this.storeReader = new StoreReader({\n            cacheKeyRoot: _this.cacheKeyRoot,\n            freezeResults: config.freezeResults,\n        });\n        var cache = _this;\n        var maybeBroadcastWatch = cache.maybeBroadcastWatch;\n        _this.maybeBroadcastWatch = wrap(function (c) {\n            return maybeBroadcastWatch.call(_this, c);\n        }, {\n            makeCacheKey: function (c) {\n                if (c.optimistic) {\n                    return;\n                }\n                if (c.previousResult) {\n                    return;\n                }\n                if (cache.data instanceof DepTrackingCache) {\n                    return cache.cacheKeyRoot.lookup(c.query, JSON.stringify(c.variables));\n                }\n            }\n        });\n        return _this;\n    }\n    InMemoryCache.prototype.restore = function (data) {\n        if (data)\n            this.data.replace(data);\n        return this;\n    };\n    InMemoryCache.prototype.extract = function (optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return (optimistic ? this.optimisticData : this.data).toObject();\n    };\n    InMemoryCache.prototype.read = function (options) {\n        if (typeof options.rootId === 'string' &&\n            typeof this.data.get(options.rootId) === 'undefined') {\n            return null;\n        }\n        var fragmentMatcher = this.config.fragmentMatcher;\n        var fragmentMatcherFunction = fragmentMatcher && fragmentMatcher.match;\n        return this.storeReader.readQueryFromStore({\n            store: options.optimistic ? this.optimisticData : this.data,\n            query: this.transformDocument(options.query),\n            variables: options.variables,\n            rootId: options.rootId,\n            fragmentMatcherFunction: fragmentMatcherFunction,\n            previousResult: options.previousResult,\n            config: this.config,\n        }) || null;\n    };\n    InMemoryCache.prototype.write = function (write) {\n        var fragmentMatcher = this.config.fragmentMatcher;\n        var fragmentMatcherFunction = fragmentMatcher && fragmentMatcher.match;\n        this.storeWriter.writeResultToStore({\n            dataId: write.dataId,\n            result: write.result,\n            variables: write.variables,\n            document: this.transformDocument(write.query),\n            store: this.data,\n            dataIdFromObject: this.config.dataIdFromObject,\n            fragmentMatcherFunction: fragmentMatcherFunction,\n        });\n        this.broadcastWatches();\n    };\n    InMemoryCache.prototype.diff = function (query) {\n        var fragmentMatcher = this.config.fragmentMatcher;\n        var fragmentMatcherFunction = fragmentMatcher && fragmentMatcher.match;\n        return this.storeReader.diffQueryAgainstStore({\n            store: query.optimistic ? this.optimisticData : this.data,\n            query: this.transformDocument(query.query),\n            variables: query.variables,\n            returnPartialData: query.returnPartialData,\n            previousResult: query.previousResult,\n            fragmentMatcherFunction: fragmentMatcherFunction,\n            config: this.config,\n        });\n    };\n    InMemoryCache.prototype.watch = function (watch) {\n        var _this = this;\n        this.watches.add(watch);\n        return function () {\n            _this.watches.delete(watch);\n        };\n    };\n    InMemoryCache.prototype.evict = function (query) {\n        throw process.env.NODE_ENV === \"production\" ? new InvariantError(1) : new InvariantError(\"eviction is not implemented on InMemory Cache\");\n    };\n    InMemoryCache.prototype.reset = function () {\n        this.data.clear();\n        this.broadcastWatches();\n        return Promise.resolve();\n    };\n    InMemoryCache.prototype.removeOptimistic = function (idToRemove) {\n        var toReapply = [];\n        var removedCount = 0;\n        var layer = this.optimisticData;\n        while (layer instanceof OptimisticCacheLayer) {\n            if (layer.optimisticId === idToRemove) {\n                ++removedCount;\n            }\n            else {\n                toReapply.push(layer);\n            }\n            layer = layer.parent;\n        }\n        if (removedCount > 0) {\n            this.optimisticData = layer;\n            while (toReapply.length > 0) {\n                var layer_1 = toReapply.pop();\n                this.performTransaction(layer_1.transaction, layer_1.optimisticId);\n            }\n            this.broadcastWatches();\n        }\n    };\n    InMemoryCache.prototype.performTransaction = function (transaction, optimisticId) {\n        var _a = this, data = _a.data, silenceBroadcast = _a.silenceBroadcast;\n        this.silenceBroadcast = true;\n        if (typeof optimisticId === 'string') {\n            this.data = this.optimisticData = new OptimisticCacheLayer(optimisticId, this.optimisticData, transaction);\n        }\n        try {\n            transaction(this);\n        }\n        finally {\n            this.silenceBroadcast = silenceBroadcast;\n            this.data = data;\n        }\n        this.broadcastWatches();\n    };\n    InMemoryCache.prototype.recordOptimisticTransaction = function (transaction, id) {\n        return this.performTransaction(transaction, id);\n    };\n    InMemoryCache.prototype.transformDocument = function (document) {\n        if (this.addTypename) {\n            var result = this.typenameDocumentCache.get(document);\n            if (!result) {\n                result = addTypenameToDocument(document);\n                this.typenameDocumentCache.set(document, result);\n                this.typenameDocumentCache.set(result, result);\n            }\n            return result;\n        }\n        return document;\n    };\n    InMemoryCache.prototype.broadcastWatches = function () {\n        var _this = this;\n        if (!this.silenceBroadcast) {\n            this.watches.forEach(function (c) { return _this.maybeBroadcastWatch(c); });\n        }\n    };\n    InMemoryCache.prototype.maybeBroadcastWatch = function (c) {\n        c.callback(this.diff({\n            query: c.query,\n            variables: c.variables,\n            previousResult: c.previousResult && c.previousResult(),\n            optimistic: c.optimistic,\n        }));\n    };\n    return InMemoryCache;\n}(ApolloCache));\n\nexport { HeuristicFragmentMatcher, InMemoryCache, IntrospectionFragmentMatcher, ObjectCache, StoreReader, StoreWriter, WriteError, assertIdValue, defaultDataIdFromObject, defaultNormalizedCacheFactory$1 as defaultNormalizedCacheFactory, enhanceErrorWithDocument };\n//# sourceMappingURL=bundle.esm.js.map\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.print = print;\n\nvar _visitor = require(\"./visitor\");\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\nfunction print(ast) {\n  return (0, _visitor.visit)(ast, {\n    leave: printDocASTReducer\n  });\n}\n\nvar printDocASTReducer = {\n  Name: function Name(node) {\n    return node.value;\n  },\n  Variable: function Variable(node) {\n    return '$' + node.name;\n  },\n  // Document\n  Document: function Document(node) {\n    return join(node.definitions, '\\n\\n') + '\\n';\n  },\n  OperationDefinition: function OperationDefinition(node) {\n    var op = node.operation;\n    var name = node.name;\n    var varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n    var directives = join(node.directives, ' ');\n    var selectionSet = node.selectionSet; // Anonymous queries with no directives or variable definitions can use\n    // the query short form.\n\n    return !name && !directives && !varDefs && op === 'query' ? selectionSet : join([op, join([name, varDefs]), directives, selectionSet], ' ');\n  },\n  VariableDefinition: function VariableDefinition(_ref) {\n    var variable = _ref.variable,\n        type = _ref.type,\n        defaultValue = _ref.defaultValue,\n        directives = _ref.directives;\n    return variable + ': ' + type + wrap(' = ', defaultValue) + wrap(' ', join(directives, ' '));\n  },\n  SelectionSet: function SelectionSet(_ref2) {\n    var selections = _ref2.selections;\n    return block(selections);\n  },\n  Field: function Field(_ref3) {\n    var alias = _ref3.alias,\n        name = _ref3.name,\n        args = _ref3.arguments,\n        directives = _ref3.directives,\n        selectionSet = _ref3.selectionSet;\n    return join([wrap('', alias, ': ') + name + wrap('(', join(args, ', '), ')'), join(directives, ' '), selectionSet], ' ');\n  },\n  Argument: function Argument(_ref4) {\n    var name = _ref4.name,\n        value = _ref4.value;\n    return name + ': ' + value;\n  },\n  // Fragments\n  FragmentSpread: function FragmentSpread(_ref5) {\n    var name = _ref5.name,\n        directives = _ref5.directives;\n    return '...' + name + wrap(' ', join(directives, ' '));\n  },\n  InlineFragment: function InlineFragment(_ref6) {\n    var typeCondition = _ref6.typeCondition,\n        directives = _ref6.directives,\n        selectionSet = _ref6.selectionSet;\n    return join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' ');\n  },\n  FragmentDefinition: function FragmentDefinition(_ref7) {\n    var name = _ref7.name,\n        typeCondition = _ref7.typeCondition,\n        variableDefinitions = _ref7.variableDefinitions,\n        directives = _ref7.directives,\n        selectionSet = _ref7.selectionSet;\n    return (// Note: fragment variable definitions are experimental and may be changed\n      // or removed in the future.\n      \"fragment \".concat(name).concat(wrap('(', join(variableDefinitions, ', '), ')'), \" \") + \"on \".concat(typeCondition, \" \").concat(wrap('', join(directives, ' '), ' ')) + selectionSet\n    );\n  },\n  // Value\n  IntValue: function IntValue(_ref8) {\n    var value = _ref8.value;\n    return value;\n  },\n  FloatValue: function FloatValue(_ref9) {\n    var value = _ref9.value;\n    return value;\n  },\n  StringValue: function StringValue(_ref10, key) {\n    var value = _ref10.value,\n        isBlockString = _ref10.block;\n    return isBlockString ? printBlockString(value, key === 'description') : JSON.stringify(value);\n  },\n  BooleanValue: function BooleanValue(_ref11) {\n    var value = _ref11.value;\n    return value ? 'true' : 'false';\n  },\n  NullValue: function NullValue() {\n    return 'null';\n  },\n  EnumValue: function EnumValue(_ref12) {\n    var value = _ref12.value;\n    return value;\n  },\n  ListValue: function ListValue(_ref13) {\n    var values = _ref13.values;\n    return '[' + join(values, ', ') + ']';\n  },\n  ObjectValue: function ObjectValue(_ref14) {\n    var fields = _ref14.fields;\n    return '{' + join(fields, ', ') + '}';\n  },\n  ObjectField: function ObjectField(_ref15) {\n    var name = _ref15.name,\n        value = _ref15.value;\n    return name + ': ' + value;\n  },\n  // Directive\n  Directive: function Directive(_ref16) {\n    var name = _ref16.name,\n        args = _ref16.arguments;\n    return '@' + name + wrap('(', join(args, ', '), ')');\n  },\n  // Type\n  NamedType: function NamedType(_ref17) {\n    var name = _ref17.name;\n    return name;\n  },\n  ListType: function ListType(_ref18) {\n    var type = _ref18.type;\n    return '[' + type + ']';\n  },\n  NonNullType: function NonNullType(_ref19) {\n    var type = _ref19.type;\n    return type + '!';\n  },\n  // Type System Definitions\n  SchemaDefinition: function SchemaDefinition(_ref20) {\n    var directives = _ref20.directives,\n        operationTypes = _ref20.operationTypes;\n    return join(['schema', join(directives, ' '), block(operationTypes)], ' ');\n  },\n  OperationTypeDefinition: function OperationTypeDefinition(_ref21) {\n    var operation = _ref21.operation,\n        type = _ref21.type;\n    return operation + ': ' + type;\n  },\n  ScalarTypeDefinition: addDescription(function (_ref22) {\n    var name = _ref22.name,\n        directives = _ref22.directives;\n    return join(['scalar', name, join(directives, ' ')], ' ');\n  }),\n  ObjectTypeDefinition: addDescription(function (_ref23) {\n    var name = _ref23.name,\n        interfaces = _ref23.interfaces,\n        directives = _ref23.directives,\n        fields = _ref23.fields;\n    return join(['type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  }),\n  FieldDefinition: addDescription(function (_ref24) {\n    var name = _ref24.name,\n        args = _ref24.arguments,\n        type = _ref24.type,\n        directives = _ref24.directives;\n    return name + (args.every(function (arg) {\n      return arg.indexOf('\\n') === -1;\n    }) ? wrap('(', join(args, ', '), ')') : wrap('(\\n', indent(join(args, '\\n')), '\\n)')) + ': ' + type + wrap(' ', join(directives, ' '));\n  }),\n  InputValueDefinition: addDescription(function (_ref25) {\n    var name = _ref25.name,\n        type = _ref25.type,\n        defaultValue = _ref25.defaultValue,\n        directives = _ref25.directives;\n    return join([name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')], ' ');\n  }),\n  InterfaceTypeDefinition: addDescription(function (_ref26) {\n    var name = _ref26.name,\n        directives = _ref26.directives,\n        fields = _ref26.fields;\n    return join(['interface', name, join(directives, ' '), block(fields)], ' ');\n  }),\n  UnionTypeDefinition: addDescription(function (_ref27) {\n    var name = _ref27.name,\n        directives = _ref27.directives,\n        types = _ref27.types;\n    return join(['union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');\n  }),\n  EnumTypeDefinition: addDescription(function (_ref28) {\n    var name = _ref28.name,\n        directives = _ref28.directives,\n        values = _ref28.values;\n    return join(['enum', name, join(directives, ' '), block(values)], ' ');\n  }),\n  EnumValueDefinition: addDescription(function (_ref29) {\n    var name = _ref29.name,\n        directives = _ref29.directives;\n    return join([name, join(directives, ' ')], ' ');\n  }),\n  InputObjectTypeDefinition: addDescription(function (_ref30) {\n    var name = _ref30.name,\n        directives = _ref30.directives,\n        fields = _ref30.fields;\n    return join(['input', name, join(directives, ' '), block(fields)], ' ');\n  }),\n  DirectiveDefinition: addDescription(function (_ref31) {\n    var name = _ref31.name,\n        args = _ref31.arguments,\n        locations = _ref31.locations;\n    return 'directive @' + name + (args.every(function (arg) {\n      return arg.indexOf('\\n') === -1;\n    }) ? wrap('(', join(args, ', '), ')') : wrap('(\\n', indent(join(args, '\\n')), '\\n)')) + ' on ' + join(locations, ' | ');\n  }),\n  SchemaExtension: function SchemaExtension(_ref32) {\n    var directives = _ref32.directives,\n        operationTypes = _ref32.operationTypes;\n    return join(['extend schema', join(directives, ' '), block(operationTypes)], ' ');\n  },\n  ScalarTypeExtension: function ScalarTypeExtension(_ref33) {\n    var name = _ref33.name,\n        directives = _ref33.directives;\n    return join(['extend scalar', name, join(directives, ' ')], ' ');\n  },\n  ObjectTypeExtension: function ObjectTypeExtension(_ref34) {\n    var name = _ref34.name,\n        interfaces = _ref34.interfaces,\n        directives = _ref34.directives,\n        fields = _ref34.fields;\n    return join(['extend type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  },\n  InterfaceTypeExtension: function InterfaceTypeExtension(_ref35) {\n    var name = _ref35.name,\n        directives = _ref35.directives,\n        fields = _ref35.fields;\n    return join(['extend interface', name, join(directives, ' '), block(fields)], ' ');\n  },\n  UnionTypeExtension: function UnionTypeExtension(_ref36) {\n    var name = _ref36.name,\n        directives = _ref36.directives,\n        types = _ref36.types;\n    return join(['extend union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');\n  },\n  EnumTypeExtension: function EnumTypeExtension(_ref37) {\n    var name = _ref37.name,\n        directives = _ref37.directives,\n        values = _ref37.values;\n    return join(['extend enum', name, join(directives, ' '), block(values)], ' ');\n  },\n  InputObjectTypeExtension: function InputObjectTypeExtension(_ref38) {\n    var name = _ref38.name,\n        directives = _ref38.directives,\n        fields = _ref38.fields;\n    return join(['extend input', name, join(directives, ' '), block(fields)], ' ');\n  }\n};\n\nfunction addDescription(cb) {\n  return function (node) {\n    return join([node.description, cb(node)], '\\n');\n  };\n}\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\n\n\nfunction join(maybeArray, separator) {\n  return maybeArray ? maybeArray.filter(function (x) {\n    return x;\n  }).join(separator || '') : '';\n}\n/**\n * Given array, print each item on its own line, wrapped in an\n * indented \"{ }\" block.\n */\n\n\nfunction block(array) {\n  return array && array.length !== 0 ? '{\\n' + indent(join(array, '\\n')) + '\\n}' : '';\n}\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise\n * print an empty string.\n */\n\n\nfunction wrap(start, maybeString, end) {\n  return maybeString ? start + maybeString + (end || '') : '';\n}\n\nfunction indent(maybeString) {\n  return maybeString && '  ' + maybeString.replace(/\\n/g, '\\n  ');\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n */\n\n\nfunction printBlockString(value, isDescription) {\n  var escaped = value.replace(/\"\"\"/g, '\\\\\"\"\"');\n  return (value[0] === ' ' || value[0] === '\\t') && value.indexOf('\\n') === -1 ? \"\\\"\\\"\\\"\".concat(escaped.replace(/\"$/, '\"\\n'), \"\\\"\\\"\\\"\") : \"\\\"\\\"\\\"\\n\".concat(isDescription ? escaped : indent(escaped), \"\\n\\\"\\\"\\\"\");\n}","import { __assign } from 'tslib';\nimport { print } from 'graphql/language/printer';\nimport { InvariantError } from 'ts-invariant';\n\nvar defaultHttpOptions = {\n    includeQuery: true,\n    includeExtensions: false,\n};\nvar defaultHeaders = {\n    accept: '*/*',\n    'content-type': 'application/json',\n};\nvar defaultOptions = {\n    method: 'POST',\n};\nvar fallbackHttpConfig = {\n    http: defaultHttpOptions,\n    headers: defaultHeaders,\n    options: defaultOptions,\n};\nvar throwServerError = function (response, result, message) {\n    var error = new Error(message);\n    error.name = 'ServerError';\n    error.response = response;\n    error.statusCode = response.status;\n    error.result = result;\n    throw error;\n};\nvar parseAndCheckHttpResponse = function (operations) { return function (response) {\n    return (response\n        .text()\n        .then(function (bodyText) {\n        try {\n            return JSON.parse(bodyText);\n        }\n        catch (err) {\n            var parseError = err;\n            parseError.name = 'ServerParseError';\n            parseError.response = response;\n            parseError.statusCode = response.status;\n            parseError.bodyText = bodyText;\n            return Promise.reject(parseError);\n        }\n    })\n        .then(function (result) {\n        if (response.status >= 300) {\n            throwServerError(response, result, \"Response not successful: Received status code \" + response.status);\n        }\n        if (!Array.isArray(result) &&\n            !result.hasOwnProperty('data') &&\n            !result.hasOwnProperty('errors')) {\n            throwServerError(response, result, \"Server response was missing for query '\" + (Array.isArray(operations)\n                ? operations.map(function (op) { return op.operationName; })\n                : operations.operationName) + \"'.\");\n        }\n        return result;\n    }));\n}; };\nvar checkFetcher = function (fetcher) {\n    if (!fetcher && typeof fetch === 'undefined') {\n        var library = 'unfetch';\n        if (typeof window === 'undefined')\n            library = 'node-fetch';\n        throw process.env.NODE_ENV === \"production\" ? new InvariantError(1) : new InvariantError(\"\\nfetch is not found globally and no fetcher passed, to fix pass a fetch for\\nyour environment like https://www.npmjs.com/package/\" + library + \".\\n\\nFor example:\\nimport fetch from '\" + library + \"';\\nimport { createHttpLink } from 'apollo-link-http';\\n\\nconst link = createHttpLink({ uri: '/graphql', fetch: fetch });\");\n    }\n};\nvar createSignalIfSupported = function () {\n    if (typeof AbortController === 'undefined')\n        return { controller: false, signal: false };\n    var controller = new AbortController();\n    var signal = controller.signal;\n    return { controller: controller, signal: signal };\n};\nvar selectHttpOptionsAndBody = function (operation, fallbackConfig) {\n    var configs = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        configs[_i - 2] = arguments[_i];\n    }\n    var options = __assign({}, fallbackConfig.options, { headers: fallbackConfig.headers, credentials: fallbackConfig.credentials });\n    var http = fallbackConfig.http;\n    configs.forEach(function (config) {\n        options = __assign({}, options, config.options, { headers: __assign({}, options.headers, config.headers) });\n        if (config.credentials)\n            options.credentials = config.credentials;\n        http = __assign({}, http, config.http);\n    });\n    var operationName = operation.operationName, extensions = operation.extensions, variables = operation.variables, query = operation.query;\n    var body = { operationName: operationName, variables: variables };\n    if (http.includeExtensions)\n        body.extensions = extensions;\n    if (http.includeQuery)\n        body.query = print(query);\n    return {\n        options: options,\n        body: body,\n    };\n};\nvar serializeFetchParameter = function (p, label) {\n    var serialized;\n    try {\n        serialized = JSON.stringify(p);\n    }\n    catch (e) {\n        var parseError = process.env.NODE_ENV === \"production\" ? new InvariantError(2) : new InvariantError(\"Network request failed. \" + label + \" is not serializable: \" + e.message);\n        parseError.parseError = e;\n        throw parseError;\n    }\n    return serialized;\n};\nvar selectURI = function (operation, fallbackURI) {\n    var context = operation.getContext();\n    var contextURI = context.uri;\n    if (contextURI) {\n        return contextURI;\n    }\n    else if (typeof fallbackURI === 'function') {\n        return fallbackURI(operation);\n    }\n    else {\n        return fallbackURI || '/graphql';\n    }\n};\n\nexport { checkFetcher, createSignalIfSupported, fallbackHttpConfig, parseAndCheckHttpResponse, selectHttpOptionsAndBody, selectURI, serializeFetchParameter, throwServerError };\n//# sourceMappingURL=bundle.esm.js.map\n","import { __rest, __assign, __extends } from 'tslib';\nimport { ApolloLink, fromError, Observable } from 'apollo-link';\nimport { checkFetcher, selectURI, selectHttpOptionsAndBody, fallbackHttpConfig, createSignalIfSupported, serializeFetchParameter, parseAndCheckHttpResponse } from 'apollo-link-http-common';\n\nvar createHttpLink = function (linkOptions) {\n    if (linkOptions === void 0) { linkOptions = {}; }\n    var _a = linkOptions.uri, uri = _a === void 0 ? '/graphql' : _a, fetcher = linkOptions.fetch, includeExtensions = linkOptions.includeExtensions, useGETForQueries = linkOptions.useGETForQueries, requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"includeExtensions\", \"useGETForQueries\"]);\n    checkFetcher(fetcher);\n    if (!fetcher) {\n        fetcher = fetch;\n    }\n    var linkConfig = {\n        http: { includeExtensions: includeExtensions },\n        options: requestOptions.fetchOptions,\n        credentials: requestOptions.credentials,\n        headers: requestOptions.headers,\n    };\n    return new ApolloLink(function (operation) {\n        var chosenURI = selectURI(operation, uri);\n        var context = operation.getContext();\n        var clientAwarenessHeaders = {};\n        if (context.clientAwareness) {\n            var _a = context.clientAwareness, name_1 = _a.name, version = _a.version;\n            if (name_1) {\n                clientAwarenessHeaders['apollographql-client-name'] = name_1;\n            }\n            if (version) {\n                clientAwarenessHeaders['apollographql-client-version'] = version;\n            }\n        }\n        var contextHeaders = __assign({}, clientAwarenessHeaders, context.headers);\n        var contextConfig = {\n            http: context.http,\n            options: context.fetchOptions,\n            credentials: context.credentials,\n            headers: contextHeaders,\n        };\n        var _b = selectHttpOptionsAndBody(operation, fallbackHttpConfig, linkConfig, contextConfig), options = _b.options, body = _b.body;\n        var controller;\n        if (!options.signal) {\n            var _c = createSignalIfSupported(), _controller = _c.controller, signal = _c.signal;\n            controller = _controller;\n            if (controller)\n                options.signal = signal;\n        }\n        var definitionIsMutation = function (d) {\n            return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n        };\n        if (useGETForQueries &&\n            !operation.query.definitions.some(definitionIsMutation)) {\n            options.method = 'GET';\n        }\n        if (options.method === 'GET') {\n            var _d = rewriteURIForGET(chosenURI, body), newURI = _d.newURI, parseError = _d.parseError;\n            if (parseError) {\n                return fromError(parseError);\n            }\n            chosenURI = newURI;\n        }\n        else {\n            try {\n                options.body = serializeFetchParameter(body, 'Payload');\n            }\n            catch (parseError) {\n                return fromError(parseError);\n            }\n        }\n        return new Observable(function (observer) {\n            fetcher(chosenURI, options)\n                .then(function (response) {\n                operation.setContext({ response: response });\n                return response;\n            })\n                .then(parseAndCheckHttpResponse(operation))\n                .then(function (result) {\n                observer.next(result);\n                observer.complete();\n                return result;\n            })\n                .catch(function (err) {\n                if (err.name === 'AbortError')\n                    return;\n                if (err.result && err.result.errors && err.result.data) {\n                    observer.next(err.result);\n                }\n                observer.error(err);\n            });\n            return function () {\n                if (controller)\n                    controller.abort();\n            };\n        });\n    });\n};\nfunction rewriteURIForGET(chosenURI, body) {\n    var queryParams = [];\n    var addQueryParam = function (key, value) {\n        queryParams.push(key + \"=\" + encodeURIComponent(value));\n    };\n    if ('query' in body) {\n        addQueryParam('query', body.query);\n    }\n    if (body.operationName) {\n        addQueryParam('operationName', body.operationName);\n    }\n    if (body.variables) {\n        var serializedVariables = void 0;\n        try {\n            serializedVariables = serializeFetchParameter(body.variables, 'Variables map');\n        }\n        catch (parseError) {\n            return { parseError: parseError };\n        }\n        addQueryParam('variables', serializedVariables);\n    }\n    if (body.extensions) {\n        var serializedExtensions = void 0;\n        try {\n            serializedExtensions = serializeFetchParameter(body.extensions, 'Extensions map');\n        }\n        catch (parseError) {\n            return { parseError: parseError };\n        }\n        addQueryParam('extensions', serializedExtensions);\n    }\n    var fragment = '', preFragment = chosenURI;\n    var fragmentStart = chosenURI.indexOf('#');\n    if (fragmentStart !== -1) {\n        fragment = chosenURI.substr(fragmentStart);\n        preFragment = chosenURI.substr(0, fragmentStart);\n    }\n    var queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';\n    var newURI = preFragment + queryParamsPrefix + queryParams.join('&') + fragment;\n    return { newURI: newURI };\n}\nvar HttpLink = (function (_super) {\n    __extends(HttpLink, _super);\n    function HttpLink(opts) {\n        return _super.call(this, createHttpLink(opts).request) || this;\n    }\n    return HttpLink;\n}(ApolloLink));\n\nexport { HttpLink, createHttpLink };\n//# sourceMappingURL=bundle.esm.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar apollo_utilities_1 = require(\"apollo-utilities\");\nfunction graphql(resolver, document, rootValue, contextValue, variableValues, execOptions) {\n    if (variableValues === void 0) { variableValues = {}; }\n    if (execOptions === void 0) { execOptions = {}; }\n    var mainDefinition = apollo_utilities_1.getMainDefinition(document);\n    var fragments = apollo_utilities_1.getFragmentDefinitions(document);\n    var fragmentMap = apollo_utilities_1.createFragmentMap(fragments);\n    var resultMapper = execOptions.resultMapper;\n    var fragmentMatcher = execOptions.fragmentMatcher || (function () { return true; });\n    var execContext = {\n        fragmentMap: fragmentMap,\n        contextValue: contextValue,\n        variableValues: variableValues,\n        resultMapper: resultMapper,\n        resolver: resolver,\n        fragmentMatcher: fragmentMatcher,\n    };\n    return executeSelectionSet(mainDefinition.selectionSet, rootValue, execContext);\n}\nexports.graphql = graphql;\nfunction executeSelectionSet(selectionSet, rootValue, execContext) {\n    var fragmentMap = execContext.fragmentMap, contextValue = execContext.contextValue, variables = execContext.variableValues;\n    var result = {};\n    selectionSet.selections.forEach(function (selection) {\n        if (variables && !apollo_utilities_1.shouldInclude(selection, variables)) {\n            return;\n        }\n        if (apollo_utilities_1.isField(selection)) {\n            var fieldResult = executeField(selection, rootValue, execContext);\n            var resultFieldKey = apollo_utilities_1.resultKeyNameFromField(selection);\n            if (fieldResult !== undefined) {\n                if (result[resultFieldKey] === undefined) {\n                    result[resultFieldKey] = fieldResult;\n                }\n                else {\n                    merge(result[resultFieldKey], fieldResult);\n                }\n            }\n        }\n        else {\n            var fragment = void 0;\n            if (apollo_utilities_1.isInlineFragment(selection)) {\n                fragment = selection;\n            }\n            else {\n                fragment = fragmentMap[selection.name.value];\n                if (!fragment) {\n                    throw new Error(\"No fragment named \" + selection.name.value);\n                }\n            }\n            var typeCondition = fragment.typeCondition.name.value;\n            if (execContext.fragmentMatcher(rootValue, typeCondition, contextValue)) {\n                var fragmentResult = executeSelectionSet(fragment.selectionSet, rootValue, execContext);\n                merge(result, fragmentResult);\n            }\n        }\n    });\n    if (execContext.resultMapper) {\n        return execContext.resultMapper(result, rootValue);\n    }\n    return result;\n}\nfunction executeField(field, rootValue, execContext) {\n    var variables = execContext.variableValues, contextValue = execContext.contextValue, resolver = execContext.resolver;\n    var fieldName = field.name.value;\n    var args = apollo_utilities_1.argumentsObjectFromField(field, variables);\n    var info = {\n        isLeaf: !field.selectionSet,\n        resultKey: apollo_utilities_1.resultKeyNameFromField(field),\n        directives: apollo_utilities_1.getDirectiveInfoFromField(field, variables),\n        field: field,\n    };\n    var result = resolver(fieldName, rootValue, args, contextValue, info);\n    if (!field.selectionSet) {\n        return result;\n    }\n    if (result == null) {\n        return result;\n    }\n    if (Array.isArray(result)) {\n        return executeSubSelectedArray(field, result, execContext);\n    }\n    return executeSelectionSet(field.selectionSet, result, execContext);\n}\nfunction executeSubSelectedArray(field, result, execContext) {\n    return result.map(function (item) {\n        if (item === null) {\n            return null;\n        }\n        if (Array.isArray(item)) {\n            return executeSubSelectedArray(field, item, execContext);\n        }\n        return executeSelectionSet(field.selectionSet, item, execContext);\n    });\n}\nvar hasOwn = Object.prototype.hasOwnProperty;\nfunction merge(dest, src) {\n    if (src !== null && typeof src === 'object') {\n        Object.keys(src).forEach(function (key) {\n            var srcVal = src[key];\n            if (!hasOwn.call(dest, key)) {\n                dest[key] = srcVal;\n            }\n            else {\n                merge(dest[key], srcVal);\n            }\n        });\n    }\n}\nexports.merge = merge;\n//# sourceMappingURL=graphql.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar apollo_utilities_1 = require(\"apollo-utilities\");\nvar graphql_1 = require(\"./graphql\");\nfunction graphql(resolver, document, rootValue, contextValue, variableValues, execOptions) {\n    if (execOptions === void 0) { execOptions = {}; }\n    var mainDefinition = apollo_utilities_1.getMainDefinition(document);\n    var fragments = apollo_utilities_1.getFragmentDefinitions(document);\n    var fragmentMap = apollo_utilities_1.createFragmentMap(fragments);\n    var resultMapper = execOptions.resultMapper;\n    var fragmentMatcher = execOptions.fragmentMatcher || (function () { return true; });\n    var execContext = {\n        fragmentMap: fragmentMap,\n        contextValue: contextValue,\n        variableValues: variableValues,\n        resultMapper: resultMapper,\n        resolver: resolver,\n        fragmentMatcher: fragmentMatcher,\n    };\n    return executeSelectionSet(mainDefinition.selectionSet, rootValue, execContext);\n}\nexports.graphql = graphql;\nfunction executeSelectionSet(selectionSet, rootValue, execContext) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var fragmentMap, contextValue, variables, result, execute;\n        var _this = this;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    fragmentMap = execContext.fragmentMap, contextValue = execContext.contextValue, variables = execContext.variableValues;\n                    result = {};\n                    execute = function (selection) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                        var fieldResult, resultFieldKey, fragment, typeCondition, fragmentResult;\n                        return tslib_1.__generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0:\n                                    if (!apollo_utilities_1.shouldInclude(selection, variables)) {\n                                        return [2];\n                                    }\n                                    if (!apollo_utilities_1.isField(selection)) return [3, 2];\n                                    return [4, executeField(selection, rootValue, execContext)];\n                                case 1:\n                                    fieldResult = _a.sent();\n                                    resultFieldKey = apollo_utilities_1.resultKeyNameFromField(selection);\n                                    if (fieldResult !== undefined) {\n                                        if (result[resultFieldKey] === undefined) {\n                                            result[resultFieldKey] = fieldResult;\n                                        }\n                                        else {\n                                            graphql_1.merge(result[resultFieldKey], fieldResult);\n                                        }\n                                    }\n                                    return [2];\n                                case 2:\n                                    if (apollo_utilities_1.isInlineFragment(selection)) {\n                                        fragment = selection;\n                                    }\n                                    else {\n                                        fragment = fragmentMap[selection.name.value];\n                                        if (!fragment) {\n                                            throw new Error(\"No fragment named \" + selection.name.value);\n                                        }\n                                    }\n                                    typeCondition = fragment.typeCondition.name.value;\n                                    if (!execContext.fragmentMatcher(rootValue, typeCondition, contextValue)) return [3, 4];\n                                    return [4, executeSelectionSet(fragment.selectionSet, rootValue, execContext)];\n                                case 3:\n                                    fragmentResult = _a.sent();\n                                    graphql_1.merge(result, fragmentResult);\n                                    _a.label = 4;\n                                case 4: return [2];\n                            }\n                        });\n                    }); };\n                    return [4, Promise.all(selectionSet.selections.map(execute))];\n                case 1:\n                    _a.sent();\n                    if (execContext.resultMapper) {\n                        return [2, execContext.resultMapper(result, rootValue)];\n                    }\n                    return [2, result];\n            }\n        });\n    });\n}\nfunction executeField(field, rootValue, execContext) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var variables, contextValue, resolver, fieldName, args, info, result;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    variables = execContext.variableValues, contextValue = execContext.contextValue, resolver = execContext.resolver;\n                    fieldName = field.name.value;\n                    args = apollo_utilities_1.argumentsObjectFromField(field, variables);\n                    info = {\n                        isLeaf: !field.selectionSet,\n                        resultKey: apollo_utilities_1.resultKeyNameFromField(field),\n                        directives: apollo_utilities_1.getDirectiveInfoFromField(field, variables),\n                        field: field,\n                    };\n                    return [4, resolver(fieldName, rootValue, args, contextValue, info)];\n                case 1:\n                    result = _a.sent();\n                    if (!field.selectionSet) {\n                        return [2, result];\n                    }\n                    if (result == null) {\n                        return [2, result];\n                    }\n                    if (Array.isArray(result)) {\n                        return [2, executeSubSelectedArray(field, result, execContext)];\n                    }\n                    return [2, executeSelectionSet(field.selectionSet, result, execContext)];\n            }\n        });\n    });\n}\nfunction executeSubSelectedArray(field, result, execContext) {\n    return Promise.all(result.map(function (item) {\n        if (item === null) {\n            return null;\n        }\n        if (Array.isArray(item)) {\n            return executeSubSelectedArray(field, item, execContext);\n        }\n        return executeSelectionSet(field.selectionSet, item, execContext);\n    }));\n}\n//# sourceMappingURL=async.js.map","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * The `applyToJSON()` function defines toJSON() and inspect() prototype\n * methods which are aliases for toString().\n */\nexport default function applyToJSON(classObject) {\n  classObject.prototype.toJSON = classObject.prototype.inspect = classObject.prototype.toString;\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * The `applyToStringTag()` function checks first to see if the runtime\n * supports the `Symbol` class and then if the `Symbol.toStringTag` constant\n * is defined as a `Symbol` instance. If both conditions are met, the\n * Symbol.toStringTag property is defined as a getter that returns the\n * supplied class constructor's name.\n *\n * @method applyToStringTag\n *\n * @param {Class<any>} classObject a class such as Object, String, Number but\n * typically one of your own creation through the class keyword; `class A {}`,\n * for example.\n */\nexport default function applyToStringTag(classObject) {\n  if (typeof Symbol === 'function' && Symbol.toStringTag) {\n    Object.defineProperty(classObject.prototype, Symbol.toStringTag, {\n      get: function get() {\n        return this.constructor.name;\n      }\n    });\n  }\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * A replacement for instanceof which includes an error warning when multi-realm\n * constructors are detected.\n */\n// See: https://expressjs.com/en/advanced/best-practice-performance.html#set-node_env-to-production\n// See: https://webpack.js.org/guides/production/\nexport default process.env.NODE_ENV === 'production' ? // eslint-disable-next-line no-shadow\nfunction instanceOf(value, constructor) {\n  return value instanceof constructor;\n} : // eslint-disable-next-line no-shadow\nfunction instanceOf(value, constructor) {\n  if (value instanceof constructor) {\n    return true;\n  }\n\n  if (value) {\n    var valueClass = value.constructor;\n    var className = constructor.name;\n\n    if (className && valueClass && valueClass.name === className) {\n      throw new Error(\"Cannot use \".concat(className, \" \\\"\").concat(value, \"\\\" from another module or realm.\\n\\nEnsure that there is only one instance of \\\"graphql\\\" in the node_modules\\ndirectory. If different versions of \\\"graphql\\\" are the dependencies of other\\nrelied on modules, use \\\"resolutions\\\" to ensure only one version is installed.\\n\\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\\n\\nDuplicate \\\"graphql\\\" modules cannot be used at the same time since different\\nversions may have different capabilities and behavior. The data from one\\nversion used in the function from another could produce confusing and\\nspurious results.\"));\n    }\n  }\n\n  return false;\n};","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Used to print values in error messages.\n */\nexport default function inspect(value) {\n  switch (_typeof(value)) {\n    case 'string':\n      return JSON.stringify(value);\n\n    case 'function':\n      return value.name ? \"[function \".concat(value.name, \"]\") : '[function]';\n\n    case 'object':\n      if (value) {\n        if (typeof value.inspect === 'function') {\n          return value.inspect();\n        } else if (Array.isArray(value)) {\n          return '[' + value.map(inspect).join(', ') + ']';\n        }\n\n        var properties = Object.keys(value).map(function (k) {\n          return \"\".concat(k, \": \").concat(inspect(value[k]));\n        }).join(', ');\n        return properties ? '{ ' + properties + ' }' : '{}';\n      }\n\n      return String(value);\n\n    default:\n      return String(value);\n  }\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nexport default function invariant(condition, message) {\n  /* istanbul ignore else */\n  if (!condition) {\n    throw new Error(message);\n  }\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Creates a keyed JS object from an array, given a function to produce the keys\n * for each value in the array.\n *\n * This provides a convenient lookup for the array items if the key function\n * produces unique results.\n *\n *     const phoneBook = [\n *       { name: 'Jon', num: '555-1234' },\n *       { name: 'Jenny', num: '867-5309' }\n *     ]\n *\n *     // { Jon: { name: 'Jon', num: '555-1234' },\n *     //   Jenny: { name: 'Jenny', num: '867-5309' } }\n *     const entriesByName = keyMap(\n *       phoneBook,\n *       entry => entry.name\n *     )\n *\n *     // { name: 'Jenny', num: '857-6309' }\n *     const jennyEntry = entriesByName['Jenny']\n *\n */\nexport default function keyMap(list, keyFn) {\n  return list.reduce(function (map, item) {\n    return map[keyFn(item)] = item, map;\n  }, Object.create(null));\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * The set of allowed kind values for AST nodes.\n */\nexport var Kind = Object.freeze({\n  // Name\n  NAME: 'Name',\n  // Document\n  DOCUMENT: 'Document',\n  OPERATION_DEFINITION: 'OperationDefinition',\n  VARIABLE_DEFINITION: 'VariableDefinition',\n  SELECTION_SET: 'SelectionSet',\n  FIELD: 'Field',\n  ARGUMENT: 'Argument',\n  // Fragments\n  FRAGMENT_SPREAD: 'FragmentSpread',\n  INLINE_FRAGMENT: 'InlineFragment',\n  FRAGMENT_DEFINITION: 'FragmentDefinition',\n  // Values\n  VARIABLE: 'Variable',\n  INT: 'IntValue',\n  FLOAT: 'FloatValue',\n  STRING: 'StringValue',\n  BOOLEAN: 'BooleanValue',\n  NULL: 'NullValue',\n  ENUM: 'EnumValue',\n  LIST: 'ListValue',\n  OBJECT: 'ObjectValue',\n  OBJECT_FIELD: 'ObjectField',\n  // Directives\n  DIRECTIVE: 'Directive',\n  // Types\n  NAMED_TYPE: 'NamedType',\n  LIST_TYPE: 'ListType',\n  NON_NULL_TYPE: 'NonNullType',\n  // Type System Definitions\n  SCHEMA_DEFINITION: 'SchemaDefinition',\n  OPERATION_TYPE_DEFINITION: 'OperationTypeDefinition',\n  // Type Definitions\n  SCALAR_TYPE_DEFINITION: 'ScalarTypeDefinition',\n  OBJECT_TYPE_DEFINITION: 'ObjectTypeDefinition',\n  FIELD_DEFINITION: 'FieldDefinition',\n  INPUT_VALUE_DEFINITION: 'InputValueDefinition',\n  INTERFACE_TYPE_DEFINITION: 'InterfaceTypeDefinition',\n  UNION_TYPE_DEFINITION: 'UnionTypeDefinition',\n  ENUM_TYPE_DEFINITION: 'EnumTypeDefinition',\n  ENUM_VALUE_DEFINITION: 'EnumValueDefinition',\n  INPUT_OBJECT_TYPE_DEFINITION: 'InputObjectTypeDefinition',\n  // Directive Definitions\n  DIRECTIVE_DEFINITION: 'DirectiveDefinition',\n  // Type System Extensions\n  SCHEMA_EXTENSION: 'SchemaExtension',\n  // Type Extensions\n  SCALAR_TYPE_EXTENSION: 'ScalarTypeExtension',\n  OBJECT_TYPE_EXTENSION: 'ObjectTypeExtension',\n  INTERFACE_TYPE_EXTENSION: 'InterfaceTypeExtension',\n  UNION_TYPE_EXTENSION: 'UnionTypeExtension',\n  ENUM_TYPE_EXTENSION: 'EnumTypeExtension',\n  INPUT_OBJECT_TYPE_EXTENSION: 'InputObjectTypeExtension'\n});\n/**\n * The enum type representing the possible kind values of AST nodes.\n */","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Creates a keyed JS object from an array, given a function to produce the keys\n * and a function to produce the values from each item in the array.\n *\n *     const phoneBook = [\n *       { name: 'Jon', num: '555-1234' },\n *       { name: 'Jenny', num: '867-5309' }\n *     ]\n *\n *     // { Jon: '555-1234', Jenny: '867-5309' }\n *     const phonesByName = keyValMap(\n *       phoneBook,\n *       entry => entry.name,\n *       entry => entry.num\n *     )\n *\n */\nexport default function keyValMap(list, keyFn, valFn) {\n  return list.reduce(function (map, item) {\n    return map[keyFn(item)] = valFn(item), map;\n  }, Object.create(null));\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Returns true if a value is undefined, or NaN.\n */\nexport default function isInvalid(value) {\n  return value === undefined || value !== value;\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport keyValMap from '../jsutils/keyValMap';\nimport isInvalid from '../jsutils/isInvalid';\nimport { Kind } from '../language/kinds';\n\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * Unlike `valueFromAST()`, no type is provided. The resulting JavaScript value\n * will reflect the provided GraphQL value AST.\n *\n * | GraphQL Value        | JavaScript Value |\n * | -------------------- | ---------------- |\n * | Input Object         | Object           |\n * | List                 | Array            |\n * | Boolean              | Boolean          |\n * | String / Enum        | String           |\n * | Int / Float          | Number           |\n * | Null                 | null             |\n *\n */\nexport function valueFromASTUntyped(valueNode, variables) {\n  switch (valueNode.kind) {\n    case Kind.NULL:\n      return null;\n\n    case Kind.INT:\n      return parseInt(valueNode.value, 10);\n\n    case Kind.FLOAT:\n      return parseFloat(valueNode.value);\n\n    case Kind.STRING:\n    case Kind.ENUM:\n    case Kind.BOOLEAN:\n      return valueNode.value;\n\n    case Kind.LIST:\n      return valueNode.values.map(function (node) {\n        return valueFromASTUntyped(node, variables);\n      });\n\n    case Kind.OBJECT:\n      return keyValMap(valueNode.fields, function (field) {\n        return field.name.value;\n      }, function (field) {\n        return valueFromASTUntyped(field.value, variables);\n      });\n\n    case Kind.VARIABLE:\n      var variableName = valueNode.name.value;\n      return variables && !isInvalid(variables[variableName]) ? variables[variableName] : undefined;\n  }\n  /* istanbul ignore next */\n\n\n  throw new Error('Unexpected value kind: ' + valueNode.kind);\n}","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport defineToJSON from '../jsutils/defineToJSON';\nimport defineToStringTag from '../jsutils/defineToStringTag';\nimport instanceOf from '../jsutils/instanceOf';\nimport inspect from '../jsutils/inspect';\nimport invariant from '../jsutils/invariant';\nimport keyMap from '../jsutils/keyMap';\nimport { Kind } from '../language/kinds';\nimport { valueFromASTUntyped } from '../utilities/valueFromASTUntyped';\nexport function isType(type) {\n  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type) || isListType(type) || isNonNullType(type);\n}\nexport function assertType(type) {\n  !isType(type) ? invariant(0, \"Expected \".concat(inspect(type), \" to be a GraphQL type.\")) : void 0;\n  return type;\n}\n/**\n * There are predicates for each kind of GraphQL type.\n */\n\n// eslint-disable-next-line no-redeclare\nexport function isScalarType(type) {\n  return instanceOf(type, GraphQLScalarType);\n}\nexport function assertScalarType(type) {\n  !isScalarType(type) ? invariant(0, \"Expected \".concat(inspect(type), \" to be a GraphQL Scalar type.\")) : void 0;\n  return type;\n}\n// eslint-disable-next-line no-redeclare\nexport function isObjectType(type) {\n  return instanceOf(type, GraphQLObjectType);\n}\nexport function assertObjectType(type) {\n  !isObjectType(type) ? invariant(0, \"Expected \".concat(inspect(type), \" to be a GraphQL Object type.\")) : void 0;\n  return type;\n}\n// eslint-disable-next-line no-redeclare\nexport function isInterfaceType(type) {\n  return instanceOf(type, GraphQLInterfaceType);\n}\nexport function assertInterfaceType(type) {\n  !isInterfaceType(type) ? invariant(0, \"Expected \".concat(inspect(type), \" to be a GraphQL Interface type.\")) : void 0;\n  return type;\n}\n// eslint-disable-next-line no-redeclare\nexport function isUnionType(type) {\n  return instanceOf(type, GraphQLUnionType);\n}\nexport function assertUnionType(type) {\n  !isUnionType(type) ? invariant(0, \"Expected \".concat(inspect(type), \" to be a GraphQL Union type.\")) : void 0;\n  return type;\n}\n// eslint-disable-next-line no-redeclare\nexport function isEnumType(type) {\n  return instanceOf(type, GraphQLEnumType);\n}\nexport function assertEnumType(type) {\n  !isEnumType(type) ? invariant(0, \"Expected \".concat(inspect(type), \" to be a GraphQL Enum type.\")) : void 0;\n  return type;\n}\n// eslint-disable-next-line no-redeclare\nexport function isInputObjectType(type) {\n  return instanceOf(type, GraphQLInputObjectType);\n}\nexport function assertInputObjectType(type) {\n  !isInputObjectType(type) ? invariant(0, \"Expected \".concat(inspect(type), \" to be a GraphQL Input Object type.\")) : void 0;\n  return type;\n}\n// eslint-disable-next-line no-redeclare\nexport function isListType(type) {\n  return instanceOf(type, GraphQLList);\n}\nexport function assertListType(type) {\n  !isListType(type) ? invariant(0, \"Expected \".concat(inspect(type), \" to be a GraphQL List type.\")) : void 0;\n  return type;\n}\n// eslint-disable-next-line no-redeclare\nexport function isNonNullType(type) {\n  return instanceOf(type, GraphQLNonNull);\n}\nexport function assertNonNullType(type) {\n  !isNonNullType(type) ? invariant(0, \"Expected \".concat(inspect(type), \" to be a GraphQL Non-Null type.\")) : void 0;\n  return type;\n}\n/**\n * These types may be used as input types for arguments and directives.\n */\n\nexport function isInputType(type) {\n  return isScalarType(type) || isEnumType(type) || isInputObjectType(type) || isWrappingType(type) && isInputType(type.ofType);\n}\nexport function assertInputType(type) {\n  !isInputType(type) ? invariant(0, \"Expected \".concat(inspect(type), \" to be a GraphQL input type.\")) : void 0;\n  return type;\n}\n/**\n * These types may be used as output types as the result of fields.\n */\n\nexport function isOutputType(type) {\n  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isWrappingType(type) && isOutputType(type.ofType);\n}\nexport function assertOutputType(type) {\n  !isOutputType(type) ? invariant(0, \"Expected \".concat(inspect(type), \" to be a GraphQL output type.\")) : void 0;\n  return type;\n}\n/**\n * These types may describe types which may be leaf values.\n */\n\nexport function isLeafType(type) {\n  return isScalarType(type) || isEnumType(type);\n}\nexport function assertLeafType(type) {\n  !isLeafType(type) ? invariant(0, \"Expected \".concat(inspect(type), \" to be a GraphQL leaf type.\")) : void 0;\n  return type;\n}\n/**\n * These types may describe the parent context of a selection set.\n */\n\nexport function isCompositeType(type) {\n  return isObjectType(type) || isInterfaceType(type) || isUnionType(type);\n}\nexport function assertCompositeType(type) {\n  !isCompositeType(type) ? invariant(0, \"Expected \".concat(inspect(type), \" to be a GraphQL composite type.\")) : void 0;\n  return type;\n}\n/**\n * These types may describe the parent context of a selection set.\n */\n\nexport function isAbstractType(type) {\n  return isInterfaceType(type) || isUnionType(type);\n}\nexport function assertAbstractType(type) {\n  !isAbstractType(type) ? invariant(0, \"Expected \".concat(inspect(type), \" to be a GraphQL abstract type.\")) : void 0;\n  return type;\n}\n/**\n * List Type Wrapper\n *\n * A list is a wrapping type which points to another type.\n * Lists are often created within the context of defining the fields of\n * an object type.\n *\n * Example:\n *\n *     const PersonType = new GraphQLObjectType({\n *       name: 'Person',\n *       fields: () => ({\n *         parents: { type: GraphQLList(PersonType) },\n *         children: { type: GraphQLList(PersonType) },\n *       })\n *     })\n *\n */\n\n// eslint-disable-next-line no-redeclare\nexport function GraphQLList(ofType) {\n  if (this instanceof GraphQLList) {\n    this.ofType = assertType(ofType);\n  } else {\n    return new GraphQLList(ofType);\n  }\n} // Need to cast through any to alter the prototype.\n\nGraphQLList.prototype.toString = function toString() {\n  return '[' + String(this.ofType) + ']';\n};\n\ndefineToJSON(GraphQLList);\n/**\n * Non-Null Type Wrapper\n *\n * A non-null is a wrapping type which points to another type.\n * Non-null types enforce that their values are never null and can ensure\n * an error is raised if this ever occurs during a request. It is useful for\n * fields which you can make a strong guarantee on non-nullability, for example\n * usually the id field of a database row will never be null.\n *\n * Example:\n *\n *     const RowType = new GraphQLObjectType({\n *       name: 'Row',\n *       fields: () => ({\n *         id: { type: GraphQLNonNull(GraphQLString) },\n *       })\n *     })\n *\n * Note: the enforcement of non-nullability occurs within the executor.\n */\n\n// eslint-disable-next-line no-redeclare\nexport function GraphQLNonNull(ofType) {\n  if (this instanceof GraphQLNonNull) {\n    this.ofType = assertNullableType(ofType);\n  } else {\n    return new GraphQLNonNull(ofType);\n  }\n} // Need to cast through any to alter the prototype.\n\nGraphQLNonNull.prototype.toString = function toString() {\n  return String(this.ofType) + '!';\n};\n\ndefineToJSON(GraphQLNonNull);\n/**\n * These types wrap and modify other types\n */\n\nexport function isWrappingType(type) {\n  return isListType(type) || isNonNullType(type);\n}\nexport function assertWrappingType(type) {\n  !isWrappingType(type) ? invariant(0, \"Expected \".concat(inspect(type), \" to be a GraphQL wrapping type.\")) : void 0;\n  return type;\n}\n/**\n * These types can all accept null as a value.\n */\n\nexport function isNullableType(type) {\n  return isType(type) && !isNonNullType(type);\n}\nexport function assertNullableType(type) {\n  !isNullableType(type) ? invariant(0, \"Expected \".concat(inspect(type), \" to be a GraphQL nullable type.\")) : void 0;\n  return type;\n}\n/* eslint-disable no-redeclare */\n\nexport function getNullableType(type) {\n  /* eslint-enable no-redeclare */\n  if (type) {\n    return isNonNullType(type) ? type.ofType : type;\n  }\n}\n/**\n * These named types do not include modifiers like List or NonNull.\n */\n\nexport function isNamedType(type) {\n  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type);\n}\nexport function assertNamedType(type) {\n  !isNamedType(type) ? invariant(0, \"Expected \".concat(inspect(type), \" to be a GraphQL named type.\")) : void 0;\n  return type;\n}\n/* eslint-disable no-redeclare */\n\nexport function getNamedType(type) {\n  /* eslint-enable no-redeclare */\n  if (type) {\n    var unwrappedType = type;\n\n    while (isWrappingType(unwrappedType)) {\n      unwrappedType = unwrappedType.ofType;\n    }\n\n    return unwrappedType;\n  }\n}\n/**\n * Used while defining GraphQL types to allow for circular references in\n * otherwise immutable type definitions.\n */\n\nfunction resolveThunk(thunk) {\n  return typeof thunk === 'function' ? thunk() : thunk;\n}\n/**\n * Scalar Type Definition\n *\n * The leaf values of any request and input values to arguments are\n * Scalars (or Enums) and are defined with a name and a series of functions\n * used to parse input from ast or variables and to ensure validity.\n *\n * If a type's serialize function does not return a value (i.e. it returns\n * `undefined`) then an error will be raised and a `null` value will be returned\n * in the response. If the serialize function returns `null`, then no error will\n * be included in the response.\n *\n * Example:\n *\n *     const OddType = new GraphQLScalarType({\n *       name: 'Odd',\n *       serialize(value) {\n *         if (value % 2 === 1) {\n *           return value;\n *         }\n *       }\n *     });\n *\n */\n\n\nexport var GraphQLScalarType =\n/*#__PURE__*/\nfunction () {\n  function GraphQLScalarType(config) {\n    _defineProperty(this, \"name\", void 0);\n\n    _defineProperty(this, \"description\", void 0);\n\n    _defineProperty(this, \"serialize\", void 0);\n\n    _defineProperty(this, \"parseValue\", void 0);\n\n    _defineProperty(this, \"parseLiteral\", void 0);\n\n    _defineProperty(this, \"astNode\", void 0);\n\n    _defineProperty(this, \"extensionASTNodes\", void 0);\n\n    this.name = config.name;\n    this.description = config.description;\n    this.serialize = config.serialize;\n\n    this.parseValue = config.parseValue || function (value) {\n      return value;\n    };\n\n    this.parseLiteral = config.parseLiteral || valueFromASTUntyped;\n    this.astNode = config.astNode;\n    this.extensionASTNodes = config.extensionASTNodes;\n    !(typeof config.name === 'string') ? invariant(0, 'Must provide name.') : void 0;\n    !(typeof config.serialize === 'function') ? invariant(0, \"\".concat(this.name, \" must provide \\\"serialize\\\" function. If this custom Scalar \") + 'is also used as an input type, ensure \"parseValue\" and \"parseLiteral\" ' + 'functions are also provided.') : void 0;\n\n    if (config.parseValue || config.parseLiteral) {\n      !(typeof config.parseValue === 'function' && typeof config.parseLiteral === 'function') ? invariant(0, \"\".concat(this.name, \" must provide both \\\"parseValue\\\" and \\\"parseLiteral\\\" \") + 'functions.') : void 0;\n    }\n  }\n\n  var _proto = GraphQLScalarType.prototype;\n\n  _proto.toString = function toString() {\n    return this.name;\n  };\n\n  return GraphQLScalarType;\n}(); // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\n\ndefineToStringTag(GraphQLScalarType);\ndefineToJSON(GraphQLScalarType);\n\n/**\n * Object Type Definition\n *\n * Almost all of the GraphQL types you define will be object types. Object types\n * have a name, but most importantly describe their fields.\n *\n * Example:\n *\n *     const AddressType = new GraphQLObjectType({\n *       name: 'Address',\n *       fields: {\n *         street: { type: GraphQLString },\n *         number: { type: GraphQLInt },\n *         formatted: {\n *           type: GraphQLString,\n *           resolve(obj) {\n *             return obj.number + ' ' + obj.street\n *           }\n *         }\n *       }\n *     });\n *\n * When two types need to refer to each other, or a type needs to refer to\n * itself in a field, you can use a function expression (aka a closure or a\n * thunk) to supply the fields lazily.\n *\n * Example:\n *\n *     const PersonType = new GraphQLObjectType({\n *       name: 'Person',\n *       fields: () => ({\n *         name: { type: GraphQLString },\n *         bestFriend: { type: PersonType },\n *       })\n *     });\n *\n */\nexport var GraphQLObjectType =\n/*#__PURE__*/\nfunction () {\n  function GraphQLObjectType(config) {\n    _defineProperty(this, \"name\", void 0);\n\n    _defineProperty(this, \"description\", void 0);\n\n    _defineProperty(this, \"astNode\", void 0);\n\n    _defineProperty(this, \"extensionASTNodes\", void 0);\n\n    _defineProperty(this, \"isTypeOf\", void 0);\n\n    _defineProperty(this, \"_fields\", void 0);\n\n    _defineProperty(this, \"_interfaces\", void 0);\n\n    this.name = config.name;\n    this.description = config.description;\n    this.astNode = config.astNode;\n    this.extensionASTNodes = config.extensionASTNodes;\n    this.isTypeOf = config.isTypeOf;\n    this._fields = defineFieldMap.bind(undefined, config);\n    this._interfaces = defineInterfaces.bind(undefined, config);\n    !(typeof config.name === 'string') ? invariant(0, 'Must provide name.') : void 0;\n    !(config.isTypeOf == null || typeof config.isTypeOf === 'function') ? invariant(0, \"\".concat(this.name, \" must provide \\\"isTypeOf\\\" as a function, \") + \"but got: \".concat(inspect(config.isTypeOf), \".\")) : void 0;\n  }\n\n  var _proto2 = GraphQLObjectType.prototype;\n\n  _proto2.getFields = function getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  };\n\n  _proto2.getInterfaces = function getInterfaces() {\n    if (typeof this._interfaces === 'function') {\n      this._interfaces = this._interfaces();\n    }\n\n    return this._interfaces;\n  };\n\n  _proto2.toString = function toString() {\n    return this.name;\n  };\n\n  return GraphQLObjectType;\n}(); // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\n\ndefineToStringTag(GraphQLObjectType);\ndefineToJSON(GraphQLObjectType);\n\nfunction defineInterfaces(config) {\n  var interfaces = resolveThunk(config.interfaces) || [];\n  !Array.isArray(interfaces) ? invariant(0, \"\".concat(config.name, \" interfaces must be an Array or a function which returns \") + 'an Array.') : void 0;\n  return interfaces;\n}\n\nfunction defineFieldMap(config) {\n  var fieldMap = resolveThunk(config.fields) || {};\n  !isPlainObj(fieldMap) ? invariant(0, \"\".concat(config.name, \" fields must be an object with field names as keys or a \") + 'function which returns such an object.') : void 0;\n  var resultFieldMap = Object.create(null);\n\n  var _arr = Object.keys(fieldMap);\n\n  var _loop = function _loop() {\n    var fieldName = _arr[_i];\n    var fieldConfig = fieldMap[fieldName];\n    !isPlainObj(fieldConfig) ? invariant(0, \"\".concat(config.name, \".\").concat(fieldName, \" field config must be an object\")) : void 0;\n    !!fieldConfig.hasOwnProperty('isDeprecated') ? invariant(0, \"\".concat(config.name, \".\").concat(fieldName, \" should provide \\\"deprecationReason\\\" \") + 'instead of \"isDeprecated\".') : void 0;\n\n    var field = _objectSpread({}, fieldConfig, {\n      isDeprecated: Boolean(fieldConfig.deprecationReason),\n      name: fieldName\n    });\n\n    !(field.resolve == null || typeof field.resolve === 'function') ? invariant(0, \"\".concat(config.name, \".\").concat(fieldName, \" field resolver must be a function if \") + \"provided, but got: \".concat(inspect(field.resolve), \".\")) : void 0;\n    var argsConfig = fieldConfig.args;\n\n    if (!argsConfig) {\n      field.args = [];\n    } else {\n      !isPlainObj(argsConfig) ? invariant(0, \"\".concat(config.name, \".\").concat(fieldName, \" args must be an object with argument \") + 'names as keys.') : void 0;\n      field.args = Object.keys(argsConfig).map(function (argName) {\n        var arg = argsConfig[argName];\n        return {\n          name: argName,\n          description: arg.description === undefined ? null : arg.description,\n          type: arg.type,\n          defaultValue: arg.defaultValue,\n          astNode: arg.astNode\n        };\n      });\n    }\n\n    resultFieldMap[fieldName] = field;\n  };\n\n  for (var _i = 0; _i < _arr.length; _i++) {\n    _loop();\n  }\n\n  return resultFieldMap;\n}\n\nfunction isPlainObj(obj) {\n  return obj && _typeof(obj) === 'object' && !Array.isArray(obj);\n}\n\nexport function isRequiredArgument(arg) {\n  return isNonNullType(arg.type) && arg.defaultValue === undefined;\n}\n\n/**\n * Interface Type Definition\n *\n * When a field can return one of a heterogeneous set of types, a Interface type\n * is used to describe what types are possible, what fields are in common across\n * all types, as well as a function to determine which type is actually used\n * when the field is resolved.\n *\n * Example:\n *\n *     const EntityType = new GraphQLInterfaceType({\n *       name: 'Entity',\n *       fields: {\n *         name: { type: GraphQLString }\n *       }\n *     });\n *\n */\nexport var GraphQLInterfaceType =\n/*#__PURE__*/\nfunction () {\n  function GraphQLInterfaceType(config) {\n    _defineProperty(this, \"name\", void 0);\n\n    _defineProperty(this, \"description\", void 0);\n\n    _defineProperty(this, \"astNode\", void 0);\n\n    _defineProperty(this, \"extensionASTNodes\", void 0);\n\n    _defineProperty(this, \"resolveType\", void 0);\n\n    _defineProperty(this, \"_fields\", void 0);\n\n    this.name = config.name;\n    this.description = config.description;\n    this.astNode = config.astNode;\n    this.extensionASTNodes = config.extensionASTNodes;\n    this.resolveType = config.resolveType;\n    this._fields = defineFieldMap.bind(undefined, config);\n    !(typeof config.name === 'string') ? invariant(0, 'Must provide name.') : void 0;\n    !(config.resolveType == null || typeof config.resolveType === 'function') ? invariant(0, \"\".concat(this.name, \" must provide \\\"resolveType\\\" as a function, \") + \"but got: \".concat(inspect(config.resolveType), \".\")) : void 0;\n  }\n\n  var _proto3 = GraphQLInterfaceType.prototype;\n\n  _proto3.getFields = function getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  };\n\n  _proto3.toString = function toString() {\n    return this.name;\n  };\n\n  return GraphQLInterfaceType;\n}(); // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\n\ndefineToStringTag(GraphQLInterfaceType);\ndefineToJSON(GraphQLInterfaceType);\n\n/**\n * Union Type Definition\n *\n * When a field can return one of a heterogeneous set of types, a Union type\n * is used to describe what types are possible as well as providing a function\n * to determine which type is actually used when the field is resolved.\n *\n * Example:\n *\n *     const PetType = new GraphQLUnionType({\n *       name: 'Pet',\n *       types: [ DogType, CatType ],\n *       resolveType(value) {\n *         if (value instanceof Dog) {\n *           return DogType;\n *         }\n *         if (value instanceof Cat) {\n *           return CatType;\n *         }\n *       }\n *     });\n *\n */\nexport var GraphQLUnionType =\n/*#__PURE__*/\nfunction () {\n  function GraphQLUnionType(config) {\n    _defineProperty(this, \"name\", void 0);\n\n    _defineProperty(this, \"description\", void 0);\n\n    _defineProperty(this, \"astNode\", void 0);\n\n    _defineProperty(this, \"extensionASTNodes\", void 0);\n\n    _defineProperty(this, \"resolveType\", void 0);\n\n    _defineProperty(this, \"_types\", void 0);\n\n    this.name = config.name;\n    this.description = config.description;\n    this.astNode = config.astNode;\n    this.extensionASTNodes = config.extensionASTNodes;\n    this.resolveType = config.resolveType;\n    this._types = defineTypes.bind(undefined, config);\n    !(typeof config.name === 'string') ? invariant(0, 'Must provide name.') : void 0;\n    !(config.resolveType == null || typeof config.resolveType === 'function') ? invariant(0, \"\".concat(this.name, \" must provide \\\"resolveType\\\" as a function, \") + \"but got: \".concat(inspect(config.resolveType), \".\")) : void 0;\n  }\n\n  var _proto4 = GraphQLUnionType.prototype;\n\n  _proto4.getTypes = function getTypes() {\n    if (typeof this._types === 'function') {\n      this._types = this._types();\n    }\n\n    return this._types;\n  };\n\n  _proto4.toString = function toString() {\n    return this.name;\n  };\n\n  return GraphQLUnionType;\n}(); // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\n\ndefineToStringTag(GraphQLUnionType);\ndefineToJSON(GraphQLUnionType);\n\nfunction defineTypes(config) {\n  var types = resolveThunk(config.types) || [];\n  !Array.isArray(types) ? invariant(0, 'Must provide Array of types or a function which returns ' + \"such an array for Union \".concat(config.name, \".\")) : void 0;\n  return types;\n}\n\n/**\n * Enum Type Definition\n *\n * Some leaf values of requests and input values are Enums. GraphQL serializes\n * Enum values as strings, however internally Enums can be represented by any\n * kind of type, often integers.\n *\n * Example:\n *\n *     const RGBType = new GraphQLEnumType({\n *       name: 'RGB',\n *       values: {\n *         RED: { value: 0 },\n *         GREEN: { value: 1 },\n *         BLUE: { value: 2 }\n *       }\n *     });\n *\n * Note: If a value is not provided in a definition, the name of the enum value\n * will be used as its internal value.\n */\nexport var GraphQLEnumType\n/* <T> */\n=\n/*#__PURE__*/\nfunction () {\n  function GraphQLEnumType(config\n  /* <T> */\n  ) {\n    _defineProperty(this, \"name\", void 0);\n\n    _defineProperty(this, \"description\", void 0);\n\n    _defineProperty(this, \"astNode\", void 0);\n\n    _defineProperty(this, \"extensionASTNodes\", void 0);\n\n    _defineProperty(this, \"_values\", void 0);\n\n    _defineProperty(this, \"_valueLookup\", void 0);\n\n    _defineProperty(this, \"_nameLookup\", void 0);\n\n    this.name = config.name;\n    this.description = config.description;\n    this.astNode = config.astNode;\n    this.extensionASTNodes = config.extensionASTNodes;\n    this._values = defineEnumValues(this, config.values);\n    this._valueLookup = new Map(this._values.map(function (enumValue) {\n      return [enumValue.value, enumValue];\n    }));\n    this._nameLookup = keyMap(this._values, function (value) {\n      return value.name;\n    });\n    !(typeof config.name === 'string') ? invariant(0, 'Must provide name.') : void 0;\n  }\n\n  var _proto5 = GraphQLEnumType.prototype;\n\n  _proto5.getValues = function getValues() {\n    return this._values;\n  };\n\n  _proto5.getValue = function getValue(name) {\n    return this._nameLookup[name];\n  };\n\n  _proto5.serialize = function serialize(value\n  /* T */\n  ) {\n    var enumValue = this._valueLookup.get(value);\n\n    if (enumValue) {\n      return enumValue.name;\n    }\n  };\n\n  _proto5.parseValue = function parseValue(value)\n  /* T */\n  {\n    if (typeof value === 'string') {\n      var enumValue = this.getValue(value);\n\n      if (enumValue) {\n        return enumValue.value;\n      }\n    }\n  };\n\n  _proto5.parseLiteral = function parseLiteral(valueNode, _variables)\n  /* T */\n  {\n    // Note: variables will be resolved to a value before calling this function.\n    if (valueNode.kind === Kind.ENUM) {\n      var enumValue = this.getValue(valueNode.value);\n\n      if (enumValue) {\n        return enumValue.value;\n      }\n    }\n  };\n\n  _proto5.toString = function toString() {\n    return this.name;\n  };\n\n  return GraphQLEnumType;\n}(); // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\n\ndefineToStringTag(GraphQLEnumType);\ndefineToJSON(GraphQLEnumType);\n\nfunction defineEnumValues(type, valueMap\n/* <T> */\n) {\n  !isPlainObj(valueMap) ? invariant(0, \"\".concat(type.name, \" values must be an object with value names as keys.\")) : void 0;\n  return Object.keys(valueMap).map(function (valueName) {\n    var value = valueMap[valueName];\n    !isPlainObj(value) ? invariant(0, \"\".concat(type.name, \".\").concat(valueName, \" must refer to an object with a \\\"value\\\" key \") + \"representing an internal value but got: \".concat(inspect(value), \".\")) : void 0;\n    !!value.hasOwnProperty('isDeprecated') ? invariant(0, \"\".concat(type.name, \".\").concat(valueName, \" should provide \\\"deprecationReason\\\" instead \") + 'of \"isDeprecated\".') : void 0;\n    return {\n      name: valueName,\n      description: value.description,\n      isDeprecated: Boolean(value.deprecationReason),\n      deprecationReason: value.deprecationReason,\n      astNode: value.astNode,\n      value: value.hasOwnProperty('value') ? value.value : valueName\n    };\n  });\n}\n\n/**\n * Input Object Type Definition\n *\n * An input object defines a structured collection of fields which may be\n * supplied to a field argument.\n *\n * Using `NonNull` will ensure that a value must be provided by the query\n *\n * Example:\n *\n *     const GeoPoint = new GraphQLInputObjectType({\n *       name: 'GeoPoint',\n *       fields: {\n *         lat: { type: GraphQLNonNull(GraphQLFloat) },\n *         lon: { type: GraphQLNonNull(GraphQLFloat) },\n *         alt: { type: GraphQLFloat, defaultValue: 0 },\n *       }\n *     });\n *\n */\nexport var GraphQLInputObjectType =\n/*#__PURE__*/\nfunction () {\n  function GraphQLInputObjectType(config) {\n    _defineProperty(this, \"name\", void 0);\n\n    _defineProperty(this, \"description\", void 0);\n\n    _defineProperty(this, \"astNode\", void 0);\n\n    _defineProperty(this, \"extensionASTNodes\", void 0);\n\n    _defineProperty(this, \"_fields\", void 0);\n\n    this.name = config.name;\n    this.description = config.description;\n    this.astNode = config.astNode;\n    this.extensionASTNodes = config.extensionASTNodes;\n    this._fields = defineInputFieldMap.bind(undefined, config);\n    !(typeof config.name === 'string') ? invariant(0, 'Must provide name.') : void 0;\n  }\n\n  var _proto6 = GraphQLInputObjectType.prototype;\n\n  _proto6.getFields = function getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  };\n\n  _proto6.toString = function toString() {\n    return this.name;\n  };\n\n  return GraphQLInputObjectType;\n}(); // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\n\ndefineToStringTag(GraphQLInputObjectType);\ndefineToJSON(GraphQLInputObjectType);\n\nfunction defineInputFieldMap(config) {\n  var fieldMap = resolveThunk(config.fields) || {};\n  !isPlainObj(fieldMap) ? invariant(0, \"\".concat(config.name, \" fields must be an object with field names as keys or a \") + 'function which returns such an object.') : void 0;\n  var resultFieldMap = Object.create(null);\n\n  var _arr2 = Object.keys(fieldMap);\n\n  for (var _i2 = 0; _i2 < _arr2.length; _i2++) {\n    var fieldName = _arr2[_i2];\n\n    var field = _objectSpread({}, fieldMap[fieldName], {\n      name: fieldName\n    });\n\n    !!field.hasOwnProperty('resolve') ? invariant(0, \"\".concat(config.name, \".\").concat(fieldName, \" field has a resolve property, but \") + 'Input Types cannot define resolvers.') : void 0;\n    resultFieldMap[fieldName] = field;\n  }\n\n  return resultFieldMap;\n}\n\nexport function isRequiredInputField(field) {\n  return isNonNullType(field.type) && field.defaultValue === undefined;\n}","/**\n * Copyright (c) 2018-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/* eslint-disable no-redeclare */\n// $FlowFixMe workaround for: https://github.com/facebook/flow/issues/4441\nvar isFinite = Number.isFinite || function (value) {\n  return typeof value === 'number' && isFinite(value);\n};\n\nexport default isFinite;","/**\n * Copyright (c) 2018-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/* eslint-disable no-redeclare */\n// $FlowFixMe workaround for: https://github.com/facebook/flow/issues/4441\nvar isInteger = Number.isInteger || function (value) {\n  return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n};\n\nexport default isInteger;","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport inspect from '../jsutils/inspect';\nimport isFinite from '../jsutils/isFinite';\nimport isInteger from '../jsutils/isInteger';\nimport { GraphQLScalarType, isNamedType } from './definition';\nimport { Kind } from '../language/kinds'; // As per the GraphQL Spec, Integers are only treated as valid when a valid\n// 32-bit signed integer, providing the broadest support across platforms.\n//\n// n.b. JavaScript's integers are safe between -(2^53 - 1) and 2^53 - 1 because\n// they are internally represented as IEEE 754 doubles.\n\nvar MAX_INT = 2147483647;\nvar MIN_INT = -2147483648;\n\nfunction serializeInt(value) {\n  if (typeof value === 'boolean') {\n    return value ? 1 : 0;\n  }\n\n  var num = value;\n\n  if (typeof value === 'string' && value !== '') {\n    num = Number(value);\n  }\n\n  if (!isInteger(num)) {\n    throw new TypeError(\"Int cannot represent non-integer value: \".concat(inspect(value)));\n  }\n\n  if (num > MAX_INT || num < MIN_INT) {\n    throw new TypeError(\"Int cannot represent non 32-bit signed integer value: \".concat(inspect(value)));\n  }\n\n  return num;\n}\n\nfunction coerceInt(value) {\n  if (!isInteger(value)) {\n    throw new TypeError(\"Int cannot represent non-integer value: \".concat(inspect(value)));\n  }\n\n  if (value > MAX_INT || value < MIN_INT) {\n    throw new TypeError(\"Int cannot represent non 32-bit signed integer value: \".concat(inspect(value)));\n  }\n\n  return value;\n}\n\nexport var GraphQLInt = new GraphQLScalarType({\n  name: 'Int',\n  description: 'The `Int` scalar type represents non-fractional signed whole numeric ' + 'values. Int can represent values between -(2^31) and 2^31 - 1. ',\n  serialize: serializeInt,\n  parseValue: coerceInt,\n  parseLiteral: function parseLiteral(ast) {\n    if (ast.kind === Kind.INT) {\n      var num = parseInt(ast.value, 10);\n\n      if (num <= MAX_INT && num >= MIN_INT) {\n        return num;\n      }\n    }\n\n    return undefined;\n  }\n});\n\nfunction serializeFloat(value) {\n  if (typeof value === 'boolean') {\n    return value ? 1 : 0;\n  }\n\n  var num = value;\n\n  if (typeof value === 'string' && value !== '') {\n    num = Number(value);\n  }\n\n  if (!isFinite(num)) {\n    throw new TypeError(\"Float cannot represent non numeric value: \".concat(inspect(value)));\n  }\n\n  return num;\n}\n\nfunction coerceFloat(value) {\n  if (!isFinite(value)) {\n    throw new TypeError(\"Float cannot represent non numeric value: \".concat(inspect(value)));\n  }\n\n  return value;\n}\n\nexport var GraphQLFloat = new GraphQLScalarType({\n  name: 'Float',\n  description: 'The `Float` scalar type represents signed double-precision fractional ' + 'values as specified by ' + '[IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). ',\n  serialize: serializeFloat,\n  parseValue: coerceFloat,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.FLOAT || ast.kind === Kind.INT ? parseFloat(ast.value) : undefined;\n  }\n});\n\nfunction serializeString(value) {\n  // Support serializing objects with custom valueOf() functions - a common way\n  // to represent an complex value which can be represented as a string\n  // (ex: MongoDB id objects).\n  var result = value && typeof value.valueOf === 'function' ? value.valueOf() : value; // Serialize string, boolean and number values to a string, but do not\n  // attempt to coerce object, function, symbol, or other types as strings.\n\n  if (typeof result === 'string') {\n    return result;\n  }\n\n  if (typeof result === 'boolean') {\n    return result ? 'true' : 'false';\n  }\n\n  if (isFinite(result)) {\n    return result.toString();\n  }\n\n  throw new TypeError(\"String cannot represent value: \".concat(inspect(value)));\n}\n\nfunction coerceString(value) {\n  if (typeof value !== 'string') {\n    throw new TypeError(\"String cannot represent a non string value: \".concat(inspect(value)));\n  }\n\n  return value;\n}\n\nexport var GraphQLString = new GraphQLScalarType({\n  name: 'String',\n  description: 'The `String` scalar type represents textual data, represented as UTF-8 ' + 'character sequences. The String type is most often used by GraphQL to ' + 'represent free-form human-readable text.',\n  serialize: serializeString,\n  parseValue: coerceString,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.STRING ? ast.value : undefined;\n  }\n});\n\nfunction serializeBoolean(value) {\n  if (typeof value === 'boolean') {\n    return value;\n  }\n\n  if (isFinite(value)) {\n    return value !== 0;\n  }\n\n  throw new TypeError(\"Boolean cannot represent a non boolean value: \".concat(inspect(value)));\n}\n\nfunction coerceBoolean(value) {\n  if (typeof value !== 'boolean') {\n    throw new TypeError(\"Boolean cannot represent a non boolean value: \".concat(inspect(value)));\n  }\n\n  return value;\n}\n\nexport var GraphQLBoolean = new GraphQLScalarType({\n  name: 'Boolean',\n  description: 'The `Boolean` scalar type represents `true` or `false`.',\n  serialize: serializeBoolean,\n  parseValue: coerceBoolean,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.BOOLEAN ? ast.value : undefined;\n  }\n});\n\nfunction serializeID(value) {\n  // Support serializing objects with custom valueOf() functions - a common way\n  // to represent an object identifier (ex. MongoDB).\n  var result = value && typeof value.valueOf === 'function' ? value.valueOf() : value;\n\n  if (typeof result === 'string') {\n    return result;\n  }\n\n  if (isInteger(result)) {\n    return String(result);\n  }\n\n  throw new TypeError(\"ID cannot represent value: \".concat(inspect(value)));\n}\n\nfunction coerceID(value) {\n  if (typeof value === 'string') {\n    return value;\n  }\n\n  if (isInteger(value)) {\n    return value.toString();\n  }\n\n  throw new TypeError(\"ID cannot represent value: \".concat(inspect(value)));\n}\n\nexport var GraphQLID = new GraphQLScalarType({\n  name: 'ID',\n  description: 'The `ID` scalar type represents a unique identifier, often used to ' + 'refetch an object or as key for a cache. The ID type appears in a JSON ' + 'response as a String; however, it is not intended to be human-readable. ' + 'When expected as an input type, any string (such as `\"4\"`) or integer ' + '(such as `4`) input value will be accepted as an ID.',\n  serialize: serializeID,\n  parseValue: coerceID,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.STRING || ast.kind === Kind.INT ? ast.value : undefined;\n  }\n});\nexport var specifiedScalarTypes = [GraphQLString, GraphQLInt, GraphQLFloat, GraphQLBoolean, GraphQLID];\nexport function isSpecifiedScalarType(type) {\n  return isNamedType(type) && ( // Would prefer to use specifiedScalarTypes.some(), however %checks needs\n  // a simple expression.\n  type.name === GraphQLString.name || type.name === GraphQLInt.name || type.name === GraphQLFloat.name || type.name === GraphQLBoolean.name || type.name === GraphQLID.name);\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * The set of allowed directive location values.\n */\nexport var DirectiveLocation = Object.freeze({\n  // Request Definitions\n  QUERY: 'QUERY',\n  MUTATION: 'MUTATION',\n  SUBSCRIPTION: 'SUBSCRIPTION',\n  FIELD: 'FIELD',\n  FRAGMENT_DEFINITION: 'FRAGMENT_DEFINITION',\n  FRAGMENT_SPREAD: 'FRAGMENT_SPREAD',\n  INLINE_FRAGMENT: 'INLINE_FRAGMENT',\n  VARIABLE_DEFINITION: 'VARIABLE_DEFINITION',\n  // Type System Definitions\n  SCHEMA: 'SCHEMA',\n  SCALAR: 'SCALAR',\n  OBJECT: 'OBJECT',\n  FIELD_DEFINITION: 'FIELD_DEFINITION',\n  ARGUMENT_DEFINITION: 'ARGUMENT_DEFINITION',\n  INTERFACE: 'INTERFACE',\n  UNION: 'UNION',\n  ENUM: 'ENUM',\n  ENUM_VALUE: 'ENUM_VALUE',\n  INPUT_OBJECT: 'INPUT_OBJECT',\n  INPUT_FIELD_DEFINITION: 'INPUT_FIELD_DEFINITION'\n});\n/**\n * The enum type representing the directive location values.\n */","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLNonNull } from './definition';\nimport { GraphQLString, GraphQLBoolean } from './scalars';\nimport defineToStringTag from '../jsutils/defineToStringTag';\nimport defineToJSON from '../jsutils/defineToJSON';\nimport instanceOf from '../jsutils/instanceOf';\nimport invariant from '../jsutils/invariant';\nimport { DirectiveLocation } from '../language/directiveLocation';\n/**\n * Test if the given value is a GraphQL directive.\n */\n\n// eslint-disable-next-line no-redeclare\nexport function isDirective(directive) {\n  return instanceOf(directive, GraphQLDirective);\n}\n/**\n * Directives are used by the GraphQL runtime as a way of modifying execution\n * behavior. Type system creators will usually not create these directly.\n */\n\nexport var GraphQLDirective =\n/*#__PURE__*/\nfunction () {\n  function GraphQLDirective(config) {\n    _defineProperty(this, \"name\", void 0);\n\n    _defineProperty(this, \"description\", void 0);\n\n    _defineProperty(this, \"locations\", void 0);\n\n    _defineProperty(this, \"args\", void 0);\n\n    _defineProperty(this, \"astNode\", void 0);\n\n    this.name = config.name;\n    this.description = config.description;\n    this.locations = config.locations;\n    this.astNode = config.astNode;\n    !config.name ? invariant(0, 'Directive must be named.') : void 0;\n    !Array.isArray(config.locations) ? invariant(0, 'Must provide locations for directive.') : void 0;\n    var args = config.args;\n\n    if (!args) {\n      this.args = [];\n    } else {\n      !!Array.isArray(args) ? invariant(0, \"@\".concat(config.name, \" args must be an object with argument names as keys.\")) : void 0;\n      this.args = Object.keys(args).map(function (argName) {\n        var arg = args[argName];\n        return {\n          name: argName,\n          description: arg.description === undefined ? null : arg.description,\n          type: arg.type,\n          defaultValue: arg.defaultValue,\n          astNode: arg.astNode\n        };\n      });\n    }\n  }\n\n  var _proto = GraphQLDirective.prototype;\n\n  _proto.toString = function toString() {\n    return '@' + this.name;\n  };\n\n  return GraphQLDirective;\n}(); // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\n\ndefineToStringTag(GraphQLDirective);\ndefineToJSON(GraphQLDirective);\n\n/**\n * Used to conditionally include fields or fragments.\n */\nexport var GraphQLIncludeDirective = new GraphQLDirective({\n  name: 'include',\n  description: 'Directs the executor to include this field or fragment only when ' + 'the `if` argument is true.',\n  locations: [DirectiveLocation.FIELD, DirectiveLocation.FRAGMENT_SPREAD, DirectiveLocation.INLINE_FRAGMENT],\n  args: {\n    if: {\n      type: GraphQLNonNull(GraphQLBoolean),\n      description: 'Included when true.'\n    }\n  }\n});\n/**\n * Used to conditionally skip (exclude) fields or fragments.\n */\n\nexport var GraphQLSkipDirective = new GraphQLDirective({\n  name: 'skip',\n  description: 'Directs the executor to skip this field or fragment when the `if` ' + 'argument is true.',\n  locations: [DirectiveLocation.FIELD, DirectiveLocation.FRAGMENT_SPREAD, DirectiveLocation.INLINE_FRAGMENT],\n  args: {\n    if: {\n      type: GraphQLNonNull(GraphQLBoolean),\n      description: 'Skipped when true.'\n    }\n  }\n});\n/**\n * Constant string used for default reason for a deprecation.\n */\n\nexport var DEFAULT_DEPRECATION_REASON = 'No longer supported';\n/**\n * Used to declare element of a GraphQL schema as deprecated.\n */\n\nexport var GraphQLDeprecatedDirective = new GraphQLDirective({\n  name: 'deprecated',\n  description: 'Marks an element of a GraphQL schema as no longer supported.',\n  locations: [DirectiveLocation.FIELD_DEFINITION, DirectiveLocation.ENUM_VALUE],\n  args: {\n    reason: {\n      type: GraphQLString,\n      description: 'Explains why this element was deprecated, usually also including a ' + 'suggestion for how to access supported similar data. Formatted using ' + 'the Markdown syntax (as specified by [CommonMark](https://commonmark.org/).',\n      defaultValue: DEFAULT_DEPRECATION_REASON\n    }\n  }\n});\n/**\n * The full list of specified directives.\n */\n\nexport var specifiedDirectives = [GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective];\nexport function isSpecifiedDirective(directive) {\n  return specifiedDirectives.some(function (specifiedDirective) {\n    return specifiedDirective.name === directive.name;\n  });\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/* eslint-disable no-redeclare */\n// $FlowFixMe workaround for: https://github.com/facebook/flow/issues/2221\nvar objectValues = Object.values || function (obj) {\n  return Object.keys(obj).map(function (key) {\n    return obj[key];\n  });\n};\n\nexport default objectValues;","/**\n * Copyright (c) 2016, Lee Byron\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @ignore\n */\n\n/**\n * [Iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterator)\n * is a *protocol* which describes a standard way to produce a sequence of\n * values, typically the values of the Iterable represented by this Iterator.\n *\n * While described by the [ES2015 version of JavaScript](http://www.ecma-international.org/ecma-262/6.0/#sec-iterator-interface)\n * it can be utilized by any version of JavaScript.\n *\n * @external Iterator\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterator|MDN Iteration protocols}\n */\n\n/**\n * [Iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n * is a *protocol* which when implemented allows a JavaScript object to define\n * their iteration behavior, such as what values are looped over in a\n * [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of)\n * loop or `iterall`'s `forEach` function. Many [built-in types](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#Builtin_iterables)\n * implement the Iterable protocol, including `Array` and `Map`.\n *\n * While described by the [ES2015 version of JavaScript](http://www.ecma-international.org/ecma-262/6.0/#sec-iterable-interface)\n * it can be utilized by any version of JavaScript.\n *\n * @external Iterable\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable|MDN Iteration protocols}\n */\n\n// In ES2015 environments, Symbol exists\nvar SYMBOL /*: any */ = typeof Symbol === 'function' ? Symbol : void 0\n\n// In ES2015 (or a polyfilled) environment, this will be Symbol.iterator\nvar SYMBOL_ITERATOR = SYMBOL && SYMBOL.iterator\n\n/**\n * A property name to be used as the name of an Iterable's method responsible\n * for producing an Iterator, referred to as `@@iterator`. Typically represents\n * the value `Symbol.iterator` but falls back to the string `\"@@iterator\"` when\n * `Symbol.iterator` is not defined.\n *\n * Use `$$iterator` for defining new Iterables instead of `Symbol.iterator`,\n * but do not use it for accessing existing Iterables, instead use\n * {@link getIterator} or {@link isIterable}.\n *\n * @example\n *\n * var $$iterator = require('iterall').$$iterator\n *\n * function Counter (to) {\n *   this.to = to\n * }\n *\n * Counter.prototype[$$iterator] = function () {\n *   return {\n *     to: this.to,\n *     num: 0,\n *     next () {\n *       if (this.num >= this.to) {\n *         return { value: undefined, done: true }\n *       }\n *       return { value: this.num++, done: false }\n *     }\n *   }\n * }\n *\n * var counter = new Counter(3)\n * for (var number of counter) {\n *   console.log(number) // 0 ... 1 ... 2\n * }\n *\n * @type {Symbol|string}\n */\n/*:: declare export var $$iterator: '@@iterator'; */\nexport var $$iterator = SYMBOL_ITERATOR || '@@iterator'\n\n/**\n * Returns true if the provided object implements the Iterator protocol via\n * either implementing a `Symbol.iterator` or `\"@@iterator\"` method.\n *\n * @example\n *\n * var isIterable = require('iterall').isIterable\n * isIterable([ 1, 2, 3 ]) // true\n * isIterable('ABC') // true\n * isIterable({ length: 1, 0: 'Alpha' }) // false\n * isIterable({ key: 'value' }) // false\n * isIterable(new Map()) // true\n *\n * @param obj\n *   A value which might implement the Iterable protocol.\n * @return {boolean} true if Iterable.\n */\n/*:: declare export function isIterable(obj: any): boolean; */\nexport function isIterable(obj) {\n  return !!getIteratorMethod(obj)\n}\n\n/**\n * Returns true if the provided object implements the Array-like protocol via\n * defining a positive-integer `length` property.\n *\n * @example\n *\n * var isArrayLike = require('iterall').isArrayLike\n * isArrayLike([ 1, 2, 3 ]) // true\n * isArrayLike('ABC') // true\n * isArrayLike({ length: 1, 0: 'Alpha' }) // true\n * isArrayLike({ key: 'value' }) // false\n * isArrayLike(new Map()) // false\n *\n * @param obj\n *   A value which might implement the Array-like protocol.\n * @return {boolean} true if Array-like.\n */\n/*:: declare export function isArrayLike(obj: any): boolean; */\nexport function isArrayLike(obj) {\n  var length = obj != null && obj.length\n  return typeof length === 'number' && length >= 0 && length % 1 === 0\n}\n\n/**\n * Returns true if the provided object is an Object (i.e. not a string literal)\n * and is either Iterable or Array-like.\n *\n * This may be used in place of [Array.isArray()][isArray] to determine if an\n * object should be iterated-over. It always excludes string literals and\n * includes Arrays (regardless of if it is Iterable). It also includes other\n * Array-like objects such as NodeList, TypedArray, and Buffer.\n *\n * @example\n *\n * var isCollection = require('iterall').isCollection\n * isCollection([ 1, 2, 3 ]) // true\n * isCollection('ABC') // false\n * isCollection({ length: 1, 0: 'Alpha' }) // true\n * isCollection({ key: 'value' }) // false\n * isCollection(new Map()) // true\n *\n * @example\n *\n * var forEach = require('iterall').forEach\n * if (isCollection(obj)) {\n *   forEach(obj, function (value) {\n *     console.log(value)\n *   })\n * }\n *\n * @param obj\n *   An Object value which might implement the Iterable or Array-like protocols.\n * @return {boolean} true if Iterable or Array-like Object.\n */\n/*:: declare export function isCollection(obj: any): boolean; */\nexport function isCollection(obj) {\n  return Object(obj) === obj && (isArrayLike(obj) || isIterable(obj))\n}\n\n/**\n * If the provided object implements the Iterator protocol, its Iterator object\n * is returned. Otherwise returns undefined.\n *\n * @example\n *\n * var getIterator = require('iterall').getIterator\n * var iterator = getIterator([ 1, 2, 3 ])\n * iterator.next() // { value: 1, done: false }\n * iterator.next() // { value: 2, done: false }\n * iterator.next() // { value: 3, done: false }\n * iterator.next() // { value: undefined, done: true }\n *\n * @template T the type of each iterated value\n * @param {Iterable<T>} iterable\n *   An Iterable object which is the source of an Iterator.\n * @return {Iterator<T>} new Iterator instance.\n */\n/*:: declare export var getIterator:\n  & (<+TValue>(iterable: Iterable<TValue>) => Iterator<TValue>)\n  & ((iterable: mixed) => void | Iterator<mixed>); */\nexport function getIterator(iterable) {\n  var method = getIteratorMethod(iterable)\n  if (method) {\n    return method.call(iterable)\n  }\n}\n\n/**\n * If the provided object implements the Iterator protocol, the method\n * responsible for producing its Iterator object is returned.\n *\n * This is used in rare cases for performance tuning. This method must be called\n * with obj as the contextual this-argument.\n *\n * @example\n *\n * var getIteratorMethod = require('iterall').getIteratorMethod\n * var myArray = [ 1, 2, 3 ]\n * var method = getIteratorMethod(myArray)\n * if (method) {\n *   var iterator = method.call(myArray)\n * }\n *\n * @template T the type of each iterated value\n * @param {Iterable<T>} iterable\n *   An Iterable object which defines an `@@iterator` method.\n * @return {function(): Iterator<T>} `@@iterator` method.\n */\n/*:: declare export var getIteratorMethod:\n  & (<+TValue>(iterable: Iterable<TValue>) => (() => Iterator<TValue>))\n  & ((iterable: mixed) => (void | (() => Iterator<mixed>))); */\nexport function getIteratorMethod(iterable) {\n  if (iterable != null) {\n    var method =\n      (SYMBOL_ITERATOR && iterable[SYMBOL_ITERATOR]) || iterable['@@iterator']\n    if (typeof method === 'function') {\n      return method\n    }\n  }\n}\n\n/**\n * Similar to {@link getIterator}, this method returns a new Iterator given an\n * Iterable. However it will also create an Iterator for a non-Iterable\n * Array-like collection, such as Array in a non-ES2015 environment.\n *\n * `createIterator` is complimentary to `forEach`, but allows a \"pull\"-based\n * iteration as opposed to `forEach`'s \"push\"-based iteration.\n *\n * `createIterator` produces an Iterator for Array-likes with the same behavior\n * as ArrayIteratorPrototype described in the ECMAScript specification, and\n * does *not* skip over \"holes\".\n *\n * @example\n *\n * var createIterator = require('iterall').createIterator\n *\n * var myArraylike = { length: 3, 0: 'Alpha', 1: 'Bravo', 2: 'Charlie' }\n * var iterator = createIterator(myArraylike)\n * iterator.next() // { value: 'Alpha', done: false }\n * iterator.next() // { value: 'Bravo', done: false }\n * iterator.next() // { value: 'Charlie', done: false }\n * iterator.next() // { value: undefined, done: true }\n *\n * @template T the type of each iterated value\n * @param {Iterable<T>|{ length: number }} collection\n *   An Iterable or Array-like object to produce an Iterator.\n * @return {Iterator<T>} new Iterator instance.\n */\n/*:: declare export var createIterator:\n  & (<+TValue>(collection: Iterable<TValue>) => Iterator<TValue>)\n  & ((collection: {length: number}) => Iterator<mixed>)\n  & ((collection: mixed) => (void | Iterator<mixed>)); */\nexport function createIterator(collection) {\n  if (collection != null) {\n    var iterator = getIterator(collection)\n    if (iterator) {\n      return iterator\n    }\n    if (isArrayLike(collection)) {\n      return new ArrayLikeIterator(collection)\n    }\n  }\n}\n\n// When the object provided to `createIterator` is not Iterable but is\n// Array-like, this simple Iterator is created.\nfunction ArrayLikeIterator(obj) {\n  this._o = obj\n  this._i = 0\n}\n\n// Note: all Iterators are themselves Iterable.\nArrayLikeIterator.prototype[$$iterator] = function() {\n  return this\n}\n\n// A simple state-machine determines the IteratorResult returned, yielding\n// each value in the Array-like object in order of their indicies.\nArrayLikeIterator.prototype.next = function() {\n  if (this._o === void 0 || this._i >= this._o.length) {\n    this._o = void 0\n    return { value: void 0, done: true }\n  }\n  return { value: this._o[this._i++], done: false }\n}\n\n/**\n * Given an object which either implements the Iterable protocol or is\n * Array-like, iterate over it, calling the `callback` at each iteration.\n *\n * Use `forEach` where you would expect to use a `for ... of` loop in ES6.\n * However `forEach` adheres to the behavior of [Array#forEach][] described in\n * the ECMAScript specification, skipping over \"holes\" in Array-likes. It will\n * also delegate to a `forEach` method on `collection` if one is defined,\n * ensuring native performance for `Arrays`.\n *\n * Similar to [Array#forEach][], the `callback` function accepts three\n * arguments, and is provided with `thisArg` as the calling context.\n *\n * Note: providing an infinite Iterator to forEach will produce an error.\n *\n * [Array#forEach]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\n *\n * @example\n *\n * var forEach = require('iterall').forEach\n *\n * forEach(myIterable, function (value, index, iterable) {\n *   console.log(value, index, iterable === myIterable)\n * })\n *\n * @example\n *\n * // ES6:\n * for (let value of myIterable) {\n *   console.log(value)\n * }\n *\n * // Any JavaScript environment:\n * forEach(myIterable, function (value) {\n *   console.log(value)\n * })\n *\n * @template T the type of each iterated value\n * @param {Iterable<T>|{ length: number }} collection\n *   The Iterable or array to iterate over.\n * @param {function(T, number, object)} callback\n *   Function to execute for each iteration, taking up to three arguments\n * @param [thisArg]\n *   Optional. Value to use as `this` when executing `callback`.\n */\n/*:: declare export var forEach:\n  & (<+TValue, TCollection: Iterable<TValue>>(\n      collection: TCollection,\n      callbackFn: (value: TValue, index: number, collection: TCollection) => any,\n      thisArg?: any\n    ) => void)\n  & (<TCollection: {length: number}>(\n      collection: TCollection,\n      callbackFn: (value: mixed, index: number, collection: TCollection) => any,\n      thisArg?: any\n    ) => void); */\nexport function forEach(collection, callback, thisArg) {\n  if (collection != null) {\n    if (typeof collection.forEach === 'function') {\n      return collection.forEach(callback, thisArg)\n    }\n    var i = 0\n    var iterator = getIterator(collection)\n    if (iterator) {\n      var step\n      while (!(step = iterator.next()).done) {\n        callback.call(thisArg, step.value, i++, collection)\n        // Infinite Iterators could cause forEach to run forever.\n        // After a very large number of iterations, produce an error.\n        /* istanbul ignore if */\n        if (i > 9999999) {\n          throw new TypeError('Near-infinite iteration.')\n        }\n      }\n    } else if (isArrayLike(collection)) {\n      for (; i < collection.length; i++) {\n        if (collection.hasOwnProperty(i)) {\n          callback.call(thisArg, collection[i], i, collection)\n        }\n      }\n    }\n  }\n}\n\n/////////////////////////////////////////////////////\n//                                                 //\n//                 ASYNC ITERATORS                 //\n//                                                 //\n/////////////////////////////////////////////////////\n\n/**\n * [AsyncIterable](https://tc39.github.io/proposal-async-iteration/#sec-asynciterable-interface)\n * is a *protocol* which when implemented allows a JavaScript object to define\n * an asynchronous iteration behavior, such as what values are looped over in\n * a [`for-await-of`](https://tc39.github.io/proposal-async-iteration/#sec-for-in-and-for-of-statements)\n * loop or `iterall`'s {@link forAwaitEach} function.\n *\n * While described as a proposed addition to the [ES2017 version of JavaScript](https://tc39.github.io/proposal-async-iteration/)\n * it can be utilized by any version of JavaScript.\n *\n * @external AsyncIterable\n * @see {@link https://tc39.github.io/proposal-async-iteration/#sec-asynciterable-interface|Async Iteration Proposal}\n * @template T The type of each iterated value\n * @property {function (): AsyncIterator<T>} Symbol.asyncIterator\n *   A method which produces an AsyncIterator for this AsyncIterable.\n */\n\n/**\n * [AsyncIterator](https://tc39.github.io/proposal-async-iteration/#sec-asynciterator-interface)\n * is a *protocol* which describes a standard way to produce and consume an\n * asynchronous sequence of values, typically the values of the\n * {@link AsyncIterable} represented by this {@link AsyncIterator}.\n *\n * AsyncIterator is similar to Observable or Stream. Like an {@link Iterator} it\n * also as a `next()` method, however instead of an IteratorResult,\n * calling this method returns a {@link Promise} for a IteratorResult.\n *\n * While described as a proposed addition to the [ES2017 version of JavaScript](https://tc39.github.io/proposal-async-iteration/)\n * it can be utilized by any version of JavaScript.\n *\n * @external AsyncIterator\n * @see {@link https://tc39.github.io/proposal-async-iteration/#sec-asynciterator-interface|Async Iteration Proposal}\n */\n\n// In ES2017 (or a polyfilled) environment, this will be Symbol.asyncIterator\nvar SYMBOL_ASYNC_ITERATOR = SYMBOL && SYMBOL.asyncIterator\n\n/**\n * A property name to be used as the name of an AsyncIterable's method\n * responsible for producing an Iterator, referred to as `@@asyncIterator`.\n * Typically represents the value `Symbol.asyncIterator` but falls back to the\n * string `\"@@asyncIterator\"` when `Symbol.asyncIterator` is not defined.\n *\n * Use `$$asyncIterator` for defining new AsyncIterables instead of\n * `Symbol.asyncIterator`, but do not use it for accessing existing Iterables,\n * instead use {@link getAsyncIterator} or {@link isAsyncIterable}.\n *\n * @example\n *\n * var $$asyncIterator = require('iterall').$$asyncIterator\n *\n * function Chirper (to) {\n *   this.to = to\n * }\n *\n * Chirper.prototype[$$asyncIterator] = function () {\n *   return {\n *     to: this.to,\n *     num: 0,\n *     next () {\n *       return new Promise(resolve => {\n *         if (this.num >= this.to) {\n *           resolve({ value: undefined, done: true })\n *         } else {\n *           setTimeout(() => {\n *             resolve({ value: this.num++, done: false })\n *           }, 1000)\n *         }\n *       })\n *     }\n *   }\n * }\n *\n * var chirper = new Chirper(3)\n * for await (var number of chirper) {\n *   console.log(number) // 0 ...wait... 1 ...wait... 2\n * }\n *\n * @type {Symbol|string}\n */\n/*:: declare export var $$asyncIterator: '@@asyncIterator'; */\nexport var $$asyncIterator = SYMBOL_ASYNC_ITERATOR || '@@asyncIterator'\n\n/**\n * Returns true if the provided object implements the AsyncIterator protocol via\n * either implementing a `Symbol.asyncIterator` or `\"@@asyncIterator\"` method.\n *\n * @example\n *\n * var isAsyncIterable = require('iterall').isAsyncIterable\n * isAsyncIterable(myStream) // true\n * isAsyncIterable('ABC') // false\n *\n * @param obj\n *   A value which might implement the AsyncIterable protocol.\n * @return {boolean} true if AsyncIterable.\n */\n/*:: declare export function isAsyncIterable(obj: any): boolean; */\nexport function isAsyncIterable(obj) {\n  return !!getAsyncIteratorMethod(obj)\n}\n\n/**\n * If the provided object implements the AsyncIterator protocol, its\n * AsyncIterator object is returned. Otherwise returns undefined.\n *\n * @example\n *\n * var getAsyncIterator = require('iterall').getAsyncIterator\n * var asyncIterator = getAsyncIterator(myStream)\n * asyncIterator.next().then(console.log) // { value: 1, done: false }\n * asyncIterator.next().then(console.log) // { value: 2, done: false }\n * asyncIterator.next().then(console.log) // { value: 3, done: false }\n * asyncIterator.next().then(console.log) // { value: undefined, done: true }\n *\n * @template T the type of each iterated value\n * @param {AsyncIterable<T>} asyncIterable\n *   An AsyncIterable object which is the source of an AsyncIterator.\n * @return {AsyncIterator<T>} new AsyncIterator instance.\n */\n/*:: declare export var getAsyncIterator:\n  & (<+TValue>(asyncIterable: AsyncIterable<TValue>) => AsyncIterator<TValue>)\n  & ((asyncIterable: mixed) => (void | AsyncIterator<mixed>)); */\nexport function getAsyncIterator(asyncIterable) {\n  var method = getAsyncIteratorMethod(asyncIterable)\n  if (method) {\n    return method.call(asyncIterable)\n  }\n}\n\n/**\n * If the provided object implements the AsyncIterator protocol, the method\n * responsible for producing its AsyncIterator object is returned.\n *\n * This is used in rare cases for performance tuning. This method must be called\n * with obj as the contextual this-argument.\n *\n * @example\n *\n * var getAsyncIteratorMethod = require('iterall').getAsyncIteratorMethod\n * var method = getAsyncIteratorMethod(myStream)\n * if (method) {\n *   var asyncIterator = method.call(myStream)\n * }\n *\n * @template T the type of each iterated value\n * @param {AsyncIterable<T>} asyncIterable\n *   An AsyncIterable object which defines an `@@asyncIterator` method.\n * @return {function(): AsyncIterator<T>} `@@asyncIterator` method.\n */\n/*:: declare export var getAsyncIteratorMethod:\n  & (<+TValue>(asyncIterable: AsyncIterable<TValue>) => (() => AsyncIterator<TValue>))\n  & ((asyncIterable: mixed) => (void | (() => AsyncIterator<mixed>))); */\nexport function getAsyncIteratorMethod(asyncIterable) {\n  if (asyncIterable != null) {\n    var method =\n      (SYMBOL_ASYNC_ITERATOR && asyncIterable[SYMBOL_ASYNC_ITERATOR]) ||\n      asyncIterable['@@asyncIterator']\n    if (typeof method === 'function') {\n      return method\n    }\n  }\n}\n\n/**\n * Similar to {@link getAsyncIterator}, this method returns a new AsyncIterator\n * given an AsyncIterable. However it will also create an AsyncIterator for a\n * non-async Iterable as well as non-Iterable Array-like collection, such as\n * Array in a pre-ES2015 environment.\n *\n * `createAsyncIterator` is complimentary to `forAwaitEach`, but allows a\n * buffering \"pull\"-based iteration as opposed to `forAwaitEach`'s\n * \"push\"-based iteration.\n *\n * `createAsyncIterator` produces an AsyncIterator for non-async Iterables as\n * described in the ECMAScript proposal [Async-from-Sync Iterator Objects](https://tc39.github.io/proposal-async-iteration/#sec-async-from-sync-iterator-objects).\n *\n * > Note: Creating `AsyncIterator`s requires the existence of `Promise`.\n * > While `Promise` has been available in modern browsers for a number of\n * > years, legacy browsers (like IE 11) may require a polyfill.\n *\n * @example\n *\n * var createAsyncIterator = require('iterall').createAsyncIterator\n *\n * var myArraylike = { length: 3, 0: 'Alpha', 1: 'Bravo', 2: 'Charlie' }\n * var iterator = createAsyncIterator(myArraylike)\n * iterator.next().then(console.log) // { value: 'Alpha', done: false }\n * iterator.next().then(console.log) // { value: 'Bravo', done: false }\n * iterator.next().then(console.log) // { value: 'Charlie', done: false }\n * iterator.next().then(console.log) // { value: undefined, done: true }\n *\n * @template T the type of each iterated value\n * @param {AsyncIterable<T>|Iterable<T>|{ length: number }} source\n *   An AsyncIterable, Iterable, or Array-like object to produce an Iterator.\n * @return {AsyncIterator<T>} new AsyncIterator instance.\n */\n/*:: declare export var createAsyncIterator:\n  & (<+TValue>(\n      collection: Iterable<Promise<TValue> | TValue> | AsyncIterable<TValue>\n    ) => AsyncIterator<TValue>)\n  & ((collection: {length: number}) => AsyncIterator<mixed>)\n  & ((collection: mixed) => (void | AsyncIterator<mixed>)); */\nexport function createAsyncIterator(source) {\n  if (source != null) {\n    var asyncIterator = getAsyncIterator(source)\n    if (asyncIterator) {\n      return asyncIterator\n    }\n    var iterator = createIterator(source)\n    if (iterator) {\n      return new AsyncFromSyncIterator(iterator)\n    }\n  }\n}\n\n// When the object provided to `createAsyncIterator` is not AsyncIterable but is\n// sync Iterable, this simple wrapper is created.\nfunction AsyncFromSyncIterator(iterator) {\n  this._i = iterator\n}\n\n// Note: all AsyncIterators are themselves AsyncIterable.\nAsyncFromSyncIterator.prototype[$$asyncIterator] = function() {\n  return this\n}\n\n// A simple state-machine determines the IteratorResult returned, yielding\n// each value in the Array-like object in order of their indicies.\nAsyncFromSyncIterator.prototype.next = function() {\n  var step = this._i.next()\n  return Promise.resolve(step.value).then(function(value) {\n    return { value: value, done: step.done }\n  })\n}\n\n/**\n * Given an object which either implements the AsyncIterable protocol or is\n * Array-like, iterate over it, calling the `callback` at each iteration.\n *\n * Use `forAwaitEach` where you would expect to use a [for-await-of](https://tc39.github.io/proposal-async-iteration/#sec-for-in-and-for-of-statements) loop.\n *\n * Similar to [Array#forEach][], the `callback` function accepts three\n * arguments, and is provided with `thisArg` as the calling context.\n *\n * > Note: Using `forAwaitEach` requires the existence of `Promise`.\n * > While `Promise` has been available in modern browsers for a number of\n * > years, legacy browsers (like IE 11) may require a polyfill.\n *\n * @example\n *\n * var forAwaitEach = require('iterall').forAwaitEach\n *\n * forAwaitEach(myIterable, function (value, index, iterable) {\n *   console.log(value, index, iterable === myIterable)\n * })\n *\n * @example\n *\n * // ES2017:\n * for await (let value of myAsyncIterable) {\n *   console.log(await doSomethingAsync(value))\n * }\n * console.log('done')\n *\n * // Any JavaScript environment:\n * forAwaitEach(myAsyncIterable, function (value) {\n *   return doSomethingAsync(value).then(console.log)\n * }).then(function () {\n *   console.log('done')\n * })\n *\n * @template T the type of each iterated value\n * @param {AsyncIterable<T>|Iterable<Promise<T> | T>|{ length: number }} source\n *   The AsyncIterable or array to iterate over.\n * @param {function(T, number, object)} callback\n *   Function to execute for each iteration, taking up to three arguments\n * @param [thisArg]\n *   Optional. Value to use as `this` when executing `callback`.\n */\n/*:: declare export var forAwaitEach:\n  & (<+TValue, TCollection: Iterable<Promise<TValue> | TValue> | AsyncIterable<TValue>>(\n      collection: TCollection,\n      callbackFn: (value: TValue, index: number, collection: TCollection) => any,\n      thisArg?: any\n    ) => Promise<void>)\n  & (<TCollection: { length: number }>(\n      collection: TCollection,\n      callbackFn: (value: mixed, index: number, collection: TCollection) => any,\n      thisArg?: any\n    ) => Promise<void>); */\nexport function forAwaitEach(source, callback, thisArg) {\n  var asyncIterator = createAsyncIterator(source)\n  if (asyncIterator) {\n    var i = 0\n    return new Promise(function(resolve, reject) {\n      function next() {\n        asyncIterator\n          .next()\n          .then(function(step) {\n            if (!step.done) {\n              Promise.resolve(callback.call(thisArg, step.value, i++, source))\n                .then(next)\n                .catch(reject)\n            } else {\n              resolve()\n            }\n            // Explicitly return null, silencing bluebird-style warnings.\n            return null\n          })\n          .catch(reject)\n        // Explicitly return null, silencing bluebird-style warnings.\n        return null\n      }\n      next()\n    })\n  }\n}\n","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Returns true if a value is null, undefined, or NaN.\n */\nexport default function isNullish(value) {\n  return value === null || value === undefined || value !== value;\n}","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { forEach, isCollection } from 'iterall';\nimport inspect from '../jsutils/inspect';\nimport isNullish from '../jsutils/isNullish';\nimport isInvalid from '../jsutils/isInvalid';\nimport objectValues from '../jsutils/objectValues';\nimport { Kind } from '../language/kinds';\nimport { isScalarType, isEnumType, isInputObjectType, isListType, isNonNullType } from '../type/definition';\nimport { GraphQLID } from '../type/scalars';\n/**\n * Produces a GraphQL Value AST given a JavaScript value.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * JavaScript values.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String / Enum Value  |\n * | Number        | Int / Float          |\n * | Mixed         | Enum Value           |\n * | null          | NullValue            |\n *\n */\n\nexport function astFromValue(value, type) {\n  if (isNonNullType(type)) {\n    var astValue = astFromValue(value, type.ofType);\n\n    if (astValue && astValue.kind === Kind.NULL) {\n      return null;\n    }\n\n    return astValue;\n  } // only explicit null, not undefined, NaN\n\n\n  if (value === null) {\n    return {\n      kind: Kind.NULL\n    };\n  } // undefined, NaN\n\n\n  if (isInvalid(value)) {\n    return null;\n  } // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n  // the value is not an array, convert the value using the list's item type.\n\n\n  if (isListType(type)) {\n    var itemType = type.ofType;\n\n    if (isCollection(value)) {\n      var valuesNodes = [];\n      forEach(value, function (item) {\n        var itemNode = astFromValue(item, itemType);\n\n        if (itemNode) {\n          valuesNodes.push(itemNode);\n        }\n      });\n      return {\n        kind: Kind.LIST,\n        values: valuesNodes\n      };\n    }\n\n    return astFromValue(value, itemType);\n  } // Populate the fields of the input object by creating ASTs from each value\n  // in the JavaScript object according to the fields in the input type.\n\n\n  if (isInputObjectType(type)) {\n    if (value === null || _typeof(value) !== 'object') {\n      return null;\n    }\n\n    var fields = objectValues(type.getFields());\n    var fieldNodes = [];\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = fields[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var field = _step.value;\n        var fieldValue = astFromValue(value[field.name], field.type);\n\n        if (fieldValue) {\n          fieldNodes.push({\n            kind: Kind.OBJECT_FIELD,\n            name: {\n              kind: Kind.NAME,\n              value: field.name\n            },\n            value: fieldValue\n          });\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return {\n      kind: Kind.OBJECT,\n      fields: fieldNodes\n    };\n  }\n\n  if (isScalarType(type) || isEnumType(type)) {\n    // Since value is an internally represented value, it must be serialized\n    // to an externally represented value before converting into an AST.\n    var serialized = type.serialize(value);\n\n    if (isNullish(serialized)) {\n      return null;\n    } // Others serialize based on their corresponding JavaScript scalar types.\n\n\n    if (typeof serialized === 'boolean') {\n      return {\n        kind: Kind.BOOLEAN,\n        value: serialized\n      };\n    } // JavaScript numbers can be Int or Float values.\n\n\n    if (typeof serialized === 'number') {\n      var stringNum = String(serialized);\n      return integerStringRegExp.test(stringNum) ? {\n        kind: Kind.INT,\n        value: stringNum\n      } : {\n        kind: Kind.FLOAT,\n        value: stringNum\n      };\n    }\n\n    if (typeof serialized === 'string') {\n      // Enum types use Enum literals.\n      if (isEnumType(type)) {\n        return {\n          kind: Kind.ENUM,\n          value: serialized\n        };\n      } // ID types can use Int literals.\n\n\n      if (type === GraphQLID && integerStringRegExp.test(serialized)) {\n        return {\n          kind: Kind.INT,\n          value: serialized\n        };\n      }\n\n      return {\n        kind: Kind.STRING,\n        value: serialized\n      };\n    }\n\n    throw new TypeError(\"Cannot convert value to AST: \".concat(inspect(serialized)));\n  }\n  /* istanbul ignore next */\n\n\n  throw new Error(\"Unknown type: \".concat(type, \".\"));\n}\n/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */\n\nvar integerStringRegExp = /^-?(0|[1-9][0-9]*)$/;","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { visit } from './visitor';\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\n\nexport function print(ast) {\n  return visit(ast, {\n    leave: printDocASTReducer\n  });\n}\nvar printDocASTReducer = {\n  Name: function Name(node) {\n    return node.value;\n  },\n  Variable: function Variable(node) {\n    return '$' + node.name;\n  },\n  // Document\n  Document: function Document(node) {\n    return join(node.definitions, '\\n\\n') + '\\n';\n  },\n  OperationDefinition: function OperationDefinition(node) {\n    var op = node.operation;\n    var name = node.name;\n    var varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n    var directives = join(node.directives, ' ');\n    var selectionSet = node.selectionSet; // Anonymous queries with no directives or variable definitions can use\n    // the query short form.\n\n    return !name && !directives && !varDefs && op === 'query' ? selectionSet : join([op, join([name, varDefs]), directives, selectionSet], ' ');\n  },\n  VariableDefinition: function VariableDefinition(_ref) {\n    var variable = _ref.variable,\n        type = _ref.type,\n        defaultValue = _ref.defaultValue,\n        directives = _ref.directives;\n    return variable + ': ' + type + wrap(' = ', defaultValue) + wrap(' ', join(directives, ' '));\n  },\n  SelectionSet: function SelectionSet(_ref2) {\n    var selections = _ref2.selections;\n    return block(selections);\n  },\n  Field: function Field(_ref3) {\n    var alias = _ref3.alias,\n        name = _ref3.name,\n        args = _ref3.arguments,\n        directives = _ref3.directives,\n        selectionSet = _ref3.selectionSet;\n    return join([wrap('', alias, ': ') + name + wrap('(', join(args, ', '), ')'), join(directives, ' '), selectionSet], ' ');\n  },\n  Argument: function Argument(_ref4) {\n    var name = _ref4.name,\n        value = _ref4.value;\n    return name + ': ' + value;\n  },\n  // Fragments\n  FragmentSpread: function FragmentSpread(_ref5) {\n    var name = _ref5.name,\n        directives = _ref5.directives;\n    return '...' + name + wrap(' ', join(directives, ' '));\n  },\n  InlineFragment: function InlineFragment(_ref6) {\n    var typeCondition = _ref6.typeCondition,\n        directives = _ref6.directives,\n        selectionSet = _ref6.selectionSet;\n    return join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' ');\n  },\n  FragmentDefinition: function FragmentDefinition(_ref7) {\n    var name = _ref7.name,\n        typeCondition = _ref7.typeCondition,\n        variableDefinitions = _ref7.variableDefinitions,\n        directives = _ref7.directives,\n        selectionSet = _ref7.selectionSet;\n    return (// Note: fragment variable definitions are experimental and may be changed\n      // or removed in the future.\n      \"fragment \".concat(name).concat(wrap('(', join(variableDefinitions, ', '), ')'), \" \") + \"on \".concat(typeCondition, \" \").concat(wrap('', join(directives, ' '), ' ')) + selectionSet\n    );\n  },\n  // Value\n  IntValue: function IntValue(_ref8) {\n    var value = _ref8.value;\n    return value;\n  },\n  FloatValue: function FloatValue(_ref9) {\n    var value = _ref9.value;\n    return value;\n  },\n  StringValue: function StringValue(_ref10, key) {\n    var value = _ref10.value,\n        isBlockString = _ref10.block;\n    return isBlockString ? printBlockString(value, key === 'description') : JSON.stringify(value);\n  },\n  BooleanValue: function BooleanValue(_ref11) {\n    var value = _ref11.value;\n    return value ? 'true' : 'false';\n  },\n  NullValue: function NullValue() {\n    return 'null';\n  },\n  EnumValue: function EnumValue(_ref12) {\n    var value = _ref12.value;\n    return value;\n  },\n  ListValue: function ListValue(_ref13) {\n    var values = _ref13.values;\n    return '[' + join(values, ', ') + ']';\n  },\n  ObjectValue: function ObjectValue(_ref14) {\n    var fields = _ref14.fields;\n    return '{' + join(fields, ', ') + '}';\n  },\n  ObjectField: function ObjectField(_ref15) {\n    var name = _ref15.name,\n        value = _ref15.value;\n    return name + ': ' + value;\n  },\n  // Directive\n  Directive: function Directive(_ref16) {\n    var name = _ref16.name,\n        args = _ref16.arguments;\n    return '@' + name + wrap('(', join(args, ', '), ')');\n  },\n  // Type\n  NamedType: function NamedType(_ref17) {\n    var name = _ref17.name;\n    return name;\n  },\n  ListType: function ListType(_ref18) {\n    var type = _ref18.type;\n    return '[' + type + ']';\n  },\n  NonNullType: function NonNullType(_ref19) {\n    var type = _ref19.type;\n    return type + '!';\n  },\n  // Type System Definitions\n  SchemaDefinition: function SchemaDefinition(_ref20) {\n    var directives = _ref20.directives,\n        operationTypes = _ref20.operationTypes;\n    return join(['schema', join(directives, ' '), block(operationTypes)], ' ');\n  },\n  OperationTypeDefinition: function OperationTypeDefinition(_ref21) {\n    var operation = _ref21.operation,\n        type = _ref21.type;\n    return operation + ': ' + type;\n  },\n  ScalarTypeDefinition: addDescription(function (_ref22) {\n    var name = _ref22.name,\n        directives = _ref22.directives;\n    return join(['scalar', name, join(directives, ' ')], ' ');\n  }),\n  ObjectTypeDefinition: addDescription(function (_ref23) {\n    var name = _ref23.name,\n        interfaces = _ref23.interfaces,\n        directives = _ref23.directives,\n        fields = _ref23.fields;\n    return join(['type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  }),\n  FieldDefinition: addDescription(function (_ref24) {\n    var name = _ref24.name,\n        args = _ref24.arguments,\n        type = _ref24.type,\n        directives = _ref24.directives;\n    return name + (args.every(function (arg) {\n      return arg.indexOf('\\n') === -1;\n    }) ? wrap('(', join(args, ', '), ')') : wrap('(\\n', indent(join(args, '\\n')), '\\n)')) + ': ' + type + wrap(' ', join(directives, ' '));\n  }),\n  InputValueDefinition: addDescription(function (_ref25) {\n    var name = _ref25.name,\n        type = _ref25.type,\n        defaultValue = _ref25.defaultValue,\n        directives = _ref25.directives;\n    return join([name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')], ' ');\n  }),\n  InterfaceTypeDefinition: addDescription(function (_ref26) {\n    var name = _ref26.name,\n        directives = _ref26.directives,\n        fields = _ref26.fields;\n    return join(['interface', name, join(directives, ' '), block(fields)], ' ');\n  }),\n  UnionTypeDefinition: addDescription(function (_ref27) {\n    var name = _ref27.name,\n        directives = _ref27.directives,\n        types = _ref27.types;\n    return join(['union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');\n  }),\n  EnumTypeDefinition: addDescription(function (_ref28) {\n    var name = _ref28.name,\n        directives = _ref28.directives,\n        values = _ref28.values;\n    return join(['enum', name, join(directives, ' '), block(values)], ' ');\n  }),\n  EnumValueDefinition: addDescription(function (_ref29) {\n    var name = _ref29.name,\n        directives = _ref29.directives;\n    return join([name, join(directives, ' ')], ' ');\n  }),\n  InputObjectTypeDefinition: addDescription(function (_ref30) {\n    var name = _ref30.name,\n        directives = _ref30.directives,\n        fields = _ref30.fields;\n    return join(['input', name, join(directives, ' '), block(fields)], ' ');\n  }),\n  DirectiveDefinition: addDescription(function (_ref31) {\n    var name = _ref31.name,\n        args = _ref31.arguments,\n        locations = _ref31.locations;\n    return 'directive @' + name + (args.every(function (arg) {\n      return arg.indexOf('\\n') === -1;\n    }) ? wrap('(', join(args, ', '), ')') : wrap('(\\n', indent(join(args, '\\n')), '\\n)')) + ' on ' + join(locations, ' | ');\n  }),\n  SchemaExtension: function SchemaExtension(_ref32) {\n    var directives = _ref32.directives,\n        operationTypes = _ref32.operationTypes;\n    return join(['extend schema', join(directives, ' '), block(operationTypes)], ' ');\n  },\n  ScalarTypeExtension: function ScalarTypeExtension(_ref33) {\n    var name = _ref33.name,\n        directives = _ref33.directives;\n    return join(['extend scalar', name, join(directives, ' ')], ' ');\n  },\n  ObjectTypeExtension: function ObjectTypeExtension(_ref34) {\n    var name = _ref34.name,\n        interfaces = _ref34.interfaces,\n        directives = _ref34.directives,\n        fields = _ref34.fields;\n    return join(['extend type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  },\n  InterfaceTypeExtension: function InterfaceTypeExtension(_ref35) {\n    var name = _ref35.name,\n        directives = _ref35.directives,\n        fields = _ref35.fields;\n    return join(['extend interface', name, join(directives, ' '), block(fields)], ' ');\n  },\n  UnionTypeExtension: function UnionTypeExtension(_ref36) {\n    var name = _ref36.name,\n        directives = _ref36.directives,\n        types = _ref36.types;\n    return join(['extend union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');\n  },\n  EnumTypeExtension: function EnumTypeExtension(_ref37) {\n    var name = _ref37.name,\n        directives = _ref37.directives,\n        values = _ref37.values;\n    return join(['extend enum', name, join(directives, ' '), block(values)], ' ');\n  },\n  InputObjectTypeExtension: function InputObjectTypeExtension(_ref38) {\n    var name = _ref38.name,\n        directives = _ref38.directives,\n        fields = _ref38.fields;\n    return join(['extend input', name, join(directives, ' '), block(fields)], ' ');\n  }\n};\n\nfunction addDescription(cb) {\n  return function (node) {\n    return join([node.description, cb(node)], '\\n');\n  };\n}\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\n\n\nfunction join(maybeArray, separator) {\n  return maybeArray ? maybeArray.filter(function (x) {\n    return x;\n  }).join(separator || '') : '';\n}\n/**\n * Given array, print each item on its own line, wrapped in an\n * indented \"{ }\" block.\n */\n\n\nfunction block(array) {\n  return array && array.length !== 0 ? '{\\n' + indent(join(array, '\\n')) + '\\n}' : '';\n}\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise\n * print an empty string.\n */\n\n\nfunction wrap(start, maybeString, end) {\n  return maybeString ? start + maybeString + (end || '') : '';\n}\n\nfunction indent(maybeString) {\n  return maybeString && '  ' + maybeString.replace(/\\n/g, '\\n  ');\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n */\n\n\nfunction printBlockString(value, isDescription) {\n  var escaped = value.replace(/\"\"\"/g, '\\\\\"\"\"');\n  return (value[0] === ' ' || value[0] === '\\t') && value.indexOf('\\n') === -1 ? \"\\\"\\\"\\\"\".concat(escaped.replace(/\"$/, '\"\\n'), \"\\\"\\\"\\\"\") : \"\\\"\\\"\\\"\\n\".concat(isDescription ? escaped : indent(escaped), \"\\n\\\"\\\"\\\"\");\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport isInvalid from '../jsutils/isInvalid';\nimport objectValues from '../jsutils/objectValues';\nimport { astFromValue } from '../utilities/astFromValue';\nimport { print } from '../language/printer';\nimport { GraphQLObjectType, GraphQLEnumType, GraphQLList, GraphQLNonNull, isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, isListType, isNonNullType, isAbstractType, isNamedType } from './definition';\nimport { GraphQLString, GraphQLBoolean } from './scalars';\nimport { DirectiveLocation } from '../language/directiveLocation';\nexport var __Schema = new GraphQLObjectType({\n  name: '__Schema',\n  description: 'A GraphQL Schema defines the capabilities of a GraphQL server. It ' + 'exposes all available types and directives on the server, as well as ' + 'the entry points for query, mutation, and subscription operations.',\n  fields: function fields() {\n    return {\n      types: {\n        description: 'A list of all types supported by this server.',\n        type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__Type))),\n        resolve: function resolve(schema) {\n          return objectValues(schema.getTypeMap());\n        }\n      },\n      queryType: {\n        description: 'The type that query operations will be rooted at.',\n        type: GraphQLNonNull(__Type),\n        resolve: function resolve(schema) {\n          return schema.getQueryType();\n        }\n      },\n      mutationType: {\n        description: 'If this server supports mutation, the type that ' + 'mutation operations will be rooted at.',\n        type: __Type,\n        resolve: function resolve(schema) {\n          return schema.getMutationType();\n        }\n      },\n      subscriptionType: {\n        description: 'If this server support subscription, the type that ' + 'subscription operations will be rooted at.',\n        type: __Type,\n        resolve: function resolve(schema) {\n          return schema.getSubscriptionType();\n        }\n      },\n      directives: {\n        description: 'A list of all directives supported by this server.',\n        type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__Directive))),\n        resolve: function resolve(schema) {\n          return schema.getDirectives();\n        }\n      }\n    };\n  }\n});\nexport var __Directive = new GraphQLObjectType({\n  name: '__Directive',\n  description: 'A Directive provides a way to describe alternate runtime execution and ' + 'type validation behavior in a GraphQL document.' + \"\\n\\nIn some cases, you need to provide options to alter GraphQL's \" + 'execution behavior in ways field arguments will not suffice, such as ' + 'conditionally including or skipping a field. Directives provide this by ' + 'describing additional information to the executor.',\n  fields: function fields() {\n    return {\n      name: {\n        type: GraphQLNonNull(GraphQLString),\n        resolve: function resolve(obj) {\n          return obj.name;\n        }\n      },\n      description: {\n        type: GraphQLString,\n        resolve: function resolve(obj) {\n          return obj.description;\n        }\n      },\n      locations: {\n        type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__DirectiveLocation))),\n        resolve: function resolve(obj) {\n          return obj.locations;\n        }\n      },\n      args: {\n        type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__InputValue))),\n        resolve: function resolve(directive) {\n          return directive.args || [];\n        }\n      }\n    };\n  }\n});\nexport var __DirectiveLocation = new GraphQLEnumType({\n  name: '__DirectiveLocation',\n  description: 'A Directive can be adjacent to many parts of the GraphQL language, a ' + '__DirectiveLocation describes one such possible adjacencies.',\n  values: {\n    QUERY: {\n      value: DirectiveLocation.QUERY,\n      description: 'Location adjacent to a query operation.'\n    },\n    MUTATION: {\n      value: DirectiveLocation.MUTATION,\n      description: 'Location adjacent to a mutation operation.'\n    },\n    SUBSCRIPTION: {\n      value: DirectiveLocation.SUBSCRIPTION,\n      description: 'Location adjacent to a subscription operation.'\n    },\n    FIELD: {\n      value: DirectiveLocation.FIELD,\n      description: 'Location adjacent to a field.'\n    },\n    FRAGMENT_DEFINITION: {\n      value: DirectiveLocation.FRAGMENT_DEFINITION,\n      description: 'Location adjacent to a fragment definition.'\n    },\n    FRAGMENT_SPREAD: {\n      value: DirectiveLocation.FRAGMENT_SPREAD,\n      description: 'Location adjacent to a fragment spread.'\n    },\n    INLINE_FRAGMENT: {\n      value: DirectiveLocation.INLINE_FRAGMENT,\n      description: 'Location adjacent to an inline fragment.'\n    },\n    VARIABLE_DEFINITION: {\n      value: DirectiveLocation.VARIABLE_DEFINITION,\n      description: 'Location adjacent to a variable definition.'\n    },\n    SCHEMA: {\n      value: DirectiveLocation.SCHEMA,\n      description: 'Location adjacent to a schema definition.'\n    },\n    SCALAR: {\n      value: DirectiveLocation.SCALAR,\n      description: 'Location adjacent to a scalar definition.'\n    },\n    OBJECT: {\n      value: DirectiveLocation.OBJECT,\n      description: 'Location adjacent to an object type definition.'\n    },\n    FIELD_DEFINITION: {\n      value: DirectiveLocation.FIELD_DEFINITION,\n      description: 'Location adjacent to a field definition.'\n    },\n    ARGUMENT_DEFINITION: {\n      value: DirectiveLocation.ARGUMENT_DEFINITION,\n      description: 'Location adjacent to an argument definition.'\n    },\n    INTERFACE: {\n      value: DirectiveLocation.INTERFACE,\n      description: 'Location adjacent to an interface definition.'\n    },\n    UNION: {\n      value: DirectiveLocation.UNION,\n      description: 'Location adjacent to a union definition.'\n    },\n    ENUM: {\n      value: DirectiveLocation.ENUM,\n      description: 'Location adjacent to an enum definition.'\n    },\n    ENUM_VALUE: {\n      value: DirectiveLocation.ENUM_VALUE,\n      description: 'Location adjacent to an enum value definition.'\n    },\n    INPUT_OBJECT: {\n      value: DirectiveLocation.INPUT_OBJECT,\n      description: 'Location adjacent to an input object type definition.'\n    },\n    INPUT_FIELD_DEFINITION: {\n      value: DirectiveLocation.INPUT_FIELD_DEFINITION,\n      description: 'Location adjacent to an input object field definition.'\n    }\n  }\n});\nexport var __Type = new GraphQLObjectType({\n  name: '__Type',\n  description: 'The fundamental unit of any GraphQL Schema is the type. There are ' + 'many kinds of types in GraphQL as represented by the `__TypeKind` enum.' + '\\n\\nDepending on the kind of a type, certain fields describe ' + 'information about that type. Scalar types provide no information ' + 'beyond a name and description, while Enum types provide their values. ' + 'Object and Interface types provide the fields they describe. Abstract ' + 'types, Union and Interface, provide the Object types possible ' + 'at runtime. List and NonNull types compose other types.',\n  fields: function fields() {\n    return {\n      kind: {\n        type: GraphQLNonNull(__TypeKind),\n        resolve: function resolve(type) {\n          if (isScalarType(type)) {\n            return TypeKind.SCALAR;\n          } else if (isObjectType(type)) {\n            return TypeKind.OBJECT;\n          } else if (isInterfaceType(type)) {\n            return TypeKind.INTERFACE;\n          } else if (isUnionType(type)) {\n            return TypeKind.UNION;\n          } else if (isEnumType(type)) {\n            return TypeKind.ENUM;\n          } else if (isInputObjectType(type)) {\n            return TypeKind.INPUT_OBJECT;\n          } else if (isListType(type)) {\n            return TypeKind.LIST;\n          } else if (isNonNullType(type)) {\n            return TypeKind.NON_NULL;\n          }\n\n          throw new Error('Unknown kind of type: ' + type);\n        }\n      },\n      name: {\n        type: GraphQLString,\n        resolve: function resolve(obj) {\n          return obj.name;\n        }\n      },\n      description: {\n        type: GraphQLString,\n        resolve: function resolve(obj) {\n          return obj.description;\n        }\n      },\n      fields: {\n        type: GraphQLList(GraphQLNonNull(__Field)),\n        args: {\n          includeDeprecated: {\n            type: GraphQLBoolean,\n            defaultValue: false\n          }\n        },\n        resolve: function resolve(type, _ref) {\n          var includeDeprecated = _ref.includeDeprecated;\n\n          if (isObjectType(type) || isInterfaceType(type)) {\n            var fields = objectValues(type.getFields());\n\n            if (!includeDeprecated) {\n              fields = fields.filter(function (field) {\n                return !field.deprecationReason;\n              });\n            }\n\n            return fields;\n          }\n\n          return null;\n        }\n      },\n      interfaces: {\n        type: GraphQLList(GraphQLNonNull(__Type)),\n        resolve: function resolve(type) {\n          if (isObjectType(type)) {\n            return type.getInterfaces();\n          }\n        }\n      },\n      possibleTypes: {\n        type: GraphQLList(GraphQLNonNull(__Type)),\n        resolve: function resolve(type, args, context, _ref2) {\n          var schema = _ref2.schema;\n\n          if (isAbstractType(type)) {\n            return schema.getPossibleTypes(type);\n          }\n        }\n      },\n      enumValues: {\n        type: GraphQLList(GraphQLNonNull(__EnumValue)),\n        args: {\n          includeDeprecated: {\n            type: GraphQLBoolean,\n            defaultValue: false\n          }\n        },\n        resolve: function resolve(type, _ref3) {\n          var includeDeprecated = _ref3.includeDeprecated;\n\n          if (isEnumType(type)) {\n            var values = type.getValues();\n\n            if (!includeDeprecated) {\n              values = values.filter(function (value) {\n                return !value.deprecationReason;\n              });\n            }\n\n            return values;\n          }\n        }\n      },\n      inputFields: {\n        type: GraphQLList(GraphQLNonNull(__InputValue)),\n        resolve: function resolve(type) {\n          if (isInputObjectType(type)) {\n            return objectValues(type.getFields());\n          }\n        }\n      },\n      ofType: {\n        type: __Type,\n        resolve: function resolve(obj) {\n          return obj.ofType;\n        }\n      }\n    };\n  }\n});\nexport var __Field = new GraphQLObjectType({\n  name: '__Field',\n  description: 'Object and Interface types are described by a list of Fields, each of ' + 'which has a name, potentially a list of arguments, and a return type.',\n  fields: function fields() {\n    return {\n      name: {\n        type: GraphQLNonNull(GraphQLString),\n        resolve: function resolve(obj) {\n          return obj.name;\n        }\n      },\n      description: {\n        type: GraphQLString,\n        resolve: function resolve(obj) {\n          return obj.description;\n        }\n      },\n      args: {\n        type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__InputValue))),\n        resolve: function resolve(field) {\n          return field.args || [];\n        }\n      },\n      type: {\n        type: GraphQLNonNull(__Type),\n        resolve: function resolve(obj) {\n          return obj.type;\n        }\n      },\n      isDeprecated: {\n        type: GraphQLNonNull(GraphQLBoolean),\n        resolve: function resolve(obj) {\n          return obj.isDeprecated;\n        }\n      },\n      deprecationReason: {\n        type: GraphQLString,\n        resolve: function resolve(obj) {\n          return obj.deprecationReason;\n        }\n      }\n    };\n  }\n});\nexport var __InputValue = new GraphQLObjectType({\n  name: '__InputValue',\n  description: 'Arguments provided to Fields or Directives and the input fields of an ' + 'InputObject are represented as Input Values which describe their type ' + 'and optionally a default value.',\n  fields: function fields() {\n    return {\n      name: {\n        type: GraphQLNonNull(GraphQLString),\n        resolve: function resolve(obj) {\n          return obj.name;\n        }\n      },\n      description: {\n        type: GraphQLString,\n        resolve: function resolve(obj) {\n          return obj.description;\n        }\n      },\n      type: {\n        type: GraphQLNonNull(__Type),\n        resolve: function resolve(obj) {\n          return obj.type;\n        }\n      },\n      defaultValue: {\n        type: GraphQLString,\n        description: 'A GraphQL-formatted string representing the default value for this ' + 'input value.',\n        resolve: function resolve(inputVal) {\n          return isInvalid(inputVal.defaultValue) ? null : print(astFromValue(inputVal.defaultValue, inputVal.type));\n        }\n      }\n    };\n  }\n});\nexport var __EnumValue = new GraphQLObjectType({\n  name: '__EnumValue',\n  description: 'One possible value for a given Enum. Enum values are unique values, not ' + 'a placeholder for a string or numeric value. However an Enum value is ' + 'returned in a JSON response as a string.',\n  fields: function fields() {\n    return {\n      name: {\n        type: GraphQLNonNull(GraphQLString),\n        resolve: function resolve(obj) {\n          return obj.name;\n        }\n      },\n      description: {\n        type: GraphQLString,\n        resolve: function resolve(obj) {\n          return obj.description;\n        }\n      },\n      isDeprecated: {\n        type: GraphQLNonNull(GraphQLBoolean),\n        resolve: function resolve(obj) {\n          return obj.isDeprecated;\n        }\n      },\n      deprecationReason: {\n        type: GraphQLString,\n        resolve: function resolve(obj) {\n          return obj.deprecationReason;\n        }\n      }\n    };\n  }\n});\nexport var TypeKind = {\n  SCALAR: 'SCALAR',\n  OBJECT: 'OBJECT',\n  INTERFACE: 'INTERFACE',\n  UNION: 'UNION',\n  ENUM: 'ENUM',\n  INPUT_OBJECT: 'INPUT_OBJECT',\n  LIST: 'LIST',\n  NON_NULL: 'NON_NULL'\n};\nexport var __TypeKind = new GraphQLEnumType({\n  name: '__TypeKind',\n  description: 'An enum describing what kind of type a given `__Type` is.',\n  values: {\n    SCALAR: {\n      value: TypeKind.SCALAR,\n      description: 'Indicates this type is a scalar.'\n    },\n    OBJECT: {\n      value: TypeKind.OBJECT,\n      description: 'Indicates this type is an object. ' + '`fields` and `interfaces` are valid fields.'\n    },\n    INTERFACE: {\n      value: TypeKind.INTERFACE,\n      description: 'Indicates this type is an interface. ' + '`fields` and `possibleTypes` are valid fields.'\n    },\n    UNION: {\n      value: TypeKind.UNION,\n      description: 'Indicates this type is a union. `possibleTypes` is a valid field.'\n    },\n    ENUM: {\n      value: TypeKind.ENUM,\n      description: 'Indicates this type is an enum. `enumValues` is a valid field.'\n    },\n    INPUT_OBJECT: {\n      value: TypeKind.INPUT_OBJECT,\n      description: 'Indicates this type is an input object. ' + '`inputFields` is a valid field.'\n    },\n    LIST: {\n      value: TypeKind.LIST,\n      description: 'Indicates this type is a list. `ofType` is a valid field.'\n    },\n    NON_NULL: {\n      value: TypeKind.NON_NULL,\n      description: 'Indicates this type is a non-null. `ofType` is a valid field.'\n    }\n  }\n});\n/**\n * Note that these are GraphQLField and not GraphQLFieldConfig,\n * so the format for args is different.\n */\n\nexport var SchemaMetaFieldDef = {\n  name: '__schema',\n  type: GraphQLNonNull(__Schema),\n  description: 'Access the current type schema of this server.',\n  args: [],\n  resolve: function resolve(source, args, context, _ref4) {\n    var schema = _ref4.schema;\n    return schema;\n  }\n};\nexport var TypeMetaFieldDef = {\n  name: '__type',\n  type: __Type,\n  description: 'Request the type information of a single type.',\n  args: [{\n    name: 'name',\n    type: GraphQLNonNull(GraphQLString)\n  }],\n  resolve: function resolve(source, _ref5, context, _ref6) {\n    var name = _ref5.name;\n    var schema = _ref6.schema;\n    return schema.getType(name);\n  }\n};\nexport var TypeNameMetaFieldDef = {\n  name: '__typename',\n  type: GraphQLNonNull(GraphQLString),\n  description: 'The name of the current Object type at runtime.',\n  args: [],\n  resolve: function resolve(source, args, context, _ref7) {\n    var parentType = _ref7.parentType;\n    return parentType.name;\n  }\n};\nexport var introspectionTypes = [__Schema, __Directive, __DirectiveLocation, __Type, __Field, __InputValue, __EnumValue, __TypeKind];\nexport function isIntrospectionType(type) {\n  return isNamedType(type) && ( // Would prefer to use introspectionTypes.some(), however %checks needs\n  // a simple expression.\n  type.name === __Schema.name || type.name === __Directive.name || type.name === __DirectiveLocation.name || type.name === __Type.name || type.name === __Field.name || type.name === __InputValue.name || type.name === __EnumValue.name || type.name === __TypeKind.name);\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nexport default function find(list, predicate) {\n  for (var i = 0; i < list.length; i++) {\n    if (predicate(list[i])) {\n      return list[i];\n    }\n  }\n}","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { isAbstractType, isObjectType, isInterfaceType, isUnionType, isInputObjectType, isWrappingType } from './definition';\nimport { GraphQLDirective, isDirective, specifiedDirectives } from './directives';\nimport inspect from '../jsutils/inspect';\nimport { __Schema } from './introspection';\nimport defineToStringTag from '../jsutils/defineToStringTag';\nimport find from '../jsutils/find';\nimport instanceOf from '../jsutils/instanceOf';\nimport invariant from '../jsutils/invariant';\nimport objectValues from '../jsutils/objectValues';\n// eslint-disable-next-line no-redeclare\nexport function isSchema(schema) {\n  return instanceOf(schema, GraphQLSchema);\n}\n/**\n * Schema Definition\n *\n * A Schema is created by supplying the root types of each type of operation,\n * query and mutation (optional). A schema definition is then supplied to the\n * validator and executor.\n *\n * Example:\n *\n *     const MyAppSchema = new GraphQLSchema({\n *       query: MyAppQueryRootType,\n *       mutation: MyAppMutationRootType,\n *     })\n *\n * Note: If an array of `directives` are provided to GraphQLSchema, that will be\n * the exact list of directives represented and allowed. If `directives` is not\n * provided then a default set of the specified directives (e.g. @include and\n * @skip) will be used. If you wish to provide *additional* directives to these\n * specified directives, you must explicitly declare them. Example:\n *\n *     const MyAppSchema = new GraphQLSchema({\n *       ...\n *       directives: specifiedDirectives.concat([ myCustomDirective ]),\n *     })\n *\n */\n\nexport var GraphQLSchema =\n/*#__PURE__*/\nfunction () {\n  // Used as a cache for validateSchema().\n  // Referenced by validateSchema().\n  function GraphQLSchema(config) {\n    _defineProperty(this, \"astNode\", void 0);\n\n    _defineProperty(this, \"extensionASTNodes\", void 0);\n\n    _defineProperty(this, \"_queryType\", void 0);\n\n    _defineProperty(this, \"_mutationType\", void 0);\n\n    _defineProperty(this, \"_subscriptionType\", void 0);\n\n    _defineProperty(this, \"_directives\", void 0);\n\n    _defineProperty(this, \"_typeMap\", void 0);\n\n    _defineProperty(this, \"_implementations\", void 0);\n\n    _defineProperty(this, \"_possibleTypeMap\", void 0);\n\n    _defineProperty(this, \"__validationErrors\", void 0);\n\n    _defineProperty(this, \"__allowedLegacyNames\", void 0);\n\n    // If this schema was built from a source known to be valid, then it may be\n    // marked with assumeValid to avoid an additional type system validation.\n    if (config && config.assumeValid) {\n      this.__validationErrors = [];\n    } else {\n      // Otherwise check for common mistakes during construction to produce\n      // clear and early error messages.\n      !(_typeof(config) === 'object') ? invariant(0, 'Must provide configuration object.') : void 0;\n      !(!config.types || Array.isArray(config.types)) ? invariant(0, \"\\\"types\\\" must be Array if provided but got: \".concat(inspect(config.types), \".\")) : void 0;\n      !(!config.directives || Array.isArray(config.directives)) ? invariant(0, '\"directives\" must be Array if provided but got: ' + \"\".concat(inspect(config.directives), \".\")) : void 0;\n      !(!config.allowedLegacyNames || Array.isArray(config.allowedLegacyNames)) ? invariant(0, '\"allowedLegacyNames\" must be Array if provided but got: ' + \"\".concat(inspect(config.allowedLegacyNames), \".\")) : void 0;\n    }\n\n    this.__allowedLegacyNames = config.allowedLegacyNames || [];\n    this._queryType = config.query;\n    this._mutationType = config.mutation;\n    this._subscriptionType = config.subscription; // Provide specified directives (e.g. @include and @skip) by default.\n\n    this._directives = config.directives || specifiedDirectives;\n    this.astNode = config.astNode;\n    this.extensionASTNodes = config.extensionASTNodes; // Build type map now to detect any errors within this schema.\n\n    var initialTypes = [this.getQueryType(), this.getMutationType(), this.getSubscriptionType(), __Schema];\n    var types = config.types;\n\n    if (types) {\n      initialTypes = initialTypes.concat(types);\n    } // Keep track of all types referenced within the schema.\n\n\n    var typeMap = Object.create(null); // First by deeply visiting all initial types.\n\n    typeMap = initialTypes.reduce(typeMapReducer, typeMap); // Then by deeply visiting all directive types.\n\n    typeMap = this._directives.reduce(typeMapDirectiveReducer, typeMap); // Storing the resulting map for reference by the schema.\n\n    this._typeMap = typeMap; // Keep track of all implementations by interface name.\n\n    this._implementations = Object.create(null);\n\n    var _arr = Object.keys(this._typeMap);\n\n    for (var _i = 0; _i < _arr.length; _i++) {\n      var typeName = _arr[_i];\n      var type = this._typeMap[typeName];\n\n      if (isObjectType(type)) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = type.getInterfaces()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var iface = _step.value;\n\n            if (isInterfaceType(iface)) {\n              var impls = this._implementations[iface.name];\n\n              if (impls) {\n                impls.push(type);\n              } else {\n                this._implementations[iface.name] = [type];\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      } else if (isAbstractType(type) && !this._implementations[type.name]) {\n        this._implementations[type.name] = [];\n      }\n    }\n  }\n\n  var _proto = GraphQLSchema.prototype;\n\n  _proto.getQueryType = function getQueryType() {\n    return this._queryType;\n  };\n\n  _proto.getMutationType = function getMutationType() {\n    return this._mutationType;\n  };\n\n  _proto.getSubscriptionType = function getSubscriptionType() {\n    return this._subscriptionType;\n  };\n\n  _proto.getTypeMap = function getTypeMap() {\n    return this._typeMap;\n  };\n\n  _proto.getType = function getType(name) {\n    return this.getTypeMap()[name];\n  };\n\n  _proto.getPossibleTypes = function getPossibleTypes(abstractType) {\n    if (isUnionType(abstractType)) {\n      return abstractType.getTypes();\n    }\n\n    return this._implementations[abstractType.name];\n  };\n\n  _proto.isPossibleType = function isPossibleType(abstractType, possibleType) {\n    var possibleTypeMap = this._possibleTypeMap;\n\n    if (!possibleTypeMap) {\n      this._possibleTypeMap = possibleTypeMap = Object.create(null);\n    }\n\n    if (!possibleTypeMap[abstractType.name]) {\n      var possibleTypes = this.getPossibleTypes(abstractType);\n      possibleTypeMap[abstractType.name] = possibleTypes.reduce(function (map, type) {\n        return map[type.name] = true, map;\n      }, Object.create(null));\n    }\n\n    return Boolean(possibleTypeMap[abstractType.name][possibleType.name]);\n  };\n\n  _proto.getDirectives = function getDirectives() {\n    return this._directives;\n  };\n\n  _proto.getDirective = function getDirective(name) {\n    return find(this.getDirectives(), function (directive) {\n      return directive.name === name;\n    });\n  };\n\n  return GraphQLSchema;\n}(); // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\n\ndefineToStringTag(GraphQLSchema);\n\nfunction typeMapReducer(map, type) {\n  if (!type) {\n    return map;\n  }\n\n  if (isWrappingType(type)) {\n    return typeMapReducer(map, type.ofType);\n  }\n\n  if (map[type.name]) {\n    !(map[type.name] === type) ? invariant(0, 'Schema must contain unique named types but contains multiple ' + \"types named \\\"\".concat(type.name, \"\\\".\")) : void 0;\n    return map;\n  }\n\n  map[type.name] = type;\n  var reducedMap = map;\n\n  if (isUnionType(type)) {\n    reducedMap = type.getTypes().reduce(typeMapReducer, reducedMap);\n  }\n\n  if (isObjectType(type)) {\n    reducedMap = type.getInterfaces().reduce(typeMapReducer, reducedMap);\n  }\n\n  if (isObjectType(type) || isInterfaceType(type)) {\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = objectValues(type.getFields())[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var field = _step2.value;\n\n        if (field.args) {\n          var fieldArgTypes = field.args.map(function (arg) {\n            return arg.type;\n          });\n          reducedMap = fieldArgTypes.reduce(typeMapReducer, reducedMap);\n        }\n\n        reducedMap = typeMapReducer(reducedMap, field.type);\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n  }\n\n  if (isInputObjectType(type)) {\n    var _iteratorNormalCompletion3 = true;\n    var _didIteratorError3 = false;\n    var _iteratorError3 = undefined;\n\n    try {\n      for (var _iterator3 = objectValues(type.getFields())[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n        var _field = _step3.value;\n        reducedMap = typeMapReducer(reducedMap, _field.type);\n      }\n    } catch (err) {\n      _didIteratorError3 = true;\n      _iteratorError3 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n          _iterator3.return();\n        }\n      } finally {\n        if (_didIteratorError3) {\n          throw _iteratorError3;\n        }\n      }\n    }\n  }\n\n  return reducedMap;\n}\n\nfunction typeMapDirectiveReducer(map, directive) {\n  // Directives are not validated until validateSchema() is called.\n  if (!isDirective(directive)) {\n    return map;\n  }\n\n  return directive.args.reduce(function (_map, arg) {\n    return typeMapReducer(_map, arg.type);\n  }, map);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getLocation = getLocation;\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nfunction getLocation(source, position) {\n  var lineRegexp = /\\r\\n|[\\n\\r]/g;\n  var line = 1;\n  var column = position + 1;\n  var match;\n\n  while ((match = lineRegexp.exec(source.body)) && match.index < position) {\n    line += 1;\n    column = position + 1 - (match.index + match[0].length);\n  }\n\n  return {\n    line: line,\n    column: column\n  };\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.printError = printError;\n\nvar _location = require(\"../language/location\");\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n */\nfunction printError(error) {\n  var printedLocations = [];\n\n  if (error.nodes) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = error.nodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var node = _step.value;\n\n        if (node.loc) {\n          printedLocations.push(highlightSourceAtLocation(node.loc.source, (0, _location.getLocation)(node.loc.source, node.loc.start)));\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  } else if (error.source && error.locations) {\n    var source = error.source;\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = error.locations[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var location = _step2.value;\n        printedLocations.push(highlightSourceAtLocation(source, location));\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n  }\n\n  return printedLocations.length === 0 ? error.message : [error.message].concat(printedLocations).join('\\n\\n') + '\\n';\n}\n/**\n * Render a helpful description of the location of the error in the GraphQL\n * Source document.\n */\n\n\nfunction highlightSourceAtLocation(source, location) {\n  var firstLineColumnOffset = source.locationOffset.column - 1;\n  var body = whitespace(firstLineColumnOffset) + source.body;\n  var lineIndex = location.line - 1;\n  var lineOffset = source.locationOffset.line - 1;\n  var lineNum = location.line + lineOffset;\n  var columnOffset = location.line === 1 ? firstLineColumnOffset : 0;\n  var columnNum = location.column + columnOffset;\n  var lines = body.split(/\\r\\n|[\\n\\r]/g);\n  return \"\".concat(source.name, \" (\").concat(lineNum, \":\").concat(columnNum, \")\\n\") + printPrefixedLines([// Lines specified like this: [\"prefix\", \"string\"],\n  [\"\".concat(lineNum - 1, \": \"), lines[lineIndex - 1]], [\"\".concat(lineNum, \": \"), lines[lineIndex]], ['', whitespace(columnNum - 1) + '^'], [\"\".concat(lineNum + 1, \": \"), lines[lineIndex + 1]]]);\n}\n\nfunction printPrefixedLines(lines) {\n  var existingLines = lines.filter(function (_ref) {\n    var _ = _ref[0],\n        line = _ref[1];\n    return line !== undefined;\n  });\n  var padLen = 0;\n  var _iteratorNormalCompletion3 = true;\n  var _didIteratorError3 = false;\n  var _iteratorError3 = undefined;\n\n  try {\n    for (var _iterator3 = existingLines[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n      var _ref4 = _step3.value;\n      var prefix = _ref4[0];\n      padLen = Math.max(padLen, prefix.length);\n    }\n  } catch (err) {\n    _didIteratorError3 = true;\n    _iteratorError3 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n        _iterator3.return();\n      }\n    } finally {\n      if (_didIteratorError3) {\n        throw _iteratorError3;\n      }\n    }\n  }\n\n  return existingLines.map(function (_ref3) {\n    var prefix = _ref3[0],\n        line = _ref3[1];\n    return lpad(padLen, prefix) + line;\n  }).join('\\n');\n}\n\nfunction whitespace(len) {\n  return Array(len + 1).join(' ');\n}\n\nfunction lpad(len, str) {\n  return whitespace(len - str.length) + str;\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { printError } from './printError';\nimport { getLocation } from '../language/location';\nexport function GraphQLError( // eslint-disable-line no-redeclare\nmessage, nodes, source, positions, path, originalError, extensions) {\n  // Compute list of blame nodes.\n  var _nodes = Array.isArray(nodes) ? nodes.length !== 0 ? nodes : undefined : nodes ? [nodes] : undefined; // Compute locations in the source for the given nodes/positions.\n\n\n  var _source = source;\n\n  if (!_source && _nodes) {\n    var node = _nodes[0];\n    _source = node && node.loc && node.loc.source;\n  }\n\n  var _positions = positions;\n\n  if (!_positions && _nodes) {\n    _positions = _nodes.reduce(function (list, node) {\n      if (node.loc) {\n        list.push(node.loc.start);\n      }\n\n      return list;\n    }, []);\n  }\n\n  if (_positions && _positions.length === 0) {\n    _positions = undefined;\n  }\n\n  var _locations;\n\n  if (positions && source) {\n    _locations = positions.map(function (pos) {\n      return getLocation(source, pos);\n    });\n  } else if (_nodes) {\n    _locations = _nodes.reduce(function (list, node) {\n      if (node.loc) {\n        list.push(getLocation(node.loc.source, node.loc.start));\n      }\n\n      return list;\n    }, []);\n  }\n\n  var _extensions = extensions || originalError && originalError.extensions;\n\n  Object.defineProperties(this, {\n    message: {\n      value: message,\n      // By being enumerable, JSON.stringify will include `message` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: true,\n      writable: true\n    },\n    locations: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: _locations || undefined,\n      // By being enumerable, JSON.stringify will include `locations` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(_locations)\n    },\n    path: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: path || undefined,\n      // By being enumerable, JSON.stringify will include `path` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(path)\n    },\n    nodes: {\n      value: _nodes || undefined\n    },\n    source: {\n      value: _source || undefined\n    },\n    positions: {\n      value: _positions || undefined\n    },\n    originalError: {\n      value: originalError\n    },\n    extensions: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: _extensions || undefined,\n      // By being enumerable, JSON.stringify will include `path` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(_extensions)\n    }\n  }); // Include (non-enumerable) stack trace.\n\n  if (originalError && originalError.stack) {\n    Object.defineProperty(this, 'stack', {\n      value: originalError.stack,\n      writable: true,\n      configurable: true\n    });\n  } else if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, GraphQLError);\n  } else {\n    Object.defineProperty(this, 'stack', {\n      value: Error().stack,\n      writable: true,\n      configurable: true\n    });\n  }\n}\nGraphQLError.prototype = Object.create(Error.prototype, {\n  constructor: {\n    value: GraphQLError\n  },\n  name: {\n    value: 'GraphQLError'\n  },\n  toString: {\n    value: function toString() {\n      return printError(this);\n    }\n  }\n});","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../error/GraphQLError';\nimport invariant from '../jsutils/invariant';\nvar NAME_RX = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n/**\n * Upholds the spec rules about naming.\n */\n\nexport function assertValidName(name) {\n  var error = isValidNameError(name);\n\n  if (error) {\n    throw error;\n  }\n\n  return name;\n}\n/**\n * Returns an Error if a name is invalid.\n */\n\nexport function isValidNameError(name, node) {\n  !(typeof name === 'string') ? invariant(0, 'Expected string') : void 0;\n\n  if (name.length > 1 && name[0] === '_' && name[1] === '_') {\n    return new GraphQLError(\"Name \\\"\".concat(name, \"\\\" must not begin with \\\"__\\\", which is reserved by \") + 'GraphQL introspection.', node);\n  }\n\n  if (!NAME_RX.test(name)) {\n    return new GraphQLError(\"Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but \\\"\".concat(name, \"\\\" does not.\"), node);\n  }\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { isObjectType, isListType, isNonNullType, isAbstractType } from '../type/definition';\n\n/**\n * Provided two types, return true if the types are equal (invariant).\n */\nexport function isEqualType(typeA, typeB) {\n  // Equivalent types are equal.\n  if (typeA === typeB) {\n    return true;\n  } // If either type is non-null, the other must also be non-null.\n\n\n  if (isNonNullType(typeA) && isNonNullType(typeB)) {\n    return isEqualType(typeA.ofType, typeB.ofType);\n  } // If either type is a list, the other must also be a list.\n\n\n  if (isListType(typeA) && isListType(typeB)) {\n    return isEqualType(typeA.ofType, typeB.ofType);\n  } // Otherwise the types are not equal.\n\n\n  return false;\n}\n/**\n * Provided a type and a super type, return true if the first type is either\n * equal or a subset of the second super type (covariant).\n */\n\nexport function isTypeSubTypeOf(schema, maybeSubType, superType) {\n  // Equivalent type is a valid subtype\n  if (maybeSubType === superType) {\n    return true;\n  } // If superType is non-null, maybeSubType must also be non-null.\n\n\n  if (isNonNullType(superType)) {\n    if (isNonNullType(maybeSubType)) {\n      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);\n    }\n\n    return false;\n  }\n\n  if (isNonNullType(maybeSubType)) {\n    // If superType is nullable, maybeSubType may be non-null or nullable.\n    return isTypeSubTypeOf(schema, maybeSubType.ofType, superType);\n  } // If superType type is a list, maybeSubType type must also be a list.\n\n\n  if (isListType(superType)) {\n    if (isListType(maybeSubType)) {\n      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);\n    }\n\n    return false;\n  }\n\n  if (isListType(maybeSubType)) {\n    // If superType is not a list, maybeSubType must also be not a list.\n    return false;\n  } // If superType type is an abstract type, maybeSubType type may be a currently\n  // possible object type.\n\n\n  if (isAbstractType(superType) && isObjectType(maybeSubType) && schema.isPossibleType(superType, maybeSubType)) {\n    return true;\n  } // Otherwise, the child type is not a valid subtype of the parent type.\n\n\n  return false;\n}\n/**\n * Provided two composite types, determine if they \"overlap\". Two composite\n * types overlap when the Sets of possible concrete types for each intersect.\n *\n * This is often used to determine if a fragment of a given type could possibly\n * be visited in a context of another type.\n *\n * This function is commutative.\n */\n\nexport function doTypesOverlap(schema, typeA, typeB) {\n  // Equivalent types overlap\n  if (typeA === typeB) {\n    return true;\n  }\n\n  if (isAbstractType(typeA)) {\n    if (isAbstractType(typeB)) {\n      // If both types are abstract, then determine if there is any intersection\n      // between possible concrete types of each.\n      return schema.getPossibleTypes(typeA).some(function (type) {\n        return schema.isPossibleType(typeB, type);\n      });\n    } // Determine if the latter type is a possible concrete type of the former.\n\n\n    return schema.isPossibleType(typeA, typeB);\n  }\n\n  if (isAbstractType(typeB)) {\n    // Determine if the former type is a possible concrete type of the latter.\n    return schema.isPossibleType(typeB, typeA);\n  } // Otherwise the types do not overlap.\n\n\n  return false;\n}","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, isNamedType, isInputType, isOutputType, isRequiredArgument } from './definition';\nimport { isDirective } from './directives';\nimport { isIntrospectionType } from './introspection';\nimport { isSchema } from './schema';\nimport inspect from '../jsutils/inspect';\nimport find from '../jsutils/find';\nimport invariant from '../jsutils/invariant';\nimport objectValues from '../jsutils/objectValues';\nimport { GraphQLError } from '../error/GraphQLError';\nimport { isValidNameError } from '../utilities/assertValidName';\nimport { isEqualType, isTypeSubTypeOf } from '../utilities/typeComparators';\n/**\n * Implements the \"Type Validation\" sub-sections of the specification's\n * \"Type System\" section.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the Schema is valid.\n */\n\nexport function validateSchema(schema) {\n  // First check to ensure the provided value is in fact a GraphQLSchema.\n  !isSchema(schema) ? invariant(0, \"Expected \".concat(inspect(schema), \" to be a GraphQL schema.\")) : void 0; // If this Schema has already been validated, return the previous results.\n\n  if (schema.__validationErrors) {\n    return schema.__validationErrors;\n  } // Validate the schema, producing a list of errors.\n\n\n  var context = new SchemaValidationContext(schema);\n  validateRootTypes(context);\n  validateDirectives(context);\n  validateTypes(context); // Persist the results of validation before returning to ensure validation\n  // does not run multiple times for this schema.\n\n  var errors = context.getErrors();\n  schema.__validationErrors = errors;\n  return errors;\n}\n/**\n * Utility function which asserts a schema is valid by throwing an error if\n * it is invalid.\n */\n\nexport function assertValidSchema(schema) {\n  var errors = validateSchema(schema);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map(function (error) {\n      return error.message;\n    }).join('\\n\\n'));\n  }\n}\n\nvar SchemaValidationContext =\n/*#__PURE__*/\nfunction () {\n  function SchemaValidationContext(schema) {\n    _defineProperty(this, \"_errors\", void 0);\n\n    _defineProperty(this, \"schema\", void 0);\n\n    this._errors = [];\n    this.schema = schema;\n  }\n\n  var _proto = SchemaValidationContext.prototype;\n\n  _proto.reportError = function reportError(message, nodes) {\n    var _nodes = (Array.isArray(nodes) ? nodes : [nodes]).filter(Boolean);\n\n    this.addError(new GraphQLError(message, _nodes));\n  };\n\n  _proto.addError = function addError(error) {\n    this._errors.push(error);\n  };\n\n  _proto.getErrors = function getErrors() {\n    return this._errors;\n  };\n\n  return SchemaValidationContext;\n}();\n\nfunction validateRootTypes(context) {\n  var schema = context.schema;\n  var queryType = schema.getQueryType();\n\n  if (!queryType) {\n    context.reportError(\"Query root type must be provided.\", schema.astNode);\n  } else if (!isObjectType(queryType)) {\n    context.reportError(\"Query root type must be Object type, it cannot be \".concat(inspect(queryType), \".\"), getOperationTypeNode(schema, queryType, 'query'));\n  }\n\n  var mutationType = schema.getMutationType();\n\n  if (mutationType && !isObjectType(mutationType)) {\n    context.reportError('Mutation root type must be Object type if provided, it cannot be ' + \"\".concat(inspect(mutationType), \".\"), getOperationTypeNode(schema, mutationType, 'mutation'));\n  }\n\n  var subscriptionType = schema.getSubscriptionType();\n\n  if (subscriptionType && !isObjectType(subscriptionType)) {\n    context.reportError('Subscription root type must be Object type if provided, it cannot be ' + \"\".concat(inspect(subscriptionType), \".\"), getOperationTypeNode(schema, subscriptionType, 'subscription'));\n  }\n}\n\nfunction getOperationTypeNode(schema, type, operation) {\n  var operationNodes = getAllSubNodes(schema, function (node) {\n    return node.operationTypes;\n  });\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = operationNodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var node = _step.value;\n\n      if (node.operation === operation) {\n        return node.type;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return type.astNode;\n}\n\nfunction validateDirectives(context) {\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = context.schema.getDirectives()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var directive = _step2.value;\n\n      // Ensure all directives are in fact GraphQL directives.\n      if (!isDirective(directive)) {\n        context.reportError(\"Expected directive but got: \".concat(inspect(directive), \".\"), directive && directive.astNode);\n        continue;\n      } // Ensure they are named correctly.\n\n\n      validateName(context, directive); // TODO: Ensure proper locations.\n      // Ensure the arguments are valid.\n\n      var argNames = Object.create(null);\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = directive.args[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var arg = _step3.value;\n          var argName = arg.name; // Ensure they are named correctly.\n\n          validateName(context, arg); // Ensure they are unique per directive.\n\n          if (argNames[argName]) {\n            context.reportError(\"Argument @\".concat(directive.name, \"(\").concat(argName, \":) can only be defined once.\"), getAllDirectiveArgNodes(directive, argName));\n            continue;\n          }\n\n          argNames[argName] = true; // Ensure the type is an input type.\n\n          if (!isInputType(arg.type)) {\n            context.reportError(\"The type of @\".concat(directive.name, \"(\").concat(argName, \":) must be Input Type \") + \"but got: \".concat(inspect(arg.type), \".\"), getDirectiveArgTypeNode(directive, argName));\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n}\n\nfunction validateName(context, node) {\n  // If a schema explicitly allows some legacy name which is no longer valid,\n  // allow it to be assumed valid.\n  if (context.schema.__allowedLegacyNames.indexOf(node.name) !== -1) {\n    return;\n  } // Ensure names are valid, however introspection types opt out.\n\n\n  var error = isValidNameError(node.name, node.astNode || undefined);\n\n  if (error) {\n    context.addError(error);\n  }\n}\n\nfunction validateTypes(context) {\n  var typeMap = context.schema.getTypeMap();\n  var _iteratorNormalCompletion4 = true;\n  var _didIteratorError4 = false;\n  var _iteratorError4 = undefined;\n\n  try {\n    for (var _iterator4 = objectValues(typeMap)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n      var type = _step4.value;\n\n      // Ensure all provided types are in fact GraphQL type.\n      if (!isNamedType(type)) {\n        context.reportError(\"Expected GraphQL named type but got: \".concat(inspect(type), \".\"), type && type.astNode);\n        continue;\n      } // Ensure it is named correctly (excluding introspection types).\n\n\n      if (!isIntrospectionType(type)) {\n        validateName(context, type);\n      }\n\n      if (isObjectType(type)) {\n        // Ensure fields are valid\n        validateFields(context, type); // Ensure objects implement the interfaces they claim to.\n\n        validateObjectInterfaces(context, type);\n      } else if (isInterfaceType(type)) {\n        // Ensure fields are valid.\n        validateFields(context, type);\n      } else if (isUnionType(type)) {\n        // Ensure Unions include valid member types.\n        validateUnionMembers(context, type);\n      } else if (isEnumType(type)) {\n        // Ensure Enums have valid values.\n        validateEnumValues(context, type);\n      } else if (isInputObjectType(type)) {\n        // Ensure Input Object fields are valid.\n        validateInputFields(context, type);\n      }\n    }\n  } catch (err) {\n    _didIteratorError4 = true;\n    _iteratorError4 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n        _iterator4.return();\n      }\n    } finally {\n      if (_didIteratorError4) {\n        throw _iteratorError4;\n      }\n    }\n  }\n}\n\nfunction validateFields(context, type) {\n  var fields = objectValues(type.getFields()); // Objects and Interfaces both must define one or more fields.\n\n  if (fields.length === 0) {\n    context.reportError(\"Type \".concat(type.name, \" must define one or more fields.\"), getAllNodes(type));\n  }\n\n  var _iteratorNormalCompletion5 = true;\n  var _didIteratorError5 = false;\n  var _iteratorError5 = undefined;\n\n  try {\n    for (var _iterator5 = fields[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n      var field = _step5.value;\n      // Ensure they are named correctly.\n      validateName(context, field); // Ensure they were defined at most once.\n\n      var fieldNodes = getAllFieldNodes(type, field.name);\n\n      if (fieldNodes.length > 1) {\n        context.reportError(\"Field \".concat(type.name, \".\").concat(field.name, \" can only be defined once.\"), fieldNodes);\n        continue;\n      } // Ensure the type is an output type\n\n\n      if (!isOutputType(field.type)) {\n        context.reportError(\"The type of \".concat(type.name, \".\").concat(field.name, \" must be Output Type \") + \"but got: \".concat(inspect(field.type), \".\"), getFieldTypeNode(type, field.name));\n      } // Ensure the arguments are valid\n\n\n      var argNames = Object.create(null);\n      var _iteratorNormalCompletion6 = true;\n      var _didIteratorError6 = false;\n      var _iteratorError6 = undefined;\n\n      try {\n        for (var _iterator6 = field.args[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n          var arg = _step6.value;\n          var argName = arg.name; // Ensure they are named correctly.\n\n          validateName(context, arg); // Ensure they are unique per field.\n\n          if (argNames[argName]) {\n            context.reportError(\"Field argument \".concat(type.name, \".\").concat(field.name, \"(\").concat(argName, \":) can only \") + 'be defined once.', getAllFieldArgNodes(type, field.name, argName));\n          }\n\n          argNames[argName] = true; // Ensure the type is an input type\n\n          if (!isInputType(arg.type)) {\n            context.reportError(\"The type of \".concat(type.name, \".\").concat(field.name, \"(\").concat(argName, \":) must be Input \") + \"Type but got: \".concat(inspect(arg.type), \".\"), getFieldArgTypeNode(type, field.name, argName));\n          }\n        }\n      } catch (err) {\n        _didIteratorError6 = true;\n        _iteratorError6 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n            _iterator6.return();\n          }\n        } finally {\n          if (_didIteratorError6) {\n            throw _iteratorError6;\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError5 = true;\n    _iteratorError5 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n        _iterator5.return();\n      }\n    } finally {\n      if (_didIteratorError5) {\n        throw _iteratorError5;\n      }\n    }\n  }\n}\n\nfunction validateObjectInterfaces(context, object) {\n  var implementedTypeNames = Object.create(null);\n  var _iteratorNormalCompletion7 = true;\n  var _didIteratorError7 = false;\n  var _iteratorError7 = undefined;\n\n  try {\n    for (var _iterator7 = object.getInterfaces()[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n      var iface = _step7.value;\n\n      if (!isInterfaceType(iface)) {\n        context.reportError(\"Type \".concat(inspect(object), \" must only implement Interface types, \") + \"it cannot implement \".concat(inspect(iface), \".\"), getImplementsInterfaceNode(object, iface));\n        continue;\n      }\n\n      if (implementedTypeNames[iface.name]) {\n        context.reportError(\"Type \".concat(object.name, \" can only implement \").concat(iface.name, \" once.\"), getAllImplementsInterfaceNodes(object, iface));\n        continue;\n      }\n\n      implementedTypeNames[iface.name] = true;\n      validateObjectImplementsInterface(context, object, iface);\n    }\n  } catch (err) {\n    _didIteratorError7 = true;\n    _iteratorError7 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n        _iterator7.return();\n      }\n    } finally {\n      if (_didIteratorError7) {\n        throw _iteratorError7;\n      }\n    }\n  }\n}\n\nfunction validateObjectImplementsInterface(context, object, iface) {\n  var objectFieldMap = object.getFields();\n  var ifaceFieldMap = iface.getFields(); // Assert each interface field is implemented.\n\n  var _arr = Object.keys(ifaceFieldMap);\n\n  for (var _i = 0; _i < _arr.length; _i++) {\n    var fieldName = _arr[_i];\n    var objectField = objectFieldMap[fieldName];\n    var ifaceField = ifaceFieldMap[fieldName]; // Assert interface field exists on object.\n\n    if (!objectField) {\n      context.reportError(\"Interface field \".concat(iface.name, \".\").concat(fieldName, \" expected but \") + \"\".concat(object.name, \" does not provide it.\"), [getFieldNode(iface, fieldName)].concat(getAllNodes(object)));\n      continue;\n    } // Assert interface field type is satisfied by object field type, by being\n    // a valid subtype. (covariant)\n\n\n    if (!isTypeSubTypeOf(context.schema, objectField.type, ifaceField.type)) {\n      context.reportError(\"Interface field \".concat(iface.name, \".\").concat(fieldName, \" expects type \") + \"\".concat(inspect(ifaceField.type), \" but \").concat(object.name, \".\").concat(fieldName, \" \") + \"is type \".concat(inspect(objectField.type), \".\"), [getFieldTypeNode(iface, fieldName), getFieldTypeNode(object, fieldName)]);\n    } // Assert each interface field arg is implemented.\n\n\n    var _iteratorNormalCompletion8 = true;\n    var _didIteratorError8 = false;\n    var _iteratorError8 = undefined;\n\n    try {\n      var _loop = function _loop() {\n        var ifaceArg = _step8.value;\n        var argName = ifaceArg.name;\n        var objectArg = find(objectField.args, function (arg) {\n          return arg.name === argName;\n        }); // Assert interface field arg exists on object field.\n\n        if (!objectArg) {\n          context.reportError(\"Interface field argument \".concat(iface.name, \".\").concat(fieldName, \"(\").concat(argName, \":) \") + \"expected but \".concat(object.name, \".\").concat(fieldName, \" does not provide it.\"), [getFieldArgNode(iface, fieldName, argName), getFieldNode(object, fieldName)]);\n          return \"continue\";\n        } // Assert interface field arg type matches object field arg type.\n        // (invariant)\n        // TODO: change to contravariant?\n\n\n        if (!isEqualType(ifaceArg.type, objectArg.type)) {\n          context.reportError(\"Interface field argument \".concat(iface.name, \".\").concat(fieldName, \"(\").concat(argName, \":) \") + \"expects type \".concat(inspect(ifaceArg.type), \" but \") + \"\".concat(object.name, \".\").concat(fieldName, \"(\").concat(argName, \":) is type \") + \"\".concat(inspect(objectArg.type), \".\"), [getFieldArgTypeNode(iface, fieldName, argName), getFieldArgTypeNode(object, fieldName, argName)]);\n        } // TODO: validate default values?\n\n      };\n\n      for (var _iterator8 = ifaceField.args[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n        var _ret = _loop();\n\n        if (_ret === \"continue\") continue;\n      } // Assert additional arguments must not be required.\n\n    } catch (err) {\n      _didIteratorError8 = true;\n      _iteratorError8 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n          _iterator8.return();\n        }\n      } finally {\n        if (_didIteratorError8) {\n          throw _iteratorError8;\n        }\n      }\n    }\n\n    var _iteratorNormalCompletion9 = true;\n    var _didIteratorError9 = false;\n    var _iteratorError9 = undefined;\n\n    try {\n      var _loop2 = function _loop2() {\n        var objectArg = _step9.value;\n        var argName = objectArg.name;\n        var ifaceArg = find(ifaceField.args, function (arg) {\n          return arg.name === argName;\n        });\n\n        if (!ifaceArg && isRequiredArgument(objectArg)) {\n          context.reportError(\"Object field \".concat(object.name, \".\").concat(fieldName, \" includes required \") + \"argument \".concat(argName, \" that is missing from the Interface field \") + \"\".concat(iface.name, \".\").concat(fieldName, \".\"), [getFieldArgNode(object, fieldName, argName), getFieldNode(iface, fieldName)]);\n        }\n      };\n\n      for (var _iterator9 = objectField.args[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n        _loop2();\n      }\n    } catch (err) {\n      _didIteratorError9 = true;\n      _iteratorError9 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion9 && _iterator9.return != null) {\n          _iterator9.return();\n        }\n      } finally {\n        if (_didIteratorError9) {\n          throw _iteratorError9;\n        }\n      }\n    }\n  }\n}\n\nfunction validateUnionMembers(context, union) {\n  var memberTypes = union.getTypes();\n\n  if (memberTypes.length === 0) {\n    context.reportError(\"Union type \".concat(union.name, \" must define one or more member types.\"), getAllNodes(union));\n  }\n\n  var includedTypeNames = Object.create(null);\n  var _iteratorNormalCompletion10 = true;\n  var _didIteratorError10 = false;\n  var _iteratorError10 = undefined;\n\n  try {\n    for (var _iterator10 = memberTypes[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n      var memberType = _step10.value;\n\n      if (includedTypeNames[memberType.name]) {\n        context.reportError(\"Union type \".concat(union.name, \" can only include type \") + \"\".concat(memberType.name, \" once.\"), getUnionMemberTypeNodes(union, memberType.name));\n        continue;\n      }\n\n      includedTypeNames[memberType.name] = true;\n\n      if (!isObjectType(memberType)) {\n        context.reportError(\"Union type \".concat(union.name, \" can only include Object types, \") + \"it cannot include \".concat(inspect(memberType), \".\"), getUnionMemberTypeNodes(union, String(memberType)));\n      }\n    }\n  } catch (err) {\n    _didIteratorError10 = true;\n    _iteratorError10 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion10 && _iterator10.return != null) {\n        _iterator10.return();\n      }\n    } finally {\n      if (_didIteratorError10) {\n        throw _iteratorError10;\n      }\n    }\n  }\n}\n\nfunction validateEnumValues(context, enumType) {\n  var enumValues = enumType.getValues();\n\n  if (enumValues.length === 0) {\n    context.reportError(\"Enum type \".concat(enumType.name, \" must define one or more values.\"), getAllNodes(enumType));\n  }\n\n  var _iteratorNormalCompletion11 = true;\n  var _didIteratorError11 = false;\n  var _iteratorError11 = undefined;\n\n  try {\n    for (var _iterator11 = enumValues[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {\n      var enumValue = _step11.value;\n      var valueName = enumValue.name; // Ensure no duplicates.\n\n      var allNodes = getEnumValueNodes(enumType, valueName);\n\n      if (allNodes && allNodes.length > 1) {\n        context.reportError(\"Enum type \".concat(enumType.name, \" can include value \").concat(valueName, \" only once.\"), allNodes);\n      } // Ensure valid name.\n\n\n      validateName(context, enumValue);\n\n      if (valueName === 'true' || valueName === 'false' || valueName === 'null') {\n        context.reportError(\"Enum type \".concat(enumType.name, \" cannot include value: \").concat(valueName, \".\"), enumValue.astNode);\n      }\n    }\n  } catch (err) {\n    _didIteratorError11 = true;\n    _iteratorError11 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion11 && _iterator11.return != null) {\n        _iterator11.return();\n      }\n    } finally {\n      if (_didIteratorError11) {\n        throw _iteratorError11;\n      }\n    }\n  }\n}\n\nfunction validateInputFields(context, inputObj) {\n  var fields = objectValues(inputObj.getFields());\n\n  if (fields.length === 0) {\n    context.reportError(\"Input Object type \".concat(inputObj.name, \" must define one or more fields.\"), getAllNodes(inputObj));\n  } // Ensure the arguments are valid\n\n\n  var _iteratorNormalCompletion12 = true;\n  var _didIteratorError12 = false;\n  var _iteratorError12 = undefined;\n\n  try {\n    for (var _iterator12 = fields[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {\n      var field = _step12.value;\n      // Ensure they are named correctly.\n      validateName(context, field); // TODO: Ensure they are unique per field.\n      // Ensure the type is an input type\n\n      if (!isInputType(field.type)) {\n        context.reportError(\"The type of \".concat(inputObj.name, \".\").concat(field.name, \" must be Input Type \") + \"but got: \".concat(inspect(field.type), \".\"), field.astNode && field.astNode.type);\n      }\n    }\n  } catch (err) {\n    _didIteratorError12 = true;\n    _iteratorError12 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion12 && _iterator12.return != null) {\n        _iterator12.return();\n      }\n    } finally {\n      if (_didIteratorError12) {\n        throw _iteratorError12;\n      }\n    }\n  }\n}\n\nfunction getAllNodes(object) {\n  var astNode = object.astNode,\n      extensionASTNodes = object.extensionASTNodes;\n  return astNode ? extensionASTNodes ? [astNode].concat(extensionASTNodes) : [astNode] : extensionASTNodes || [];\n}\n\nfunction getAllSubNodes(object, getter) {\n  var result = [];\n  var _iteratorNormalCompletion13 = true;\n  var _didIteratorError13 = false;\n  var _iteratorError13 = undefined;\n\n  try {\n    for (var _iterator13 = getAllNodes(object)[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {\n      var astNode = _step13.value;\n\n      if (astNode) {\n        var subNodes = getter(astNode);\n\n        if (subNodes) {\n          result = result.concat(subNodes);\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError13 = true;\n    _iteratorError13 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion13 && _iterator13.return != null) {\n        _iterator13.return();\n      }\n    } finally {\n      if (_didIteratorError13) {\n        throw _iteratorError13;\n      }\n    }\n  }\n\n  return result;\n}\n\nfunction getImplementsInterfaceNode(type, iface) {\n  return getAllImplementsInterfaceNodes(type, iface)[0];\n}\n\nfunction getAllImplementsInterfaceNodes(type, iface) {\n  return getAllSubNodes(type, function (typeNode) {\n    return typeNode.interfaces;\n  }).filter(function (ifaceNode) {\n    return ifaceNode.name.value === iface.name;\n  });\n}\n\nfunction getFieldNode(type, fieldName) {\n  return getAllFieldNodes(type, fieldName)[0];\n}\n\nfunction getAllFieldNodes(type, fieldName) {\n  return getAllSubNodes(type, function (typeNode) {\n    return typeNode.fields;\n  }).filter(function (fieldNode) {\n    return fieldNode.name.value === fieldName;\n  });\n}\n\nfunction getFieldTypeNode(type, fieldName) {\n  var fieldNode = getFieldNode(type, fieldName);\n  return fieldNode && fieldNode.type;\n}\n\nfunction getFieldArgNode(type, fieldName, argName) {\n  return getAllFieldArgNodes(type, fieldName, argName)[0];\n}\n\nfunction getAllFieldArgNodes(type, fieldName, argName) {\n  var argNodes = [];\n  var fieldNode = getFieldNode(type, fieldName);\n\n  if (fieldNode && fieldNode.arguments) {\n    var _iteratorNormalCompletion14 = true;\n    var _didIteratorError14 = false;\n    var _iteratorError14 = undefined;\n\n    try {\n      for (var _iterator14 = fieldNode.arguments[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {\n        var node = _step14.value;\n\n        if (node.name.value === argName) {\n          argNodes.push(node);\n        }\n      }\n    } catch (err) {\n      _didIteratorError14 = true;\n      _iteratorError14 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion14 && _iterator14.return != null) {\n          _iterator14.return();\n        }\n      } finally {\n        if (_didIteratorError14) {\n          throw _iteratorError14;\n        }\n      }\n    }\n  }\n\n  return argNodes;\n}\n\nfunction getFieldArgTypeNode(type, fieldName, argName) {\n  var fieldArgNode = getFieldArgNode(type, fieldName, argName);\n  return fieldArgNode && fieldArgNode.type;\n}\n\nfunction getAllDirectiveArgNodes(directive, argName) {\n  return getAllSubNodes(directive, function (directiveNode) {\n    return directiveNode.arguments;\n  }).filter(function (argNode) {\n    return argNode.name.value === argName;\n  });\n}\n\nfunction getDirectiveArgTypeNode(directive, argName) {\n  var argNode = getAllDirectiveArgNodes(directive, argName)[0];\n  return argNode && argNode.type;\n}\n\nfunction getUnionMemberTypeNodes(union, typeName) {\n  return getAllSubNodes(union, function (unionNode) {\n    return unionNode.types;\n  }).filter(function (typeNode) {\n    return typeNode.name.value === typeName;\n  });\n}\n\nfunction getEnumValueNodes(enumType, valueName) {\n  return getAllSubNodes(enumType, function (enumNode) {\n    return enumNode.values;\n  }).filter(function (valueNode) {\n    return valueNode.name.value === valueName;\n  });\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = invariant;\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nfunction invariant(condition, message) {\n  /* istanbul ignore else */\n  if (!condition) {\n    throw new Error(message);\n  }\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = applyToStringTag;\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * The `applyToStringTag()` function checks first to see if the runtime\n * supports the `Symbol` class and then if the `Symbol.toStringTag` constant\n * is defined as a `Symbol` instance. If both conditions are met, the\n * Symbol.toStringTag property is defined as a getter that returns the\n * supplied class constructor's name.\n *\n * @method applyToStringTag\n *\n * @param {Class<any>} classObject a class such as Object, String, Number but\n * typically one of your own creation through the class keyword; `class A {}`,\n * for example.\n */\nfunction applyToStringTag(classObject) {\n  if (typeof Symbol === 'function' && Symbol.toStringTag) {\n    Object.defineProperty(classObject.prototype, Symbol.toStringTag, {\n      get: function get() {\n        return this.constructor.name;\n      }\n    });\n  }\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Source = void 0;\n\nvar _invariant = _interopRequireDefault(require(\"../jsutils/invariant\"));\n\nvar _defineToStringTag = _interopRequireDefault(require(\"../jsutils/defineToStringTag\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * A representation of source input to GraphQL.\n * `name` and `locationOffset` are optional. They are useful for clients who\n * store GraphQL documents in source files; for example, if the GraphQL input\n * starts at line 40 in a file named Foo.graphql, it might be useful for name to\n * be \"Foo.graphql\" and location to be `{ line: 40, column: 0 }`.\n * line and column in locationOffset are 1-indexed\n */\nvar Source = function Source(body, name, locationOffset) {\n  _defineProperty(this, \"body\", void 0);\n\n  _defineProperty(this, \"name\", void 0);\n\n  _defineProperty(this, \"locationOffset\", void 0);\n\n  this.body = body;\n  this.name = name || 'GraphQL request';\n  this.locationOffset = locationOffset || {\n    line: 1,\n    column: 1\n  };\n  !(this.locationOffset.line > 0) ? (0, _invariant.default)(0, 'line in locationOffset is 1-indexed and must be positive') : void 0;\n  !(this.locationOffset.column > 0) ? (0, _invariant.default)(0, 'column in locationOffset is 1-indexed and must be positive') : void 0;\n}; // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\n\n\nexports.Source = Source;\n(0, _defineToStringTag.default)(Source);","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLError = GraphQLError;\n\nvar _printError = require(\"./printError\");\n\nvar _location = require(\"../language/location\");\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nfunction GraphQLError( // eslint-disable-line no-redeclare\nmessage, nodes, source, positions, path, originalError, extensions) {\n  // Compute list of blame nodes.\n  var _nodes = Array.isArray(nodes) ? nodes.length !== 0 ? nodes : undefined : nodes ? [nodes] : undefined; // Compute locations in the source for the given nodes/positions.\n\n\n  var _source = source;\n\n  if (!_source && _nodes) {\n    var node = _nodes[0];\n    _source = node && node.loc && node.loc.source;\n  }\n\n  var _positions = positions;\n\n  if (!_positions && _nodes) {\n    _positions = _nodes.reduce(function (list, node) {\n      if (node.loc) {\n        list.push(node.loc.start);\n      }\n\n      return list;\n    }, []);\n  }\n\n  if (_positions && _positions.length === 0) {\n    _positions = undefined;\n  }\n\n  var _locations;\n\n  if (positions && source) {\n    _locations = positions.map(function (pos) {\n      return (0, _location.getLocation)(source, pos);\n    });\n  } else if (_nodes) {\n    _locations = _nodes.reduce(function (list, node) {\n      if (node.loc) {\n        list.push((0, _location.getLocation)(node.loc.source, node.loc.start));\n      }\n\n      return list;\n    }, []);\n  }\n\n  var _extensions = extensions || originalError && originalError.extensions;\n\n  Object.defineProperties(this, {\n    message: {\n      value: message,\n      // By being enumerable, JSON.stringify will include `message` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: true,\n      writable: true\n    },\n    locations: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: _locations || undefined,\n      // By being enumerable, JSON.stringify will include `locations` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(_locations)\n    },\n    path: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: path || undefined,\n      // By being enumerable, JSON.stringify will include `path` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(path)\n    },\n    nodes: {\n      value: _nodes || undefined\n    },\n    source: {\n      value: _source || undefined\n    },\n    positions: {\n      value: _positions || undefined\n    },\n    originalError: {\n      value: originalError\n    },\n    extensions: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: _extensions || undefined,\n      // By being enumerable, JSON.stringify will include `path` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(_extensions)\n    }\n  }); // Include (non-enumerable) stack trace.\n\n  if (originalError && originalError.stack) {\n    Object.defineProperty(this, 'stack', {\n      value: originalError.stack,\n      writable: true,\n      configurable: true\n    });\n  } else if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, GraphQLError);\n  } else {\n    Object.defineProperty(this, 'stack', {\n      value: Error().stack,\n      writable: true,\n      configurable: true\n    });\n  }\n}\n\nGraphQLError.prototype = Object.create(Error.prototype, {\n  constructor: {\n    value: GraphQLError\n  },\n  name: {\n    value: 'GraphQLError'\n  },\n  toString: {\n    value: function toString() {\n      return (0, _printError.printError)(this);\n    }\n  }\n});","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.syntaxError = syntaxError;\n\nvar _GraphQLError = require(\"./GraphQLError\");\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\nfunction syntaxError(source, position, description) {\n  return new _GraphQLError.GraphQLError(\"Syntax Error: \".concat(description), undefined, source, [position]);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.locatedError = locatedError;\n\nvar _GraphQLError = require(\"./GraphQLError\");\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Given an arbitrary Error, presumably thrown while attempting to execute a\n * GraphQL operation, produce a new GraphQLError aware of the location in the\n * document responsible for the original Error.\n */\nfunction locatedError(originalError, nodes, path) {\n  // Note: this uses a brand-check to support GraphQL errors originating from\n  // other contexts.\n  if (originalError && Array.isArray(originalError.path)) {\n    return originalError;\n  }\n\n  return new _GraphQLError.GraphQLError(originalError && originalError.message, originalError && originalError.nodes || nodes, originalError && originalError.source, originalError && originalError.positions, path, originalError);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatError = formatError;\n\nvar _invariant = _interopRequireDefault(require(\"../jsutils/invariant\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Given a GraphQLError, format it according to the rules described by the\n * Response Format, Errors section of the GraphQL Specification.\n */\nfunction formatError(error) {\n  !error ? (0, _invariant.default)(0, 'Received null or undefined error.') : void 0;\n  var message = error.message || 'An unknown error occurred.';\n  var locations = error.locations;\n  var path = error.path;\n  var extensions = error.extensions;\n  return extensions ? {\n    message: message,\n    locations: locations,\n    path: path,\n    extensions: extensions\n  } : {\n    message: message,\n    locations: locations,\n    path: path\n  };\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"GraphQLError\", {\n  enumerable: true,\n  get: function get() {\n    return _GraphQLError.GraphQLError;\n  }\n});\nObject.defineProperty(exports, \"syntaxError\", {\n  enumerable: true,\n  get: function get() {\n    return _syntaxError.syntaxError;\n  }\n});\nObject.defineProperty(exports, \"locatedError\", {\n  enumerable: true,\n  get: function get() {\n    return _locatedError.locatedError;\n  }\n});\nObject.defineProperty(exports, \"printError\", {\n  enumerable: true,\n  get: function get() {\n    return _printError.printError;\n  }\n});\nObject.defineProperty(exports, \"formatError\", {\n  enumerable: true,\n  get: function get() {\n    return _formatError.formatError;\n  }\n});\n\nvar _GraphQLError = require(\"./GraphQLError\");\n\nvar _syntaxError = require(\"./syntaxError\");\n\nvar _locatedError = require(\"./locatedError\");\n\nvar _printError = require(\"./printError\");\n\nvar _formatError = require(\"./formatError\");","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = blockStringValue;\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n */\nfunction blockStringValue(rawString) {\n  // Expand a block string's raw value into independent lines.\n  var lines = rawString.split(/\\r\\n|[\\n\\r]/g); // Remove common indentation from all lines but first.\n\n  var commonIndent = null;\n\n  for (var i = 1; i < lines.length; i++) {\n    var line = lines[i];\n    var indent = leadingWhitespace(line);\n\n    if (indent < line.length && (commonIndent === null || indent < commonIndent)) {\n      commonIndent = indent;\n\n      if (commonIndent === 0) {\n        break;\n      }\n    }\n  }\n\n  if (commonIndent) {\n    for (var _i = 1; _i < lines.length; _i++) {\n      lines[_i] = lines[_i].slice(commonIndent);\n    }\n  } // Remove leading and trailing blank lines.\n\n\n  while (lines.length > 0 && isBlank(lines[0])) {\n    lines.shift();\n  }\n\n  while (lines.length > 0 && isBlank(lines[lines.length - 1])) {\n    lines.pop();\n  } // Return a string of the lines joined with U+000A.\n\n\n  return lines.join('\\n');\n}\n\nfunction leadingWhitespace(str) {\n  var i = 0;\n\n  while (i < str.length && (str[i] === ' ' || str[i] === '\\t')) {\n    i++;\n  }\n\n  return i;\n}\n\nfunction isBlank(str) {\n  return leadingWhitespace(str) === str.length;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createLexer = createLexer;\nexports.getTokenDesc = getTokenDesc;\nexports.TokenKind = void 0;\n\nvar _error = require(\"../error\");\n\nvar _blockStringValue = _interopRequireDefault(require(\"./blockStringValue\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Given a Source object, this returns a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\nfunction createLexer(source, options) {\n  var startOfFileToken = new Tok(TokenKind.SOF, 0, 0, 0, 0, null);\n  var lexer = {\n    source: source,\n    options: options,\n    lastToken: startOfFileToken,\n    token: startOfFileToken,\n    line: 1,\n    lineStart: 0,\n    advance: advanceLexer,\n    lookahead: lookahead\n  };\n  return lexer;\n}\n\nfunction advanceLexer() {\n  this.lastToken = this.token;\n  var token = this.token = this.lookahead();\n  return token;\n}\n\nfunction lookahead() {\n  var token = this.token;\n\n  if (token.kind !== TokenKind.EOF) {\n    do {\n      // Note: next is only mutable during parsing, so we cast to allow this.\n      token = token.next || (token.next = readToken(this, token));\n    } while (token.kind === TokenKind.COMMENT);\n  }\n\n  return token;\n}\n/**\n * The return type of createLexer.\n */\n\n\n/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nvar TokenKind = Object.freeze({\n  SOF: '<SOF>',\n  EOF: '<EOF>',\n  BANG: '!',\n  DOLLAR: '$',\n  AMP: '&',\n  PAREN_L: '(',\n  PAREN_R: ')',\n  SPREAD: '...',\n  COLON: ':',\n  EQUALS: '=',\n  AT: '@',\n  BRACKET_L: '[',\n  BRACKET_R: ']',\n  BRACE_L: '{',\n  PIPE: '|',\n  BRACE_R: '}',\n  NAME: 'Name',\n  INT: 'Int',\n  FLOAT: 'Float',\n  STRING: 'String',\n  BLOCK_STRING: 'BlockString',\n  COMMENT: 'Comment'\n});\n/**\n * The enum type representing the token kinds values.\n */\n\nexports.TokenKind = TokenKind;\n\n/**\n * A helper function to describe a token as a string for debugging\n */\nfunction getTokenDesc(token) {\n  var value = token.value;\n  return value ? \"\".concat(token.kind, \" \\\"\").concat(value, \"\\\"\") : token.kind;\n}\n\nvar charCodeAt = String.prototype.charCodeAt;\nvar slice = String.prototype.slice;\n/**\n * Helper function for constructing the Token object.\n */\n\nfunction Tok(kind, start, end, line, column, prev, value) {\n  this.kind = kind;\n  this.start = start;\n  this.end = end;\n  this.line = line;\n  this.column = column;\n  this.value = value;\n  this.prev = prev;\n  this.next = null;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\nTok.prototype.toJSON = Tok.prototype.inspect = function toJSON() {\n  return {\n    kind: this.kind,\n    value: this.value,\n    line: this.line,\n    column: this.column\n  };\n};\n\nfunction printCharCode(code) {\n  return (// NaN/undefined represents access beyond the end of the file.\n    isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.\n    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.\n    \"\\\"\\\\u\".concat(('00' + code.toString(16).toUpperCase()).slice(-4), \"\\\"\")\n  );\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace and comments until it finds the next lexable\n * token, then lexes punctuators immediately or calls the appropriate helper\n * function for more complicated tokens.\n */\n\n\nfunction readToken(lexer, prev) {\n  var source = lexer.source;\n  var body = source.body;\n  var bodyLength = body.length;\n  var pos = positionAfterWhitespace(body, prev.end, lexer);\n  var line = lexer.line;\n  var col = 1 + pos - lexer.lineStart;\n\n  if (pos >= bodyLength) {\n    return new Tok(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);\n  }\n\n  var code = charCodeAt.call(body, pos); // SourceCharacter\n\n  switch (code) {\n    // !\n    case 33:\n      return new Tok(TokenKind.BANG, pos, pos + 1, line, col, prev);\n    // #\n\n    case 35:\n      return readComment(source, pos, line, col, prev);\n    // $\n\n    case 36:\n      return new Tok(TokenKind.DOLLAR, pos, pos + 1, line, col, prev);\n    // &\n\n    case 38:\n      return new Tok(TokenKind.AMP, pos, pos + 1, line, col, prev);\n    // (\n\n    case 40:\n      return new Tok(TokenKind.PAREN_L, pos, pos + 1, line, col, prev);\n    // )\n\n    case 41:\n      return new Tok(TokenKind.PAREN_R, pos, pos + 1, line, col, prev);\n    // .\n\n    case 46:\n      if (charCodeAt.call(body, pos + 1) === 46 && charCodeAt.call(body, pos + 2) === 46) {\n        return new Tok(TokenKind.SPREAD, pos, pos + 3, line, col, prev);\n      }\n\n      break;\n    // :\n\n    case 58:\n      return new Tok(TokenKind.COLON, pos, pos + 1, line, col, prev);\n    // =\n\n    case 61:\n      return new Tok(TokenKind.EQUALS, pos, pos + 1, line, col, prev);\n    // @\n\n    case 64:\n      return new Tok(TokenKind.AT, pos, pos + 1, line, col, prev);\n    // [\n\n    case 91:\n      return new Tok(TokenKind.BRACKET_L, pos, pos + 1, line, col, prev);\n    // ]\n\n    case 93:\n      return new Tok(TokenKind.BRACKET_R, pos, pos + 1, line, col, prev);\n    // {\n\n    case 123:\n      return new Tok(TokenKind.BRACE_L, pos, pos + 1, line, col, prev);\n    // |\n\n    case 124:\n      return new Tok(TokenKind.PIPE, pos, pos + 1, line, col, prev);\n    // }\n\n    case 125:\n      return new Tok(TokenKind.BRACE_R, pos, pos + 1, line, col, prev);\n    // A-Z _ a-z\n\n    case 65:\n    case 66:\n    case 67:\n    case 68:\n    case 69:\n    case 70:\n    case 71:\n    case 72:\n    case 73:\n    case 74:\n    case 75:\n    case 76:\n    case 77:\n    case 78:\n    case 79:\n    case 80:\n    case 81:\n    case 82:\n    case 83:\n    case 84:\n    case 85:\n    case 86:\n    case 87:\n    case 88:\n    case 89:\n    case 90:\n    case 95:\n    case 97:\n    case 98:\n    case 99:\n    case 100:\n    case 101:\n    case 102:\n    case 103:\n    case 104:\n    case 105:\n    case 106:\n    case 107:\n    case 108:\n    case 109:\n    case 110:\n    case 111:\n    case 112:\n    case 113:\n    case 114:\n    case 115:\n    case 116:\n    case 117:\n    case 118:\n    case 119:\n    case 120:\n    case 121:\n    case 122:\n      return readName(source, pos, line, col, prev);\n    // - 0-9\n\n    case 45:\n    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n      return readNumber(source, pos, code, line, col, prev);\n    // \"\n\n    case 34:\n      if (charCodeAt.call(body, pos + 1) === 34 && charCodeAt.call(body, pos + 2) === 34) {\n        return readBlockString(source, pos, line, col, prev);\n      }\n\n      return readString(source, pos, line, col, prev);\n  }\n\n  throw (0, _error.syntaxError)(source, pos, unexpectedCharacterMessage(code));\n}\n/**\n * Report a message that an unexpected character was encountered.\n */\n\n\nfunction unexpectedCharacterMessage(code) {\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n    return \"Cannot contain the invalid character \".concat(printCharCode(code), \".\");\n  }\n\n  if (code === 39) {\n    // '\n    return \"Unexpected single quote character ('), did you mean to use \" + 'a double quote (\")?';\n  }\n\n  return \"Cannot parse the unexpected character \".concat(printCharCode(code), \".\");\n}\n/**\n * Reads from body starting at startPosition until it finds a non-whitespace\n * or commented character, then returns the position of that character for\n * lexing.\n */\n\n\nfunction positionAfterWhitespace(body, startPosition, lexer) {\n  var bodyLength = body.length;\n  var position = startPosition;\n\n  while (position < bodyLength) {\n    var code = charCodeAt.call(body, position); // tab | space | comma | BOM\n\n    if (code === 9 || code === 32 || code === 44 || code === 0xfeff) {\n      ++position;\n    } else if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (charCodeAt.call(body, position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else {\n      break;\n    }\n  }\n\n  return position;\n}\n/**\n * Reads a comment token from the source file.\n *\n * #[\\u0009\\u0020-\\uFFFF]*\n */\n\n\nfunction readComment(source, start, line, col, prev) {\n  var body = source.body;\n  var code;\n  var position = start;\n\n  do {\n    code = charCodeAt.call(body, ++position);\n  } while (code !== null && ( // SourceCharacter but not LineTerminator\n  code > 0x001f || code === 0x0009));\n\n  return new Tok(TokenKind.COMMENT, start, position, line, col, prev, slice.call(body, start + 1, position));\n}\n/**\n * Reads a number token from the source file, either a float\n * or an int depending on whether a decimal point appears.\n *\n * Int:   -?(0|[1-9][0-9]*)\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\n */\n\n\nfunction readNumber(source, start, firstCode, line, col, prev) {\n  var body = source.body;\n  var code = firstCode;\n  var position = start;\n  var isFloat = false;\n\n  if (code === 45) {\n    // -\n    code = charCodeAt.call(body, ++position);\n  }\n\n  if (code === 48) {\n    // 0\n    code = charCodeAt.call(body, ++position);\n\n    if (code >= 48 && code <= 57) {\n      throw (0, _error.syntaxError)(source, position, \"Invalid number, unexpected digit after 0: \".concat(printCharCode(code), \".\"));\n    }\n  } else {\n    position = readDigits(source, position, code);\n    code = charCodeAt.call(body, position);\n  }\n\n  if (code === 46) {\n    // .\n    isFloat = true;\n    code = charCodeAt.call(body, ++position);\n    position = readDigits(source, position, code);\n    code = charCodeAt.call(body, position);\n  }\n\n  if (code === 69 || code === 101) {\n    // E e\n    isFloat = true;\n    code = charCodeAt.call(body, ++position);\n\n    if (code === 43 || code === 45) {\n      // + -\n      code = charCodeAt.call(body, ++position);\n    }\n\n    position = readDigits(source, position, code);\n  }\n\n  return new Tok(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, slice.call(body, start, position));\n}\n/**\n * Returns the new position in the source after reading digits.\n */\n\n\nfunction readDigits(source, start, firstCode) {\n  var body = source.body;\n  var position = start;\n  var code = firstCode;\n\n  if (code >= 48 && code <= 57) {\n    // 0 - 9\n    do {\n      code = charCodeAt.call(body, ++position);\n    } while (code >= 48 && code <= 57); // 0 - 9\n\n\n    return position;\n  }\n\n  throw (0, _error.syntaxError)(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n}\n/**\n * Reads a string token from the source file.\n *\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\n */\n\n\nfunction readString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 1;\n  var chunkStart = position;\n  var code = 0;\n  var value = '';\n\n  while (position < body.length && (code = charCodeAt.call(body, position)) !== null && // not LineTerminator\n  code !== 0x000a && code !== 0x000d) {\n    // Closing Quote (\")\n    if (code === 34) {\n      value += slice.call(body, chunkStart, position);\n      return new Tok(TokenKind.STRING, start, position + 1, line, col, prev, value);\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009) {\n      throw (0, _error.syntaxError)(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    ++position;\n\n    if (code === 92) {\n      // \\\n      value += slice.call(body, chunkStart, position - 1);\n      code = charCodeAt.call(body, position);\n\n      switch (code) {\n        case 34:\n          value += '\"';\n          break;\n\n        case 47:\n          value += '/';\n          break;\n\n        case 92:\n          value += '\\\\';\n          break;\n\n        case 98:\n          value += '\\b';\n          break;\n\n        case 102:\n          value += '\\f';\n          break;\n\n        case 110:\n          value += '\\n';\n          break;\n\n        case 114:\n          value += '\\r';\n          break;\n\n        case 116:\n          value += '\\t';\n          break;\n\n        case 117:\n          // u\n          var charCode = uniCharCode(charCodeAt.call(body, position + 1), charCodeAt.call(body, position + 2), charCodeAt.call(body, position + 3), charCodeAt.call(body, position + 4));\n\n          if (charCode < 0) {\n            throw (0, _error.syntaxError)(source, position, 'Invalid character escape sequence: ' + \"\\\\u\".concat(body.slice(position + 1, position + 5), \".\"));\n          }\n\n          value += String.fromCharCode(charCode);\n          position += 4;\n          break;\n\n        default:\n          throw (0, _error.syntaxError)(source, position, \"Invalid character escape sequence: \\\\\".concat(String.fromCharCode(code), \".\"));\n      }\n\n      ++position;\n      chunkStart = position;\n    }\n  }\n\n  throw (0, _error.syntaxError)(source, position, 'Unterminated string.');\n}\n/**\n * Reads a block string token from the source file.\n *\n * \"\"\"(\"?\"?(\\\\\"\"\"|\\\\(?!=\"\"\")|[^\"\\\\]))*\"\"\"\n */\n\n\nfunction readBlockString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 3;\n  var chunkStart = position;\n  var code = 0;\n  var rawValue = '';\n\n  while (position < body.length && (code = charCodeAt.call(body, position)) !== null) {\n    // Closing Triple-Quote (\"\"\")\n    if (code === 34 && charCodeAt.call(body, position + 1) === 34 && charCodeAt.call(body, position + 2) === 34) {\n      rawValue += slice.call(body, chunkStart, position);\n      return new Tok(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, (0, _blockStringValue.default)(rawValue));\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n      throw (0, _error.syntaxError)(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    } // Escape Triple-Quote (\\\"\"\")\n\n\n    if (code === 92 && charCodeAt.call(body, position + 1) === 34 && charCodeAt.call(body, position + 2) === 34 && charCodeAt.call(body, position + 3) === 34) {\n      rawValue += slice.call(body, chunkStart, position) + '\"\"\"';\n      position += 4;\n      chunkStart = position;\n    } else {\n      ++position;\n    }\n  }\n\n  throw (0, _error.syntaxError)(source, position, 'Unterminated string.');\n}\n/**\n * Converts four hexadecimal chars to the integer that the\n * string represents. For example, uniCharCode('0','0','0','f')\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\n *\n * Returns a negative number on error, if a char was invalid.\n *\n * This is implemented by noting that char2hex() returns -1 on error,\n * which means the result of ORing the char2hex() will also be negative.\n */\n\n\nfunction uniCharCode(a, b, c, d) {\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\n}\n/**\n * Converts a hex character to its integer value.\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 on error.\n */\n\n\nfunction char2hex(a) {\n  return a >= 48 && a <= 57 ? a - 48 // 0-9\n  : a >= 65 && a <= 70 ? a - 55 // A-F\n  : a >= 97 && a <= 102 ? a - 87 // a-f\n  : -1;\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * [_A-Za-z][_0-9A-Za-z]*\n */\n\n\nfunction readName(source, start, line, col, prev) {\n  var body = source.body;\n  var bodyLength = body.length;\n  var position = start + 1;\n  var code = 0;\n\n  while (position !== bodyLength && (code = charCodeAt.call(body, position)) !== null && (code === 95 || // _\n  code >= 48 && code <= 57 || // 0-9\n  code >= 65 && code <= 90 || // A-Z\n  code >= 97 && code <= 122) // a-z\n  ) {\n    ++position;\n  }\n\n  return new Tok(TokenKind.NAME, start, position, line, col, prev, slice.call(body, start, position));\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Kind = void 0;\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * The set of allowed kind values for AST nodes.\n */\nvar Kind = Object.freeze({\n  // Name\n  NAME: 'Name',\n  // Document\n  DOCUMENT: 'Document',\n  OPERATION_DEFINITION: 'OperationDefinition',\n  VARIABLE_DEFINITION: 'VariableDefinition',\n  SELECTION_SET: 'SelectionSet',\n  FIELD: 'Field',\n  ARGUMENT: 'Argument',\n  // Fragments\n  FRAGMENT_SPREAD: 'FragmentSpread',\n  INLINE_FRAGMENT: 'InlineFragment',\n  FRAGMENT_DEFINITION: 'FragmentDefinition',\n  // Values\n  VARIABLE: 'Variable',\n  INT: 'IntValue',\n  FLOAT: 'FloatValue',\n  STRING: 'StringValue',\n  BOOLEAN: 'BooleanValue',\n  NULL: 'NullValue',\n  ENUM: 'EnumValue',\n  LIST: 'ListValue',\n  OBJECT: 'ObjectValue',\n  OBJECT_FIELD: 'ObjectField',\n  // Directives\n  DIRECTIVE: 'Directive',\n  // Types\n  NAMED_TYPE: 'NamedType',\n  LIST_TYPE: 'ListType',\n  NON_NULL_TYPE: 'NonNullType',\n  // Type System Definitions\n  SCHEMA_DEFINITION: 'SchemaDefinition',\n  OPERATION_TYPE_DEFINITION: 'OperationTypeDefinition',\n  // Type Definitions\n  SCALAR_TYPE_DEFINITION: 'ScalarTypeDefinition',\n  OBJECT_TYPE_DEFINITION: 'ObjectTypeDefinition',\n  FIELD_DEFINITION: 'FieldDefinition',\n  INPUT_VALUE_DEFINITION: 'InputValueDefinition',\n  INTERFACE_TYPE_DEFINITION: 'InterfaceTypeDefinition',\n  UNION_TYPE_DEFINITION: 'UnionTypeDefinition',\n  ENUM_TYPE_DEFINITION: 'EnumTypeDefinition',\n  ENUM_VALUE_DEFINITION: 'EnumValueDefinition',\n  INPUT_OBJECT_TYPE_DEFINITION: 'InputObjectTypeDefinition',\n  // Directive Definitions\n  DIRECTIVE_DEFINITION: 'DirectiveDefinition',\n  // Type System Extensions\n  SCHEMA_EXTENSION: 'SchemaExtension',\n  // Type Extensions\n  SCALAR_TYPE_EXTENSION: 'ScalarTypeExtension',\n  OBJECT_TYPE_EXTENSION: 'ObjectTypeExtension',\n  INTERFACE_TYPE_EXTENSION: 'InterfaceTypeExtension',\n  UNION_TYPE_EXTENSION: 'UnionTypeExtension',\n  ENUM_TYPE_EXTENSION: 'EnumTypeExtension',\n  INPUT_OBJECT_TYPE_EXTENSION: 'InputObjectTypeExtension'\n});\n/**\n * The enum type representing the possible kind values of AST nodes.\n */\n\nexports.Kind = Kind;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DirectiveLocation = void 0;\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * The set of allowed directive location values.\n */\nvar DirectiveLocation = Object.freeze({\n  // Request Definitions\n  QUERY: 'QUERY',\n  MUTATION: 'MUTATION',\n  SUBSCRIPTION: 'SUBSCRIPTION',\n  FIELD: 'FIELD',\n  FRAGMENT_DEFINITION: 'FRAGMENT_DEFINITION',\n  FRAGMENT_SPREAD: 'FRAGMENT_SPREAD',\n  INLINE_FRAGMENT: 'INLINE_FRAGMENT',\n  VARIABLE_DEFINITION: 'VARIABLE_DEFINITION',\n  // Type System Definitions\n  SCHEMA: 'SCHEMA',\n  SCALAR: 'SCALAR',\n  OBJECT: 'OBJECT',\n  FIELD_DEFINITION: 'FIELD_DEFINITION',\n  ARGUMENT_DEFINITION: 'ARGUMENT_DEFINITION',\n  INTERFACE: 'INTERFACE',\n  UNION: 'UNION',\n  ENUM: 'ENUM',\n  ENUM_VALUE: 'ENUM_VALUE',\n  INPUT_OBJECT: 'INPUT_OBJECT',\n  INPUT_FIELD_DEFINITION: 'INPUT_FIELD_DEFINITION'\n});\n/**\n * The enum type representing the directive location values.\n */\n\nexports.DirectiveLocation = DirectiveLocation;","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport inspect from '../jsutils/inspect';\nimport { Source } from './source';\nimport { syntaxError } from '../error';\nimport { createLexer, TokenKind, getTokenDesc } from './lexer';\nimport { Kind } from './kinds';\nimport { DirectiveLocation } from './directiveLocation';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\n\n  if (!(sourceObj instanceof Source)) {\n    throw new TypeError(\"Must provide Source. Received: \".concat(inspect(sourceObj)));\n  }\n\n  var lexer = createLexer(sourceObj, options || {});\n  return parseDocument(lexer);\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\n  var lexer = createLexer(sourceObj, options || {});\n  expect(lexer, TokenKind.SOF);\n  var value = parseValueLiteral(lexer, false);\n  expect(lexer, TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\n  var lexer = createLexer(sourceObj, options || {});\n  expect(lexer, TokenKind.SOF);\n  var type = parseTypeReference(lexer);\n  expect(lexer, TokenKind.EOF);\n  return type;\n}\n/**\n * Converts a name lex token into a name parse node.\n */\n\nfunction parseName(lexer) {\n  var token = expect(lexer, TokenKind.NAME);\n  return {\n    kind: Kind.NAME,\n    value: token.value,\n    loc: loc(lexer, token)\n  };\n} // Implements the parsing rules in the Document section.\n\n/**\n * Document : Definition+\n */\n\n\nfunction parseDocument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.DOCUMENT,\n    definitions: many(lexer, TokenKind.SOF, parseDefinition, TokenKind.EOF),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Definition :\n *   - ExecutableDefinition\n *   - TypeSystemDefinition\n *   - TypeSystemExtension\n */\n\n\nfunction parseDefinition(lexer) {\n  if (peek(lexer, TokenKind.NAME)) {\n    switch (lexer.token.value) {\n      case 'query':\n      case 'mutation':\n      case 'subscription':\n      case 'fragment':\n        return parseExecutableDefinition(lexer);\n\n      case 'schema':\n      case 'scalar':\n      case 'type':\n      case 'interface':\n      case 'union':\n      case 'enum':\n      case 'input':\n      case 'directive':\n        return parseTypeSystemDefinition(lexer);\n\n      case 'extend':\n        return parseTypeSystemExtension(lexer);\n    }\n  } else if (peek(lexer, TokenKind.BRACE_L)) {\n    return parseExecutableDefinition(lexer);\n  } else if (peekDescription(lexer)) {\n    return parseTypeSystemDefinition(lexer);\n  }\n\n  throw unexpected(lexer);\n}\n/**\n * ExecutableDefinition :\n *   - OperationDefinition\n *   - FragmentDefinition\n */\n\n\nfunction parseExecutableDefinition(lexer) {\n  if (peek(lexer, TokenKind.NAME)) {\n    switch (lexer.token.value) {\n      case 'query':\n      case 'mutation':\n      case 'subscription':\n        return parseOperationDefinition(lexer);\n\n      case 'fragment':\n        return parseFragmentDefinition(lexer);\n    }\n  } else if (peek(lexer, TokenKind.BRACE_L)) {\n    return parseOperationDefinition(lexer);\n  }\n\n  throw unexpected(lexer);\n} // Implements the parsing rules in the Operations section.\n\n/**\n * OperationDefinition :\n *  - SelectionSet\n *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n */\n\n\nfunction parseOperationDefinition(lexer) {\n  var start = lexer.token;\n\n  if (peek(lexer, TokenKind.BRACE_L)) {\n    return {\n      kind: Kind.OPERATION_DEFINITION,\n      operation: 'query',\n      name: undefined,\n      variableDefinitions: [],\n      directives: [],\n      selectionSet: parseSelectionSet(lexer),\n      loc: loc(lexer, start)\n    };\n  }\n\n  var operation = parseOperationType(lexer);\n  var name;\n\n  if (peek(lexer, TokenKind.NAME)) {\n    name = parseName(lexer);\n  }\n\n  return {\n    kind: Kind.OPERATION_DEFINITION,\n    operation: operation,\n    name: name,\n    variableDefinitions: parseVariableDefinitions(lexer),\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * OperationType : one of query mutation subscription\n */\n\n\nfunction parseOperationType(lexer) {\n  var operationToken = expect(lexer, TokenKind.NAME);\n\n  switch (operationToken.value) {\n    case 'query':\n      return 'query';\n\n    case 'mutation':\n      return 'mutation';\n\n    case 'subscription':\n      return 'subscription';\n  }\n\n  throw unexpected(lexer, operationToken);\n}\n/**\n * VariableDefinitions : ( VariableDefinition+ )\n */\n\n\nfunction parseVariableDefinitions(lexer) {\n  return peek(lexer, TokenKind.PAREN_L) ? many(lexer, TokenKind.PAREN_L, parseVariableDefinition, TokenKind.PAREN_R) : [];\n}\n/**\n * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n */\n\n\nfunction parseVariableDefinition(lexer) {\n  var start = lexer.token;\n\n  if (lexer.options.experimentalVariableDefinitionDirectives) {\n    return {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: parseVariable(lexer),\n      type: (expect(lexer, TokenKind.COLON), parseTypeReference(lexer)),\n      defaultValue: skip(lexer, TokenKind.EQUALS) ? parseValueLiteral(lexer, true) : undefined,\n      directives: parseDirectives(lexer, true),\n      loc: loc(lexer, start)\n    };\n  }\n\n  return {\n    kind: Kind.VARIABLE_DEFINITION,\n    variable: parseVariable(lexer),\n    type: (expect(lexer, TokenKind.COLON), parseTypeReference(lexer)),\n    defaultValue: skip(lexer, TokenKind.EQUALS) ? parseValueLiteral(lexer, true) : undefined,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Variable : $ Name\n */\n\n\nfunction parseVariable(lexer) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.DOLLAR);\n  return {\n    kind: Kind.VARIABLE,\n    name: parseName(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * SelectionSet : { Selection+ }\n */\n\n\nfunction parseSelectionSet(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.SELECTION_SET,\n    selections: many(lexer, TokenKind.BRACE_L, parseSelection, TokenKind.BRACE_R),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Selection :\n *   - Field\n *   - FragmentSpread\n *   - InlineFragment\n */\n\n\nfunction parseSelection(lexer) {\n  return peek(lexer, TokenKind.SPREAD) ? parseFragment(lexer) : parseField(lexer);\n}\n/**\n * Field : Alias? Name Arguments? Directives? SelectionSet?\n *\n * Alias : Name :\n */\n\n\nfunction parseField(lexer) {\n  var start = lexer.token;\n  var nameOrAlias = parseName(lexer);\n  var alias;\n  var name;\n\n  if (skip(lexer, TokenKind.COLON)) {\n    alias = nameOrAlias;\n    name = parseName(lexer);\n  } else {\n    name = nameOrAlias;\n  }\n\n  return {\n    kind: Kind.FIELD,\n    alias: alias,\n    name: name,\n    arguments: parseArguments(lexer, false),\n    directives: parseDirectives(lexer, false),\n    selectionSet: peek(lexer, TokenKind.BRACE_L) ? parseSelectionSet(lexer) : undefined,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Arguments[Const] : ( Argument[?Const]+ )\n */\n\n\nfunction parseArguments(lexer, isConst) {\n  var item = isConst ? parseConstArgument : parseArgument;\n  return peek(lexer, TokenKind.PAREN_L) ? many(lexer, TokenKind.PAREN_L, item, TokenKind.PAREN_R) : [];\n}\n/**\n * Argument[Const] : Name : Value[?Const]\n */\n\n\nfunction parseArgument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.ARGUMENT,\n    name: parseName(lexer),\n    value: (expect(lexer, TokenKind.COLON), parseValueLiteral(lexer, false)),\n    loc: loc(lexer, start)\n  };\n}\n\nfunction parseConstArgument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.ARGUMENT,\n    name: parseName(lexer),\n    value: (expect(lexer, TokenKind.COLON), parseConstValue(lexer)),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Fragments section.\n\n/**\n * Corresponds to both FragmentSpread and InlineFragment in the spec.\n *\n * FragmentSpread : ... FragmentName Directives?\n *\n * InlineFragment : ... TypeCondition? Directives? SelectionSet\n */\n\n\nfunction parseFragment(lexer) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.SPREAD);\n\n  if (peek(lexer, TokenKind.NAME) && lexer.token.value !== 'on') {\n    return {\n      kind: Kind.FRAGMENT_SPREAD,\n      name: parseFragmentName(lexer),\n      directives: parseDirectives(lexer, false),\n      loc: loc(lexer, start)\n    };\n  }\n\n  var typeCondition;\n\n  if (lexer.token.value === 'on') {\n    lexer.advance();\n    typeCondition = parseNamedType(lexer);\n  }\n\n  return {\n    kind: Kind.INLINE_FRAGMENT,\n    typeCondition: typeCondition,\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * FragmentDefinition :\n *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n *\n * TypeCondition : NamedType\n */\n\n\nfunction parseFragmentDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'fragment'); // Experimental support for defining variables within fragments changes\n  // the grammar of FragmentDefinition:\n  //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n  if (lexer.options.experimentalFragmentVariables) {\n    return {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: parseFragmentName(lexer),\n      variableDefinitions: parseVariableDefinitions(lexer),\n      typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\n      directives: parseDirectives(lexer, false),\n      selectionSet: parseSelectionSet(lexer),\n      loc: loc(lexer, start)\n    };\n  }\n\n  return {\n    kind: Kind.FRAGMENT_DEFINITION,\n    name: parseFragmentName(lexer),\n    typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * FragmentName : Name but not `on`\n */\n\n\nfunction parseFragmentName(lexer) {\n  if (lexer.token.value === 'on') {\n    throw unexpected(lexer);\n  }\n\n  return parseName(lexer);\n} // Implements the parsing rules in the Values section.\n\n/**\n * Value[Const] :\n *   - [~Const] Variable\n *   - IntValue\n *   - FloatValue\n *   - StringValue\n *   - BooleanValue\n *   - NullValue\n *   - EnumValue\n *   - ListValue[?Const]\n *   - ObjectValue[?Const]\n *\n * BooleanValue : one of `true` `false`\n *\n * NullValue : `null`\n *\n * EnumValue : Name but not `true`, `false` or `null`\n */\n\n\nfunction parseValueLiteral(lexer, isConst) {\n  var token = lexer.token;\n\n  switch (token.kind) {\n    case TokenKind.BRACKET_L:\n      return parseList(lexer, isConst);\n\n    case TokenKind.BRACE_L:\n      return parseObject(lexer, isConst);\n\n    case TokenKind.INT:\n      lexer.advance();\n      return {\n        kind: Kind.INT,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case TokenKind.FLOAT:\n      lexer.advance();\n      return {\n        kind: Kind.FLOAT,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case TokenKind.STRING:\n    case TokenKind.BLOCK_STRING:\n      return parseStringLiteral(lexer);\n\n    case TokenKind.NAME:\n      if (token.value === 'true' || token.value === 'false') {\n        lexer.advance();\n        return {\n          kind: Kind.BOOLEAN,\n          value: token.value === 'true',\n          loc: loc(lexer, token)\n        };\n      } else if (token.value === 'null') {\n        lexer.advance();\n        return {\n          kind: Kind.NULL,\n          loc: loc(lexer, token)\n        };\n      }\n\n      lexer.advance();\n      return {\n        kind: Kind.ENUM,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case TokenKind.DOLLAR:\n      if (!isConst) {\n        return parseVariable(lexer);\n      }\n\n      break;\n  }\n\n  throw unexpected(lexer);\n}\n\nfunction parseStringLiteral(lexer) {\n  var token = lexer.token;\n  lexer.advance();\n  return {\n    kind: Kind.STRING,\n    value: token.value,\n    block: token.kind === TokenKind.BLOCK_STRING,\n    loc: loc(lexer, token)\n  };\n}\n\nexport function parseConstValue(lexer) {\n  return parseValueLiteral(lexer, true);\n}\n\nfunction parseValueValue(lexer) {\n  return parseValueLiteral(lexer, false);\n}\n/**\n * ListValue[Const] :\n *   - [ ]\n *   - [ Value[?Const]+ ]\n */\n\n\nfunction parseList(lexer, isConst) {\n  var start = lexer.token;\n  var item = isConst ? parseConstValue : parseValueValue;\n  return {\n    kind: Kind.LIST,\n    values: any(lexer, TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectValue[Const] :\n *   - { }\n *   - { ObjectField[?Const]+ }\n */\n\n\nfunction parseObject(lexer, isConst) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.BRACE_L);\n  var fields = [];\n\n  while (!skip(lexer, TokenKind.BRACE_R)) {\n    fields.push(parseObjectField(lexer, isConst));\n  }\n\n  return {\n    kind: Kind.OBJECT,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectField[Const] : Name : Value[?Const]\n */\n\n\nfunction parseObjectField(lexer, isConst) {\n  var start = lexer.token;\n  return {\n    kind: Kind.OBJECT_FIELD,\n    name: parseName(lexer),\n    value: (expect(lexer, TokenKind.COLON), parseValueLiteral(lexer, isConst)),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Directives section.\n\n/**\n * Directives[Const] : Directive[?Const]+\n */\n\n\nfunction parseDirectives(lexer, isConst) {\n  var directives = [];\n\n  while (peek(lexer, TokenKind.AT)) {\n    directives.push(parseDirective(lexer, isConst));\n  }\n\n  return directives;\n}\n/**\n * Directive[Const] : @ Name Arguments[?Const]?\n */\n\n\nfunction parseDirective(lexer, isConst) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.AT);\n  return {\n    kind: Kind.DIRECTIVE,\n    name: parseName(lexer),\n    arguments: parseArguments(lexer, isConst),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Types section.\n\n/**\n * Type :\n *   - NamedType\n *   - ListType\n *   - NonNullType\n */\n\n\nexport function parseTypeReference(lexer) {\n  var start = lexer.token;\n  var type;\n\n  if (skip(lexer, TokenKind.BRACKET_L)) {\n    type = parseTypeReference(lexer);\n    expect(lexer, TokenKind.BRACKET_R);\n    type = {\n      kind: Kind.LIST_TYPE,\n      type: type,\n      loc: loc(lexer, start)\n    };\n  } else {\n    type = parseNamedType(lexer);\n  }\n\n  if (skip(lexer, TokenKind.BANG)) {\n    return {\n      kind: Kind.NON_NULL_TYPE,\n      type: type,\n      loc: loc(lexer, start)\n    };\n  }\n\n  return type;\n}\n/**\n * NamedType : Name\n */\n\nexport function parseNamedType(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.NAMED_TYPE,\n    name: parseName(lexer),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Type Definition section.\n\n/**\n * TypeSystemDefinition :\n *   - SchemaDefinition\n *   - TypeDefinition\n *   - DirectiveDefinition\n *\n * TypeDefinition :\n *   - ScalarTypeDefinition\n *   - ObjectTypeDefinition\n *   - InterfaceTypeDefinition\n *   - UnionTypeDefinition\n *   - EnumTypeDefinition\n *   - InputObjectTypeDefinition\n */\n\nfunction parseTypeSystemDefinition(lexer) {\n  // Many definitions begin with a description and require a lookahead.\n  var keywordToken = peekDescription(lexer) ? lexer.lookahead() : lexer.token;\n\n  if (keywordToken.kind === TokenKind.NAME) {\n    switch (keywordToken.value) {\n      case 'schema':\n        return parseSchemaDefinition(lexer);\n\n      case 'scalar':\n        return parseScalarTypeDefinition(lexer);\n\n      case 'type':\n        return parseObjectTypeDefinition(lexer);\n\n      case 'interface':\n        return parseInterfaceTypeDefinition(lexer);\n\n      case 'union':\n        return parseUnionTypeDefinition(lexer);\n\n      case 'enum':\n        return parseEnumTypeDefinition(lexer);\n\n      case 'input':\n        return parseInputObjectTypeDefinition(lexer);\n\n      case 'directive':\n        return parseDirectiveDefinition(lexer);\n    }\n  }\n\n  throw unexpected(lexer, keywordToken);\n}\n\nfunction peekDescription(lexer) {\n  return peek(lexer, TokenKind.STRING) || peek(lexer, TokenKind.BLOCK_STRING);\n}\n/**\n * Description : StringValue\n */\n\n\nfunction parseDescription(lexer) {\n  if (peekDescription(lexer)) {\n    return parseStringLiteral(lexer);\n  }\n}\n/**\n * SchemaDefinition : schema Directives[Const]? { OperationTypeDefinition+ }\n */\n\n\nfunction parseSchemaDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'schema');\n  var directives = parseDirectives(lexer, true);\n  var operationTypes = many(lexer, TokenKind.BRACE_L, parseOperationTypeDefinition, TokenKind.BRACE_R);\n  return {\n    kind: Kind.SCHEMA_DEFINITION,\n    directives: directives,\n    operationTypes: operationTypes,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * OperationTypeDefinition : OperationType : NamedType\n */\n\n\nfunction parseOperationTypeDefinition(lexer) {\n  var start = lexer.token;\n  var operation = parseOperationType(lexer);\n  expect(lexer, TokenKind.COLON);\n  var type = parseNamedType(lexer);\n  return {\n    kind: Kind.OPERATION_TYPE_DEFINITION,\n    operation: operation,\n    type: type,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n */\n\n\nfunction parseScalarTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'scalar');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.SCALAR_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectTypeDefinition :\n *   Description?\n *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n */\n\n\nfunction parseObjectTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'type');\n  var name = parseName(lexer);\n  var interfaces = parseImplementsInterfaces(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  return {\n    kind: Kind.OBJECT_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    interfaces: interfaces,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ImplementsInterfaces :\n *   - implements `&`? NamedType\n *   - ImplementsInterfaces & NamedType\n */\n\n\nfunction parseImplementsInterfaces(lexer) {\n  var types = [];\n\n  if (lexer.token.value === 'implements') {\n    lexer.advance(); // Optional leading ampersand\n\n    skip(lexer, TokenKind.AMP);\n\n    do {\n      types.push(parseNamedType(lexer));\n    } while (skip(lexer, TokenKind.AMP) || // Legacy support for the SDL?\n    lexer.options.allowLegacySDLImplementsInterfaces && peek(lexer, TokenKind.NAME));\n  }\n\n  return types;\n}\n/**\n * FieldsDefinition : { FieldDefinition+ }\n */\n\n\nfunction parseFieldsDefinition(lexer) {\n  // Legacy support for the SDL?\n  if (lexer.options.allowLegacySDLEmptyFields && peek(lexer, TokenKind.BRACE_L) && lexer.lookahead().kind === TokenKind.BRACE_R) {\n    lexer.advance();\n    lexer.advance();\n    return [];\n  }\n\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseFieldDefinition, TokenKind.BRACE_R) : [];\n}\n/**\n * FieldDefinition :\n *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n */\n\n\nfunction parseFieldDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  var args = parseArgumentDefs(lexer);\n  expect(lexer, TokenKind.COLON);\n  var type = parseTypeReference(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.FIELD_DEFINITION,\n    description: description,\n    name: name,\n    arguments: args,\n    type: type,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ArgumentsDefinition : ( InputValueDefinition+ )\n */\n\n\nfunction parseArgumentDefs(lexer) {\n  if (!peek(lexer, TokenKind.PAREN_L)) {\n    return [];\n  }\n\n  return many(lexer, TokenKind.PAREN_L, parseInputValueDef, TokenKind.PAREN_R);\n}\n/**\n * InputValueDefinition :\n *   - Description? Name : Type DefaultValue? Directives[Const]?\n */\n\n\nfunction parseInputValueDef(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  expect(lexer, TokenKind.COLON);\n  var type = parseTypeReference(lexer);\n  var defaultValue;\n\n  if (skip(lexer, TokenKind.EQUALS)) {\n    defaultValue = parseConstValue(lexer);\n  }\n\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.INPUT_VALUE_DEFINITION,\n    description: description,\n    name: name,\n    type: type,\n    defaultValue: defaultValue,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InterfaceTypeDefinition :\n *   - Description? interface Name Directives[Const]? FieldsDefinition?\n */\n\n\nfunction parseInterfaceTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'interface');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  return {\n    kind: Kind.INTERFACE_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionTypeDefinition :\n *   - Description? union Name Directives[Const]? UnionMemberTypes?\n */\n\n\nfunction parseUnionTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'union');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var types = parseUnionMemberTypes(lexer);\n  return {\n    kind: Kind.UNION_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    types: types,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionMemberTypes :\n *   - = `|`? NamedType\n *   - UnionMemberTypes | NamedType\n */\n\n\nfunction parseUnionMemberTypes(lexer) {\n  var types = [];\n\n  if (skip(lexer, TokenKind.EQUALS)) {\n    // Optional leading pipe\n    skip(lexer, TokenKind.PIPE);\n\n    do {\n      types.push(parseNamedType(lexer));\n    } while (skip(lexer, TokenKind.PIPE));\n  }\n\n  return types;\n}\n/**\n * EnumTypeDefinition :\n *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n */\n\n\nfunction parseEnumTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'enum');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var values = parseEnumValuesDefinition(lexer);\n  return {\n    kind: Kind.ENUM_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    values: values,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * EnumValuesDefinition : { EnumValueDefinition+ }\n */\n\n\nfunction parseEnumValuesDefinition(lexer) {\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseEnumValueDefinition, TokenKind.BRACE_R) : [];\n}\n/**\n * EnumValueDefinition : Description? EnumValue Directives[Const]?\n *\n * EnumValue : Name\n */\n\n\nfunction parseEnumValueDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.ENUM_VALUE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputObjectTypeDefinition :\n *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n */\n\n\nfunction parseInputObjectTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'input');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseInputFieldsDefinition(lexer);\n  return {\n    kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputFieldsDefinition : { InputValueDefinition+ }\n */\n\n\nfunction parseInputFieldsDefinition(lexer) {\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseInputValueDef, TokenKind.BRACE_R) : [];\n}\n/**\n * TypeSystemExtension :\n *   - SchemaExtension\n *   - TypeExtension\n *\n * TypeExtension :\n *   - ScalarTypeExtension\n *   - ObjectTypeExtension\n *   - InterfaceTypeExtension\n *   - UnionTypeExtension\n *   - EnumTypeExtension\n *   - InputObjectTypeDefinition\n */\n\n\nfunction parseTypeSystemExtension(lexer) {\n  var keywordToken = lexer.lookahead();\n\n  if (keywordToken.kind === TokenKind.NAME) {\n    switch (keywordToken.value) {\n      case 'schema':\n        return parseSchemaExtension(lexer);\n\n      case 'scalar':\n        return parseScalarTypeExtension(lexer);\n\n      case 'type':\n        return parseObjectTypeExtension(lexer);\n\n      case 'interface':\n        return parseInterfaceTypeExtension(lexer);\n\n      case 'union':\n        return parseUnionTypeExtension(lexer);\n\n      case 'enum':\n        return parseEnumTypeExtension(lexer);\n\n      case 'input':\n        return parseInputObjectTypeExtension(lexer);\n    }\n  }\n\n  throw unexpected(lexer, keywordToken);\n}\n/**\n * SchemaExtension :\n *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n *  - extend schema Directives[Const]\n */\n\n\nfunction parseSchemaExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'schema');\n  var directives = parseDirectives(lexer, true);\n  var operationTypes = peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseOperationTypeDefinition, TokenKind.BRACE_R) : [];\n\n  if (directives.length === 0 && operationTypes.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.SCHEMA_EXTENSION,\n    directives: directives,\n    operationTypes: operationTypes,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ScalarTypeExtension :\n *   - extend scalar Name Directives[Const]\n */\n\n\nfunction parseScalarTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'scalar');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n\n  if (directives.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.SCALAR_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectTypeExtension :\n *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n *  - extend type Name ImplementsInterfaces? Directives[Const]\n *  - extend type Name ImplementsInterfaces\n */\n\n\nfunction parseObjectTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'type');\n  var name = parseName(lexer);\n  var interfaces = parseImplementsInterfaces(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n\n  if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.OBJECT_TYPE_EXTENSION,\n    name: name,\n    interfaces: interfaces,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InterfaceTypeExtension :\n *   - extend interface Name Directives[Const]? FieldsDefinition\n *   - extend interface Name Directives[Const]\n */\n\n\nfunction parseInterfaceTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'interface');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n\n  if (directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.INTERFACE_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionTypeExtension :\n *   - extend union Name Directives[Const]? UnionMemberTypes\n *   - extend union Name Directives[Const]\n */\n\n\nfunction parseUnionTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'union');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var types = parseUnionMemberTypes(lexer);\n\n  if (directives.length === 0 && types.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.UNION_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    types: types,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * EnumTypeExtension :\n *   - extend enum Name Directives[Const]? EnumValuesDefinition\n *   - extend enum Name Directives[Const]\n */\n\n\nfunction parseEnumTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'enum');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var values = parseEnumValuesDefinition(lexer);\n\n  if (directives.length === 0 && values.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.ENUM_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    values: values,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputObjectTypeExtension :\n *   - extend input Name Directives[Const]? InputFieldsDefinition\n *   - extend input Name Directives[Const]\n */\n\n\nfunction parseInputObjectTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'input');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseInputFieldsDefinition(lexer);\n\n  if (directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * DirectiveDefinition :\n *   - Description? directive @ Name ArgumentsDefinition? on DirectiveLocations\n */\n\n\nfunction parseDirectiveDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'directive');\n  expect(lexer, TokenKind.AT);\n  var name = parseName(lexer);\n  var args = parseArgumentDefs(lexer);\n  expectKeyword(lexer, 'on');\n  var locations = parseDirectiveLocations(lexer);\n  return {\n    kind: Kind.DIRECTIVE_DEFINITION,\n    description: description,\n    name: name,\n    arguments: args,\n    locations: locations,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * DirectiveLocations :\n *   - `|`? DirectiveLocation\n *   - DirectiveLocations | DirectiveLocation\n */\n\n\nfunction parseDirectiveLocations(lexer) {\n  // Optional leading pipe\n  skip(lexer, TokenKind.PIPE);\n  var locations = [];\n\n  do {\n    locations.push(parseDirectiveLocation(lexer));\n  } while (skip(lexer, TokenKind.PIPE));\n\n  return locations;\n}\n/*\n * DirectiveLocation :\n *   - ExecutableDirectiveLocation\n *   - TypeSystemDirectiveLocation\n *\n * ExecutableDirectiveLocation : one of\n *   `QUERY`\n *   `MUTATION`\n *   `SUBSCRIPTION`\n *   `FIELD`\n *   `FRAGMENT_DEFINITION`\n *   `FRAGMENT_SPREAD`\n *   `INLINE_FRAGMENT`\n *\n * TypeSystemDirectiveLocation : one of\n *   `SCHEMA`\n *   `SCALAR`\n *   `OBJECT`\n *   `FIELD_DEFINITION`\n *   `ARGUMENT_DEFINITION`\n *   `INTERFACE`\n *   `UNION`\n *   `ENUM`\n *   `ENUM_VALUE`\n *   `INPUT_OBJECT`\n *   `INPUT_FIELD_DEFINITION`\n */\n\n\nfunction parseDirectiveLocation(lexer) {\n  var start = lexer.token;\n  var name = parseName(lexer);\n\n  if (DirectiveLocation.hasOwnProperty(name.value)) {\n    return name;\n  }\n\n  throw unexpected(lexer, start);\n} // Core parsing utility functions\n\n/**\n * Returns a location object, used to identify the place in\n * the source that created a given parsed object.\n */\n\n\nfunction loc(lexer, startToken) {\n  if (!lexer.options.noLocation) {\n    return new Loc(startToken, lexer.lastToken, lexer.source);\n  }\n}\n\nfunction Loc(startToken, endToken, source) {\n  this.start = startToken.start;\n  this.end = endToken.end;\n  this.startToken = startToken;\n  this.endToken = endToken;\n  this.source = source;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\nLoc.prototype.toJSON = Loc.prototype.inspect = function toJSON() {\n  return {\n    start: this.start,\n    end: this.end\n  };\n};\n/**\n * Determines if the next token is of a given kind\n */\n\n\nfunction peek(lexer, kind) {\n  return lexer.token.kind === kind;\n}\n/**\n * If the next token is of the given kind, return true after advancing\n * the lexer. Otherwise, do not change the parser state and return false.\n */\n\n\nfunction skip(lexer, kind) {\n  var match = lexer.token.kind === kind;\n\n  if (match) {\n    lexer.advance();\n  }\n\n  return match;\n}\n/**\n * If the next token is of the given kind, return that token after advancing\n * the lexer. Otherwise, do not change the parser state and throw an error.\n */\n\n\nfunction expect(lexer, kind) {\n  var token = lexer.token;\n\n  if (token.kind === kind) {\n    lexer.advance();\n    return token;\n  }\n\n  throw syntaxError(lexer.source, token.start, \"Expected \".concat(kind, \", found \").concat(getTokenDesc(token)));\n}\n/**\n * If the next token is a keyword with the given value, return that token after\n * advancing the lexer. Otherwise, do not change the parser state and return\n * false.\n */\n\n\nfunction expectKeyword(lexer, value) {\n  var token = lexer.token;\n\n  if (token.kind === TokenKind.NAME && token.value === value) {\n    lexer.advance();\n    return token;\n  }\n\n  throw syntaxError(lexer.source, token.start, \"Expected \\\"\".concat(value, \"\\\", found \").concat(getTokenDesc(token)));\n}\n/**\n * Helper function for creating an error when an unexpected lexed token\n * is encountered.\n */\n\n\nfunction unexpected(lexer, atToken) {\n  var token = atToken || lexer.token;\n  return syntaxError(lexer.source, token.start, \"Unexpected \".concat(getTokenDesc(token)));\n}\n/**\n * Returns a possibly empty list of parse nodes, determined by\n * the parseFn. This list begins with a lex token of openKind\n * and ends with a lex token of closeKind. Advances the parser\n * to the next lex token after the closing token.\n */\n\n\nfunction any(lexer, openKind, parseFn, closeKind) {\n  expect(lexer, openKind);\n  var nodes = [];\n\n  while (!skip(lexer, closeKind)) {\n    nodes.push(parseFn(lexer));\n  }\n\n  return nodes;\n}\n/**\n * Returns a non-empty list of parse nodes, determined by\n * the parseFn. This list begins with a lex token of openKind\n * and ends with a lex token of closeKind. Advances the parser\n * to the next lex token after the closing token.\n */\n\n\nfunction many(lexer, openKind, parseFn, closeKind) {\n  expect(lexer, openKind);\n  var nodes = [parseFn(lexer)];\n\n  while (!skip(lexer, closeKind)) {\n    nodes.push(parseFn(lexer));\n  }\n\n  return nodes;\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport inspect from '../jsutils/inspect';\nexport var QueryDocumentKeys = {\n  Name: [],\n  Document: ['definitions'],\n  OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],\n  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: ['name', // Note: fragment variable definitions are experimental and may be changed\n  // or removed in the future.\n  'variableDefinitions', 'typeCondition', 'directives', 'selectionSet'],\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n  Directive: ['name', 'arguments'],\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n  SchemaDefinition: ['directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: ['description', 'name', 'type', 'defaultValue', 'directives'],\n  InterfaceTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],\n  SchemaExtension: ['directives', 'operationTypes'],\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields']\n};\nexport var BREAK = {};\n/**\n * visit() will walk through an AST using a depth first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n *     const editedAST = visit(ast, {\n *       enter(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: skip visiting this node\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       },\n *       leave(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: no action\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       }\n *     });\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to four permutations of\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node a specific kind.\n *\n *     visit(ast, {\n *       Kind(node) {\n *         // enter the \"Kind\" node\n *       }\n *     })\n *\n * 2) Named visitors that trigger upon entering and leaving a node of\n *    a specific kind.\n *\n *     visit(ast, {\n *       Kind: {\n *         enter(node) {\n *           // enter the \"Kind\" node\n *         }\n *         leave(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n *     visit(ast, {\n *       enter(node) {\n *         // enter any node\n *       },\n *       leave(node) {\n *         // leave any node\n *       }\n *     })\n *\n * 4) Parallel visitors for entering and leaving nodes of a specific kind.\n *\n *     visit(ast, {\n *       enter: {\n *         Kind(node) {\n *           // enter the \"Kind\" node\n *         }\n *       },\n *       leave: {\n *         Kind(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n */\n\nexport function visit(root, visitor) {\n  var visitorKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : QueryDocumentKeys;\n\n  /* eslint-disable no-undef-init */\n  var stack = undefined;\n  var inArray = Array.isArray(root);\n  var keys = [root];\n  var index = -1;\n  var edits = [];\n  var node = undefined;\n  var key = undefined;\n  var parent = undefined;\n  var path = [];\n  var ancestors = [];\n  var newRoot = root;\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    var isLeaving = index === keys.length;\n    var isEdited = isLeaving && edits.length !== 0;\n\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n        } else {\n          var clone = {};\n\n          for (var k in node) {\n            if (node.hasOwnProperty(k)) {\n              clone[k] = node[k];\n            }\n          }\n\n          node = clone;\n        }\n\n        var editOffset = 0;\n\n        for (var ii = 0; ii < edits.length; ii++) {\n          var editKey = edits[ii][0];\n          var editValue = edits[ii][1];\n\n          if (inArray) {\n            editKey -= editOffset;\n          }\n\n          if (inArray && editValue === null) {\n            node.splice(editKey, 1);\n            editOffset++;\n          } else {\n            node[editKey] = editValue;\n          }\n        }\n      }\n\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else {\n      key = parent ? inArray ? index : keys[index] : undefined;\n      node = parent ? parent[key] : newRoot;\n\n      if (node === null || node === undefined) {\n        continue;\n      }\n\n      if (parent) {\n        path.push(key);\n      }\n    }\n\n    var result = void 0;\n\n    if (!Array.isArray(node)) {\n      if (!isNode(node)) {\n        throw new Error('Invalid AST Node: ' + inspect(node));\n      }\n\n      var visitFn = getVisitFn(visitor, node.kind, isLeaving);\n\n      if (visitFn) {\n        result = visitFn.call(visitor, node, key, parent, path, ancestors);\n\n        if (result === BREAK) {\n          break;\n        }\n\n        if (result === false) {\n          if (!isLeaving) {\n            path.pop();\n            continue;\n          }\n        } else if (result !== undefined) {\n          edits.push([key, result]);\n\n          if (!isLeaving) {\n            if (isNode(result)) {\n              node = result;\n            } else {\n              path.pop();\n              continue;\n            }\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      stack = {\n        inArray: inArray,\n        index: index,\n        keys: keys,\n        edits: edits,\n        prev: stack\n      };\n      inArray = Array.isArray(node);\n      keys = inArray ? node : visitorKeys[node.kind] || [];\n      index = -1;\n      edits = [];\n\n      if (parent) {\n        ancestors.push(parent);\n      }\n\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    newRoot = edits[edits.length - 1][1];\n  }\n\n  return newRoot;\n}\n\nfunction isNode(maybeNode) {\n  return Boolean(maybeNode && typeof maybeNode.kind === 'string');\n}\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\n\n\nexport function visitInParallel(visitors) {\n  var skipping = new Array(visitors.length);\n  return {\n    enter: function enter(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (!skipping[i]) {\n          var fn = getVisitFn(visitors[i], node.kind,\n          /* isLeaving */\n          false);\n\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      }\n    },\n    leave: function leave(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (!skipping[i]) {\n          var fn = getVisitFn(visitors[i], node.kind,\n          /* isLeaving */\n          true);\n\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          }\n        } else if (skipping[i] === node) {\n          skipping[i] = null;\n        }\n      }\n    }\n  };\n}\n/**\n * Creates a new visitor instance which maintains a provided TypeInfo instance\n * along with visiting visitor.\n */\n\nexport function visitWithTypeInfo(typeInfo, visitor) {\n  return {\n    enter: function enter(node) {\n      typeInfo.enter(node);\n      var fn = getVisitFn(visitor, node.kind,\n      /* isLeaving */\n      false);\n\n      if (fn) {\n        var result = fn.apply(visitor, arguments);\n\n        if (result !== undefined) {\n          typeInfo.leave(node);\n\n          if (isNode(result)) {\n            typeInfo.enter(result);\n          }\n        }\n\n        return result;\n      }\n    },\n    leave: function leave(node) {\n      var fn = getVisitFn(visitor, node.kind,\n      /* isLeaving */\n      true);\n      var result;\n\n      if (fn) {\n        result = fn.apply(visitor, arguments);\n      }\n\n      typeInfo.leave(node);\n      return result;\n    }\n  };\n}\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n */\n\nexport function getVisitFn(visitor, kind, isLeaving) {\n  var kindVisitor = visitor[kind];\n\n  if (kindVisitor) {\n    if (!isLeaving && typeof kindVisitor === 'function') {\n      // { Kind() {} }\n      return kindVisitor;\n    }\n\n    var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;\n\n    if (typeof kindSpecificVisitor === 'function') {\n      // { Kind: { enter() {}, leave() {} } }\n      return kindSpecificVisitor;\n    }\n  } else {\n    var specificVisitor = isLeaving ? visitor.leave : visitor.enter;\n\n    if (specificVisitor) {\n      if (typeof specificVisitor === 'function') {\n        // { enter() {}, leave() {} }\n        return specificVisitor;\n      }\n\n      var specificKindVisitor = specificVisitor[kind];\n\n      if (typeof specificKindVisitor === 'function') {\n        // { enter: { Kind() {} }, leave: { Kind() {} } }\n        return specificKindVisitor;\n      }\n    }\n  }\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { Kind } from '../language/kinds';\nimport { GraphQLList, GraphQLNonNull } from '../type/definition';\nexport function typeFromAST(schema, typeNode) {\n  /* eslint-enable no-redeclare */\n  var innerType;\n\n  if (typeNode.kind === Kind.LIST_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && GraphQLList(innerType);\n  }\n\n  if (typeNode.kind === Kind.NON_NULL_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && GraphQLNonNull(innerType);\n  }\n\n  if (typeNode.kind === Kind.NAMED_TYPE) {\n    return schema.getType(typeNode.name.value);\n  }\n  /* istanbul ignore next */\n\n\n  throw new Error(\"Unexpected type kind: \".concat(typeNode.kind, \".\"));\n}","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { Kind } from '../language/kinds';\nimport { isObjectType, isInterfaceType, isEnumType, isInputObjectType, isListType, isCompositeType, isInputType, isOutputType, getNullableType, getNamedType } from '../type/definition';\nimport { SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef } from '../type/introspection';\nimport { typeFromAST } from './typeFromAST';\nimport find from '../jsutils/find';\n/**\n * TypeInfo is a utility class which, given a GraphQL schema, can keep track\n * of the current field and type definitions at any point in a GraphQL document\n * AST during a recursive descent by calling `enter(node)` and `leave(node)`.\n */\n\nexport var TypeInfo =\n/*#__PURE__*/\nfunction () {\n  function TypeInfo(schema, // NOTE: this experimental optional second parameter is only needed in order\n  // to support non-spec-compliant codebases. You should never need to use it.\n  getFieldDefFn, // Initial type may be provided in rare cases to facilitate traversals\n  initialType) {\n    _defineProperty(this, \"_schema\", void 0);\n\n    _defineProperty(this, \"_typeStack\", void 0);\n\n    _defineProperty(this, \"_parentTypeStack\", void 0);\n\n    _defineProperty(this, \"_inputTypeStack\", void 0);\n\n    _defineProperty(this, \"_fieldDefStack\", void 0);\n\n    _defineProperty(this, \"_defaultValueStack\", void 0);\n\n    _defineProperty(this, \"_directive\", void 0);\n\n    _defineProperty(this, \"_argument\", void 0);\n\n    _defineProperty(this, \"_enumValue\", void 0);\n\n    _defineProperty(this, \"_getFieldDef\", void 0);\n\n    this._schema = schema;\n    this._typeStack = [];\n    this._parentTypeStack = [];\n    this._inputTypeStack = [];\n    this._fieldDefStack = [];\n    this._defaultValueStack = [];\n    this._directive = null;\n    this._argument = null;\n    this._enumValue = null;\n    this._getFieldDef = getFieldDefFn || getFieldDef;\n\n    if (initialType) {\n      if (isInputType(initialType)) {\n        this._inputTypeStack.push(initialType);\n      }\n\n      if (isCompositeType(initialType)) {\n        this._parentTypeStack.push(initialType);\n      }\n\n      if (isOutputType(initialType)) {\n        this._typeStack.push(initialType);\n      }\n    }\n  }\n\n  var _proto = TypeInfo.prototype;\n\n  _proto.getType = function getType() {\n    if (this._typeStack.length > 0) {\n      return this._typeStack[this._typeStack.length - 1];\n    }\n  };\n\n  _proto.getParentType = function getParentType() {\n    if (this._parentTypeStack.length > 0) {\n      return this._parentTypeStack[this._parentTypeStack.length - 1];\n    }\n  };\n\n  _proto.getInputType = function getInputType() {\n    if (this._inputTypeStack.length > 0) {\n      return this._inputTypeStack[this._inputTypeStack.length - 1];\n    }\n  };\n\n  _proto.getParentInputType = function getParentInputType() {\n    if (this._inputTypeStack.length > 1) {\n      return this._inputTypeStack[this._inputTypeStack.length - 2];\n    }\n  };\n\n  _proto.getFieldDef = function getFieldDef() {\n    if (this._fieldDefStack.length > 0) {\n      return this._fieldDefStack[this._fieldDefStack.length - 1];\n    }\n  };\n\n  _proto.getDefaultValue = function getDefaultValue() {\n    if (this._defaultValueStack.length > 0) {\n      return this._defaultValueStack[this._defaultValueStack.length - 1];\n    }\n  };\n\n  _proto.getDirective = function getDirective() {\n    return this._directive;\n  };\n\n  _proto.getArgument = function getArgument() {\n    return this._argument;\n  };\n\n  _proto.getEnumValue = function getEnumValue() {\n    return this._enumValue;\n  };\n\n  _proto.enter = function enter(node) {\n    var schema = this._schema; // Note: many of the types below are explicitly typed as \"mixed\" to drop\n    // any assumptions of a valid schema to ensure runtime types are properly\n    // checked before continuing since TypeInfo is used as part of validation\n    // which occurs before guarantees of schema and document validity.\n\n    switch (node.kind) {\n      case Kind.SELECTION_SET:\n        var namedType = getNamedType(this.getType());\n\n        this._parentTypeStack.push(isCompositeType(namedType) ? namedType : undefined);\n\n        break;\n\n      case Kind.FIELD:\n        var parentType = this.getParentType();\n        var fieldDef;\n        var fieldType;\n\n        if (parentType) {\n          fieldDef = this._getFieldDef(schema, parentType, node);\n\n          if (fieldDef) {\n            fieldType = fieldDef.type;\n          }\n        }\n\n        this._fieldDefStack.push(fieldDef);\n\n        this._typeStack.push(isOutputType(fieldType) ? fieldType : undefined);\n\n        break;\n\n      case Kind.DIRECTIVE:\n        this._directive = schema.getDirective(node.name.value);\n        break;\n\n      case Kind.OPERATION_DEFINITION:\n        var type;\n\n        if (node.operation === 'query') {\n          type = schema.getQueryType();\n        } else if (node.operation === 'mutation') {\n          type = schema.getMutationType();\n        } else if (node.operation === 'subscription') {\n          type = schema.getSubscriptionType();\n        }\n\n        this._typeStack.push(isObjectType(type) ? type : undefined);\n\n        break;\n\n      case Kind.INLINE_FRAGMENT:\n      case Kind.FRAGMENT_DEFINITION:\n        var typeConditionAST = node.typeCondition;\n        var outputType = typeConditionAST ? typeFromAST(schema, typeConditionAST) : getNamedType(this.getType());\n\n        this._typeStack.push(isOutputType(outputType) ? outputType : undefined);\n\n        break;\n\n      case Kind.VARIABLE_DEFINITION:\n        var inputType = typeFromAST(schema, node.type);\n\n        this._inputTypeStack.push(isInputType(inputType) ? inputType : undefined);\n\n        break;\n\n      case Kind.ARGUMENT:\n        var argDef;\n        var argType;\n        var fieldOrDirective = this.getDirective() || this.getFieldDef();\n\n        if (fieldOrDirective) {\n          argDef = find(fieldOrDirective.args, function (arg) {\n            return arg.name === node.name.value;\n          });\n\n          if (argDef) {\n            argType = argDef.type;\n          }\n        }\n\n        this._argument = argDef;\n\n        this._defaultValueStack.push(argDef ? argDef.defaultValue : undefined);\n\n        this._inputTypeStack.push(isInputType(argType) ? argType : undefined);\n\n        break;\n\n      case Kind.LIST:\n        var listType = getNullableType(this.getInputType());\n        var itemType = isListType(listType) ? listType.ofType : listType; // List positions never have a default value.\n\n        this._defaultValueStack.push(undefined);\n\n        this._inputTypeStack.push(isInputType(itemType) ? itemType : undefined);\n\n        break;\n\n      case Kind.OBJECT_FIELD:\n        var objectType = getNamedType(this.getInputType());\n        var inputFieldType;\n        var inputField;\n\n        if (isInputObjectType(objectType)) {\n          inputField = objectType.getFields()[node.name.value];\n\n          if (inputField) {\n            inputFieldType = inputField.type;\n          }\n        }\n\n        this._defaultValueStack.push(inputField ? inputField.defaultValue : undefined);\n\n        this._inputTypeStack.push(isInputType(inputFieldType) ? inputFieldType : undefined);\n\n        break;\n\n      case Kind.ENUM:\n        var enumType = getNamedType(this.getInputType());\n        var enumValue;\n\n        if (isEnumType(enumType)) {\n          enumValue = enumType.getValue(node.value);\n        }\n\n        this._enumValue = enumValue;\n        break;\n    }\n  };\n\n  _proto.leave = function leave(node) {\n    switch (node.kind) {\n      case Kind.SELECTION_SET:\n        this._parentTypeStack.pop();\n\n        break;\n\n      case Kind.FIELD:\n        this._fieldDefStack.pop();\n\n        this._typeStack.pop();\n\n        break;\n\n      case Kind.DIRECTIVE:\n        this._directive = null;\n        break;\n\n      case Kind.OPERATION_DEFINITION:\n      case Kind.INLINE_FRAGMENT:\n      case Kind.FRAGMENT_DEFINITION:\n        this._typeStack.pop();\n\n        break;\n\n      case Kind.VARIABLE_DEFINITION:\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.ARGUMENT:\n        this._argument = null;\n\n        this._defaultValueStack.pop();\n\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.LIST:\n      case Kind.OBJECT_FIELD:\n        this._defaultValueStack.pop();\n\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.ENUM:\n        this._enumValue = null;\n        break;\n    }\n  };\n\n  return TypeInfo;\n}();\n/**\n * Not exactly the same as the executor's definition of getFieldDef, in this\n * statically evaluated environment we do not always have an Object type,\n * and need to handle Interface and Union types.\n */\n\nfunction getFieldDef(schema, parentType, fieldNode) {\n  var name = fieldNode.name.value;\n\n  if (name === SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return SchemaMetaFieldDef;\n  }\n\n  if (name === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return TypeMetaFieldDef;\n  }\n\n  if (name === TypeNameMetaFieldDef.name && isCompositeType(parentType)) {\n    return TypeNameMetaFieldDef;\n  }\n\n  if (isObjectType(parentType) || isInterfaceType(parentType)) {\n    return parentType.getFields()[name];\n  }\n}","/**\n * Copyright (c) 2018-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { Kind } from './kinds';\nexport function isDefinitionNode(node) {\n  return isExecutableDefinitionNode(node) || isTypeSystemDefinitionNode(node) || isTypeSystemExtensionNode(node);\n}\nexport function isExecutableDefinitionNode(node) {\n  return node.kind === Kind.OPERATION_DEFINITION || node.kind === Kind.FRAGMENT_DEFINITION;\n}\nexport function isSelectionNode(node) {\n  return node.kind === Kind.FIELD || node.kind === Kind.FRAGMENT_SPREAD || node.kind === Kind.INLINE_FRAGMENT;\n}\nexport function isValueNode(node) {\n  return node.kind === Kind.VARIABLE || node.kind === Kind.INT || node.kind === Kind.FLOAT || node.kind === Kind.STRING || node.kind === Kind.BOOLEAN || node.kind === Kind.NULL || node.kind === Kind.ENUM || node.kind === Kind.LIST || node.kind === Kind.OBJECT;\n}\nexport function isTypeNode(node) {\n  return node.kind === Kind.NAMED_TYPE || node.kind === Kind.LIST_TYPE || node.kind === Kind.NON_NULL_TYPE;\n}\nexport function isTypeSystemDefinitionNode(node) {\n  return node.kind === Kind.SCHEMA_DEFINITION || isTypeDefinitionNode(node) || node.kind === Kind.DIRECTIVE_DEFINITION;\n}\nexport function isTypeDefinitionNode(node) {\n  return node.kind === Kind.SCALAR_TYPE_DEFINITION || node.kind === Kind.OBJECT_TYPE_DEFINITION || node.kind === Kind.INTERFACE_TYPE_DEFINITION || node.kind === Kind.UNION_TYPE_DEFINITION || node.kind === Kind.ENUM_TYPE_DEFINITION || node.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION;\n}\nexport function isTypeSystemExtensionNode(node) {\n  return node.kind === Kind.SCHEMA_EXTENSION || isTypeExtensionNode(node);\n}\nexport function isTypeExtensionNode(node) {\n  return node.kind === Kind.SCALAR_TYPE_EXTENSION || node.kind === Kind.OBJECT_TYPE_EXTENSION || node.kind === Kind.INTERFACE_TYPE_EXTENSION || node.kind === Kind.UNION_TYPE_EXTENSION || node.kind === Kind.ENUM_TYPE_EXTENSION || node.kind === Kind.INPUT_OBJECT_TYPE_EXTENSION;\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { Kind } from '../../language/kinds';\nimport { isExecutableDefinitionNode } from '../../language/predicates';\nexport function nonExecutableDefinitionMessage(defName) {\n  return \"The \".concat(defName, \" definition is not executable.\");\n}\n/**\n * Executable definitions\n *\n * A GraphQL document is only valid for execution if all definitions are either\n * operation or fragment definitions.\n */\n\nexport function ExecutableDefinitions(context) {\n  return {\n    Document: function Document(node) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = node.definitions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var definition = _step.value;\n\n          if (!isExecutableDefinitionNode(definition)) {\n            context.reportError(new GraphQLError(nonExecutableDefinitionMessage(definition.kind === Kind.SCHEMA_DEFINITION || definition.kind === Kind.SCHEMA_EXTENSION ? 'schema' : definition.name.value), [definition]));\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return false;\n    }\n  };\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateOperationNameMessage(operationName) {\n  return \"There can be only one operation named \\\"\".concat(operationName, \"\\\".\");\n}\n/**\n * Unique operation names\n *\n * A GraphQL document is only valid if all defined operations have unique names.\n */\n\nexport function UniqueOperationNames(context) {\n  var knownOperationNames = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition(node) {\n      var operationName = node.name;\n\n      if (operationName) {\n        if (knownOperationNames[operationName.value]) {\n          context.reportError(new GraphQLError(duplicateOperationNameMessage(operationName.value), [knownOperationNames[operationName.value], operationName]));\n        } else {\n          knownOperationNames[operationName.value] = operationName;\n        }\n      }\n\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition() {\n      return false;\n    }\n  };\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { Kind } from '../../language/kinds';\nexport function anonOperationNotAloneMessage() {\n  return 'This anonymous operation must be the only defined operation.';\n}\n/**\n * Lone anonymous operation\n *\n * A GraphQL document is only valid if when it contains an anonymous operation\n * (the query short-hand) that it contains only that one operation definition.\n */\n\nexport function LoneAnonymousOperation(context) {\n  var operationCount = 0;\n  return {\n    Document: function Document(node) {\n      operationCount = node.definitions.filter(function (definition) {\n        return definition.kind === Kind.OPERATION_DEFINITION;\n      }).length;\n    },\n    OperationDefinition: function OperationDefinition(node) {\n      if (!node.name && operationCount > 1) {\n        context.reportError(new GraphQLError(anonOperationNotAloneMessage(), [node]));\n      }\n    }\n  };\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nexport function singleFieldOnlyMessage(name) {\n  return (name ? \"Subscription \\\"\".concat(name, \"\\\" \") : 'Anonymous Subscription ') + 'must select only one top level field.';\n}\n/**\n * Subscriptions must only include one field.\n *\n * A GraphQL subscription is valid only if it contains a single root field.\n */\n\nexport function SingleFieldSubscriptions(context) {\n  return {\n    OperationDefinition: function OperationDefinition(node) {\n      if (node.operation === 'subscription') {\n        if (node.selectionSet.selections.length !== 1) {\n          context.reportError(new GraphQLError(singleFieldOnlyMessage(node.name && node.name.value), node.selectionSet.selections.slice(1)));\n        }\n      }\n    }\n  };\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Given an invalid input string and a list of valid options, returns a filtered\n * list of valid options sorted based on their similarity with the input.\n */\nexport default function suggestionList(input, options) {\n  var optionsByDistance = Object.create(null);\n  var oLength = options.length;\n  var inputThreshold = input.length / 2;\n\n  for (var i = 0; i < oLength; i++) {\n    var distance = lexicalDistance(input, options[i]);\n    var threshold = Math.max(inputThreshold, options[i].length / 2, 1);\n\n    if (distance <= threshold) {\n      optionsByDistance[options[i]] = distance;\n    }\n  }\n\n  return Object.keys(optionsByDistance).sort(function (a, b) {\n    return optionsByDistance[a] - optionsByDistance[b];\n  });\n}\n/**\n * Computes the lexical distance between strings A and B.\n *\n * The \"distance\" between two strings is given by counting the minimum number\n * of edits needed to transform string A into string B. An edit can be an\n * insertion, deletion, or substitution of a single character, or a swap of two\n * adjacent characters.\n *\n * Includes a custom alteration from Damerau-Levenshtein to treat case changes\n * as a single edit which helps identify mis-cased values with an edit distance\n * of 1.\n *\n * This distance can be useful for detecting typos in input or sorting\n *\n * @param {string} a\n * @param {string} b\n * @return {int} distance in number of edits\n */\n\nfunction lexicalDistance(aStr, bStr) {\n  if (aStr === bStr) {\n    return 0;\n  }\n\n  var i;\n  var j;\n  var d = [];\n  var a = aStr.toLowerCase();\n  var b = bStr.toLowerCase();\n  var aLength = a.length;\n  var bLength = b.length; // Any case change counts as a single edit\n\n  if (a === b) {\n    return 1;\n  }\n\n  for (i = 0; i <= aLength; i++) {\n    d[i] = [i];\n  }\n\n  for (j = 1; j <= bLength; j++) {\n    d[0][j] = j;\n  }\n\n  for (i = 1; i <= aLength; i++) {\n    for (j = 1; j <= bLength; j++) {\n      var cost = a[i - 1] === b[j - 1] ? 0 : 1;\n      d[i][j] = Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost);\n\n      if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {\n        d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + cost);\n      }\n    }\n  }\n\n  return d[aLength][bLength];\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nvar MAX_LENGTH = 5;\n/**\n * Given [ A, B, C ] return 'A, B, or C'.\n */\n\nexport default function orList(items) {\n  var selected = items.slice(0, MAX_LENGTH);\n  return selected.reduce(function (list, quoted, index) {\n    return list + (selected.length > 2 ? ', ' : ' ') + (index === selected.length - 1 ? 'or ' : '') + quoted;\n  });\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport orList from './orList';\n/**\n * Given [ A, B, C ] return '\"A\", \"B\", or \"C\"'.\n */\n\nexport default function quotedOrList(items) {\n  return orList(items.map(function (item) {\n    return \"\\\"\".concat(item, \"\\\"\");\n  }));\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nimport suggestionList from '../../jsutils/suggestionList';\nimport quotedOrList from '../../jsutils/quotedOrList';\nexport function unknownTypeMessage(typeName, suggestedTypes) {\n  var message = \"Unknown type \\\"\".concat(typeName, \"\\\".\");\n\n  if (suggestedTypes.length) {\n    message += \" Did you mean \".concat(quotedOrList(suggestedTypes), \"?\");\n  }\n\n  return message;\n}\n/**\n * Known type names\n *\n * A GraphQL document is only valid if referenced types (specifically\n * variable definitions and fragment conditions) are defined by the type schema.\n */\n\nexport function KnownTypeNames(context) {\n  return {\n    // TODO: when validating IDL, re-enable these. Experimental version does not\n    // add unreferenced types, resulting in false-positive errors. Squelched\n    // errors for now.\n    ObjectTypeDefinition: function ObjectTypeDefinition() {\n      return false;\n    },\n    InterfaceTypeDefinition: function InterfaceTypeDefinition() {\n      return false;\n    },\n    UnionTypeDefinition: function UnionTypeDefinition() {\n      return false;\n    },\n    InputObjectTypeDefinition: function InputObjectTypeDefinition() {\n      return false;\n    },\n    NamedType: function NamedType(node) {\n      var schema = context.getSchema();\n      var typeName = node.name.value;\n      var type = schema.getType(typeName);\n\n      if (!type) {\n        context.reportError(new GraphQLError(unknownTypeMessage(typeName, suggestionList(typeName, Object.keys(schema.getTypeMap()))), [node]));\n      }\n    }\n  };\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { print } from '../../language/printer';\nimport { isCompositeType } from '../../type/definition';\nimport { typeFromAST } from '../../utilities/typeFromAST';\nexport function inlineFragmentOnNonCompositeErrorMessage(type) {\n  return \"Fragment cannot condition on non composite type \\\"\".concat(type, \"\\\".\");\n}\nexport function fragmentOnNonCompositeErrorMessage(fragName, type) {\n  return \"Fragment \\\"\".concat(fragName, \"\\\" cannot condition on non composite \") + \"type \\\"\".concat(type, \"\\\".\");\n}\n/**\n * Fragments on composite type\n *\n * Fragments use a type condition to determine if they apply, since fragments\n * can only be spread into a composite type (object, interface, or union), the\n * type condition must also be a composite type.\n */\n\nexport function FragmentsOnCompositeTypes(context) {\n  return {\n    InlineFragment: function InlineFragment(node) {\n      var typeCondition = node.typeCondition;\n\n      if (typeCondition) {\n        var type = typeFromAST(context.getSchema(), typeCondition);\n\n        if (type && !isCompositeType(type)) {\n          context.reportError(new GraphQLError(inlineFragmentOnNonCompositeErrorMessage(print(typeCondition)), [typeCondition]));\n        }\n      }\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      var type = typeFromAST(context.getSchema(), node.typeCondition);\n\n      if (type && !isCompositeType(type)) {\n        context.reportError(new GraphQLError(fragmentOnNonCompositeErrorMessage(node.name.value, print(node.typeCondition)), [node.typeCondition]));\n      }\n    }\n  };\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { print } from '../../language/printer';\nimport { isInputType } from '../../type/definition';\nimport { typeFromAST } from '../../utilities/typeFromAST';\nexport function nonInputTypeOnVarMessage(variableName, typeName) {\n  return \"Variable \\\"$\".concat(variableName, \"\\\" cannot be non-input type \\\"\").concat(typeName, \"\\\".\");\n}\n/**\n * Variables are input types\n *\n * A GraphQL operation is only valid if all the variables it defines are of\n * input types (scalar, enum, or input object).\n */\n\nexport function VariablesAreInputTypes(context) {\n  return {\n    VariableDefinition: function VariableDefinition(node) {\n      var type = typeFromAST(context.getSchema(), node.type); // If the variable type is not an input type, return an error.\n\n      if (type && !isInputType(type)) {\n        var variableName = node.variable.name.value;\n        context.reportError(new GraphQLError(nonInputTypeOnVarMessage(variableName, print(node.type)), [node.type]));\n      }\n    }\n  };\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport inspect from '../../jsutils/inspect';\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { getNamedType, isLeafType } from '../../type/definition';\nexport function noSubselectionAllowedMessage(fieldName, type) {\n  return \"Field \\\"\".concat(fieldName, \"\\\" must not have a selection since \") + \"type \\\"\".concat(type, \"\\\" has no subfields.\");\n}\nexport function requiredSubselectionMessage(fieldName, type) {\n  return \"Field \\\"\".concat(fieldName, \"\\\" of type \\\"\").concat(type, \"\\\" must have a \") + \"selection of subfields. Did you mean \\\"\".concat(fieldName, \" { ... }\\\"?\");\n}\n/**\n * Scalar leafs\n *\n * A GraphQL document is valid only if all leaf fields (fields without\n * sub selections) are of scalar or enum types.\n */\n\nexport function ScalarLeafs(context) {\n  return {\n    Field: function Field(node) {\n      var type = context.getType();\n      var selectionSet = node.selectionSet;\n\n      if (type) {\n        if (isLeafType(getNamedType(type))) {\n          if (selectionSet) {\n            context.reportError(new GraphQLError(noSubselectionAllowedMessage(node.name.value, inspect(type)), [selectionSet]));\n          }\n        } else if (!selectionSet) {\n          context.reportError(new GraphQLError(requiredSubselectionMessage(node.name.value, inspect(type)), [node]));\n        }\n      }\n    }\n  };\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nimport suggestionList from '../../jsutils/suggestionList';\nimport quotedOrList from '../../jsutils/quotedOrList';\nimport { isObjectType, isInterfaceType, isAbstractType } from '../../type/definition';\nexport function undefinedFieldMessage(fieldName, type, suggestedTypeNames, suggestedFieldNames) {\n  var message = \"Cannot query field \\\"\".concat(fieldName, \"\\\" on type \\\"\").concat(type, \"\\\".\");\n\n  if (suggestedTypeNames.length !== 0) {\n    var suggestions = quotedOrList(suggestedTypeNames);\n    message += \" Did you mean to use an inline fragment on \".concat(suggestions, \"?\");\n  } else if (suggestedFieldNames.length !== 0) {\n    message += \" Did you mean \".concat(quotedOrList(suggestedFieldNames), \"?\");\n  }\n\n  return message;\n}\n/**\n * Fields on correct type\n *\n * A GraphQL document is only valid if all fields selected are defined by the\n * parent type, or are an allowed meta field such as __typename.\n */\n\nexport function FieldsOnCorrectType(context) {\n  return {\n    Field: function Field(node) {\n      var type = context.getParentType();\n\n      if (type) {\n        var fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          // This field doesn't exist, lets look for suggestions.\n          var schema = context.getSchema();\n          var fieldName = node.name.value; // First determine if there are any suggested types to condition on.\n\n          var suggestedTypeNames = getSuggestedTypeNames(schema, type, fieldName); // If there are no suggested types, then perhaps this was a typo?\n\n          var suggestedFieldNames = suggestedTypeNames.length !== 0 ? [] : getSuggestedFieldNames(schema, type, fieldName); // Report an error, including helpful suggestions.\n\n          context.reportError(new GraphQLError(undefinedFieldMessage(fieldName, type.name, suggestedTypeNames, suggestedFieldNames), [node]));\n        }\n      }\n    }\n  };\n}\n/**\n * Go through all of the implementations of type, as well as the interfaces that\n * they implement. If any of those types include the provided field, suggest\n * them, sorted by how often the type is referenced, starting with Interfaces.\n */\n\nfunction getSuggestedTypeNames(schema, type, fieldName) {\n  if (isAbstractType(type)) {\n    var suggestedObjectTypes = [];\n    var interfaceUsageCount = Object.create(null);\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = schema.getPossibleTypes(type)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var possibleType = _step.value;\n\n        if (!possibleType.getFields()[fieldName]) {\n          continue;\n        } // This object type defines this field.\n\n\n        suggestedObjectTypes.push(possibleType.name);\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = possibleType.getInterfaces()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var possibleInterface = _step2.value;\n\n            if (!possibleInterface.getFields()[fieldName]) {\n              continue;\n            } // This interface type defines this field.\n\n\n            interfaceUsageCount[possibleInterface.name] = (interfaceUsageCount[possibleInterface.name] || 0) + 1;\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      } // Suggest interface types based on how common they are.\n\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    var suggestedInterfaceTypes = Object.keys(interfaceUsageCount).sort(function (a, b) {\n      return interfaceUsageCount[b] - interfaceUsageCount[a];\n    }); // Suggest both interface and object types.\n\n    return suggestedInterfaceTypes.concat(suggestedObjectTypes);\n  } // Otherwise, must be an Object type, which does not have possible fields.\n\n\n  return [];\n}\n/**\n * For the field name provided, determine if there are any similar field names\n * that may be the result of a typo.\n */\n\n\nfunction getSuggestedFieldNames(schema, type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type)) {\n    var possibleFieldNames = Object.keys(type.getFields());\n    return suggestionList(fieldName, possibleFieldNames);\n  } // Otherwise, must be a Union type, which does not define fields.\n\n\n  return [];\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateFragmentNameMessage(fragName) {\n  return \"There can be only one fragment named \\\"\".concat(fragName, \"\\\".\");\n}\n/**\n * Unique fragment names\n *\n * A GraphQL document is only valid if all defined fragments have unique names.\n */\n\nexport function UniqueFragmentNames(context) {\n  var knownFragmentNames = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition() {\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      var fragmentName = node.name.value;\n\n      if (knownFragmentNames[fragmentName]) {\n        context.reportError(new GraphQLError(duplicateFragmentNameMessage(fragmentName), [knownFragmentNames[fragmentName], node.name]));\n      } else {\n        knownFragmentNames[fragmentName] = node.name;\n      }\n\n      return false;\n    }\n  };\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nexport function unknownFragmentMessage(fragName) {\n  return \"Unknown fragment \\\"\".concat(fragName, \"\\\".\");\n}\n/**\n * Known fragment names\n *\n * A GraphQL document is only valid if all `...Fragment` fragment spreads refer\n * to fragments defined in the same document.\n */\n\nexport function KnownFragmentNames(context) {\n  return {\n    FragmentSpread: function FragmentSpread(node) {\n      var fragmentName = node.name.value;\n      var fragment = context.getFragment(fragmentName);\n\n      if (!fragment) {\n        context.reportError(new GraphQLError(unknownFragmentMessage(fragmentName), [node.name]));\n      }\n    }\n  };\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nexport function unusedFragMessage(fragName) {\n  return \"Fragment \\\"\".concat(fragName, \"\\\" is never used.\");\n}\n/**\n * No unused fragments\n *\n * A GraphQL document is only valid if all fragment definitions are spread\n * within operations, or spread within other fragments spread within operations.\n */\n\nexport function NoUnusedFragments(context) {\n  var operationDefs = [];\n  var fragmentDefs = [];\n  return {\n    OperationDefinition: function OperationDefinition(node) {\n      operationDefs.push(node);\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      fragmentDefs.push(node);\n      return false;\n    },\n    Document: {\n      leave: function leave() {\n        var fragmentNameUsed = Object.create(null);\n\n        for (var _i = 0; _i < operationDefs.length; _i++) {\n          var operation = operationDefs[_i];\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = context.getRecursivelyReferencedFragments(operation)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var fragment = _step.value;\n              fragmentNameUsed[fragment.name.value] = true;\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        }\n\n        for (var _i2 = 0; _i2 < fragmentDefs.length; _i2++) {\n          var fragmentDef = fragmentDefs[_i2];\n          var fragName = fragmentDef.name.value;\n\n          if (fragmentNameUsed[fragName] !== true) {\n            context.reportError(new GraphQLError(unusedFragMessage(fragName), [fragmentDef]));\n          }\n        }\n      }\n    }\n  };\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport inspect from '../../jsutils/inspect';\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { doTypesOverlap } from '../../utilities/typeComparators';\nimport { typeFromAST } from '../../utilities/typeFromAST';\nimport { isCompositeType } from '../../type/definition';\nexport function typeIncompatibleSpreadMessage(fragName, parentType, fragType) {\n  return \"Fragment \\\"\".concat(fragName, \"\\\" cannot be spread here as objects of \") + \"type \\\"\".concat(parentType, \"\\\" can never be of type \\\"\").concat(fragType, \"\\\".\");\n}\nexport function typeIncompatibleAnonSpreadMessage(parentType, fragType) {\n  return 'Fragment cannot be spread here as objects of ' + \"type \\\"\".concat(parentType, \"\\\" can never be of type \\\"\").concat(fragType, \"\\\".\");\n}\n/**\n * Possible fragment spread\n *\n * A fragment spread is only valid if the type condition could ever possibly\n * be true: if there is a non-empty intersection of the possible parent types,\n * and possible types which pass the type condition.\n */\n\nexport function PossibleFragmentSpreads(context) {\n  return {\n    InlineFragment: function InlineFragment(node) {\n      var fragType = context.getType();\n      var parentType = context.getParentType();\n\n      if (isCompositeType(fragType) && isCompositeType(parentType) && !doTypesOverlap(context.getSchema(), fragType, parentType)) {\n        context.reportError(new GraphQLError(typeIncompatibleAnonSpreadMessage(inspect(parentType), inspect(fragType)), [node]));\n      }\n    },\n    FragmentSpread: function FragmentSpread(node) {\n      var fragName = node.name.value;\n      var fragType = getFragmentType(context, fragName);\n      var parentType = context.getParentType();\n\n      if (fragType && parentType && !doTypesOverlap(context.getSchema(), fragType, parentType)) {\n        context.reportError(new GraphQLError(typeIncompatibleSpreadMessage(fragName, inspect(parentType), inspect(fragType)), [node]));\n      }\n    }\n  };\n}\n\nfunction getFragmentType(context, name) {\n  var frag = context.getFragment(name);\n\n  if (frag) {\n    var type = typeFromAST(context.getSchema(), frag.typeCondition);\n\n    if (isCompositeType(type)) {\n      return type;\n    }\n  }\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nexport function cycleErrorMessage(fragName, spreadNames) {\n  var via = spreadNames.length ? ' via ' + spreadNames.join(', ') : '';\n  return \"Cannot spread fragment \\\"\".concat(fragName, \"\\\" within itself\").concat(via, \".\");\n}\nexport function NoFragmentCycles(context) {\n  // Tracks already visited fragments to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  var visitedFrags = Object.create(null); // Array of AST nodes used to produce meaningful errors\n\n  var spreadPath = []; // Position in the spread path\n\n  var spreadPathIndexByName = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition() {\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      detectCycleRecursive(node);\n      return false;\n    }\n  }; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(fragment) {\n    if (visitedFrags[fragment.name.value]) {\n      return;\n    }\n\n    var fragmentName = fragment.name.value;\n    visitedFrags[fragmentName] = true;\n    var spreadNodes = context.getFragmentSpreads(fragment.selectionSet);\n\n    if (spreadNodes.length === 0) {\n      return;\n    }\n\n    spreadPathIndexByName[fragmentName] = spreadPath.length;\n\n    for (var i = 0; i < spreadNodes.length; i++) {\n      var spreadNode = spreadNodes[i];\n      var spreadName = spreadNode.name.value;\n      var cycleIndex = spreadPathIndexByName[spreadName];\n      spreadPath.push(spreadNode);\n\n      if (cycleIndex === undefined) {\n        var spreadFragment = context.getFragment(spreadName);\n\n        if (spreadFragment) {\n          detectCycleRecursive(spreadFragment);\n        }\n      } else {\n        var cyclePath = spreadPath.slice(cycleIndex);\n        var fragmentNames = cyclePath.slice(0, -1).map(function (s) {\n          return s.name.value;\n        });\n        context.reportError(new GraphQLError(cycleErrorMessage(spreadName, fragmentNames), cyclePath));\n      }\n\n      spreadPath.pop();\n    }\n\n    spreadPathIndexByName[fragmentName] = undefined;\n  }\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateVariableMessage(variableName) {\n  return \"There can be only one variable named \\\"\".concat(variableName, \"\\\".\");\n}\n/**\n * Unique variable names\n *\n * A GraphQL operation is only valid if all its variables are uniquely named.\n */\n\nexport function UniqueVariableNames(context) {\n  var knownVariableNames = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition() {\n      knownVariableNames = Object.create(null);\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      var variableName = node.variable.name.value;\n\n      if (knownVariableNames[variableName]) {\n        context.reportError(new GraphQLError(duplicateVariableMessage(variableName), [knownVariableNames[variableName], node.variable.name]));\n      } else {\n        knownVariableNames[variableName] = node.variable.name;\n      }\n    }\n  };\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nexport function undefinedVarMessage(varName, opName) {\n  return opName ? \"Variable \\\"$\".concat(varName, \"\\\" is not defined by operation \\\"\").concat(opName, \"\\\".\") : \"Variable \\\"$\".concat(varName, \"\\\" is not defined.\");\n}\n/**\n * No undefined variables\n *\n * A GraphQL operation is only valid if all variables encountered, both directly\n * and via fragment spreads, are defined by that operation.\n */\n\nexport function NoUndefinedVariables(context) {\n  var variableNameDefined = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        variableNameDefined = Object.create(null);\n      },\n      leave: function leave(operation) {\n        var usages = context.getRecursiveVariableUsages(operation);\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = usages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var _ref2 = _step.value;\n            var node = _ref2.node;\n            var varName = node.name.value;\n\n            if (variableNameDefined[varName] !== true) {\n              context.reportError(new GraphQLError(undefinedVarMessage(varName, operation.name && operation.name.value), [node, operation]));\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      variableNameDefined[node.variable.name.value] = true;\n    }\n  };\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nexport function unusedVariableMessage(varName, opName) {\n  return opName ? \"Variable \\\"$\".concat(varName, \"\\\" is never used in operation \\\"\").concat(opName, \"\\\".\") : \"Variable \\\"$\".concat(varName, \"\\\" is never used.\");\n}\n/**\n * No unused variables\n *\n * A GraphQL operation is only valid if all variables defined by an operation\n * are used, either directly or within a spread fragment.\n */\n\nexport function NoUnusedVariables(context) {\n  var variableDefs = [];\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        variableDefs = [];\n      },\n      leave: function leave(operation) {\n        var variableNameUsed = Object.create(null);\n        var usages = context.getRecursiveVariableUsages(operation);\n        var opName = operation.name ? operation.name.value : null;\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = usages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var _ref2 = _step.value;\n            var node = _ref2.node;\n            variableNameUsed[node.name.value] = true;\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        for (var _i = 0; _i < variableDefs.length; _i++) {\n          var variableDef = variableDefs[_i];\n          var variableName = variableDef.variable.name.value;\n\n          if (variableNameUsed[variableName] !== true) {\n            context.reportError(new GraphQLError(unusedVariableMessage(variableName, opName), [variableDef]));\n          }\n        }\n      }\n    },\n    VariableDefinition: function VariableDefinition(def) {\n      variableDefs.push(def);\n    }\n  };\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { Kind } from '../../language/kinds';\nimport { DirectiveLocation } from '../../language/directiveLocation';\nimport { specifiedDirectives } from '../../type/directives';\nexport function unknownDirectiveMessage(directiveName) {\n  return \"Unknown directive \\\"\".concat(directiveName, \"\\\".\");\n}\nexport function misplacedDirectiveMessage(directiveName, location) {\n  return \"Directive \\\"\".concat(directiveName, \"\\\" may not be used on \").concat(location, \".\");\n}\n/**\n * Known directives\n *\n * A GraphQL document is only valid if all `@directives` are known by the\n * schema and legally positioned.\n */\n\nexport function KnownDirectives(context) {\n  var locationsMap = Object.create(null);\n  var schema = context.getSchema();\n  var definedDirectives = schema ? schema.getDirectives() : specifiedDirectives;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = definedDirectives[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var directive = _step.value;\n      locationsMap[directive.name] = directive.locations;\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  var astDefinitions = context.getDocument().definitions;\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = astDefinitions[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var def = _step2.value;\n\n      if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n        locationsMap[def.name.value] = def.locations.map(function (name) {\n          return name.value;\n        });\n      }\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  return {\n    Directive: function Directive(node, key, parent, path, ancestors) {\n      var name = node.name.value;\n      var locations = locationsMap[name];\n\n      if (!locations) {\n        context.reportError(new GraphQLError(unknownDirectiveMessage(name), [node]));\n        return;\n      }\n\n      var candidateLocation = getDirectiveLocationForASTPath(ancestors);\n\n      if (candidateLocation && locations.indexOf(candidateLocation) === -1) {\n        context.reportError(new GraphQLError(misplacedDirectiveMessage(name, candidateLocation), [node]));\n      }\n    }\n  };\n}\n\nfunction getDirectiveLocationForASTPath(ancestors) {\n  var appliedTo = ancestors[ancestors.length - 1];\n\n  if (!Array.isArray(appliedTo)) {\n    switch (appliedTo.kind) {\n      case Kind.OPERATION_DEFINITION:\n        switch (appliedTo.operation) {\n          case 'query':\n            return DirectiveLocation.QUERY;\n\n          case 'mutation':\n            return DirectiveLocation.MUTATION;\n\n          case 'subscription':\n            return DirectiveLocation.SUBSCRIPTION;\n        }\n\n        break;\n\n      case Kind.FIELD:\n        return DirectiveLocation.FIELD;\n\n      case Kind.FRAGMENT_SPREAD:\n        return DirectiveLocation.FRAGMENT_SPREAD;\n\n      case Kind.INLINE_FRAGMENT:\n        return DirectiveLocation.INLINE_FRAGMENT;\n\n      case Kind.FRAGMENT_DEFINITION:\n        return DirectiveLocation.FRAGMENT_DEFINITION;\n\n      case Kind.VARIABLE_DEFINITION:\n        return DirectiveLocation.VARIABLE_DEFINITION;\n\n      case Kind.SCHEMA_DEFINITION:\n      case Kind.SCHEMA_EXTENSION:\n        return DirectiveLocation.SCHEMA;\n\n      case Kind.SCALAR_TYPE_DEFINITION:\n      case Kind.SCALAR_TYPE_EXTENSION:\n        return DirectiveLocation.SCALAR;\n\n      case Kind.OBJECT_TYPE_DEFINITION:\n      case Kind.OBJECT_TYPE_EXTENSION:\n        return DirectiveLocation.OBJECT;\n\n      case Kind.FIELD_DEFINITION:\n        return DirectiveLocation.FIELD_DEFINITION;\n\n      case Kind.INTERFACE_TYPE_DEFINITION:\n      case Kind.INTERFACE_TYPE_EXTENSION:\n        return DirectiveLocation.INTERFACE;\n\n      case Kind.UNION_TYPE_DEFINITION:\n      case Kind.UNION_TYPE_EXTENSION:\n        return DirectiveLocation.UNION;\n\n      case Kind.ENUM_TYPE_DEFINITION:\n      case Kind.ENUM_TYPE_EXTENSION:\n        return DirectiveLocation.ENUM;\n\n      case Kind.ENUM_VALUE_DEFINITION:\n        return DirectiveLocation.ENUM_VALUE;\n\n      case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n      case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n        return DirectiveLocation.INPUT_OBJECT;\n\n      case Kind.INPUT_VALUE_DEFINITION:\n        var parentNode = ancestors[ancestors.length - 3];\n        return parentNode.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION ? DirectiveLocation.INPUT_FIELD_DEFINITION : DirectiveLocation.ARGUMENT_DEFINITION;\n    }\n  }\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateDirectiveMessage(directiveName) {\n  return \"The directive \\\"\".concat(directiveName, \"\\\" can only be used once at \") + 'this location.';\n}\n/**\n * Unique directive names per location\n *\n * A GraphQL document is only valid if all directives at a given location\n * are uniquely named.\n */\n\nexport function UniqueDirectivesPerLocation(context) {\n  return {\n    // Many different AST nodes may contain directives. Rather than listing\n    // them all, just listen for entering any node, and check to see if it\n    // defines any directives.\n    enter: function enter(node) {\n      // Flow can't refine that node.directives will only contain directives,\n      var directives = node.directives;\n\n      if (directives) {\n        var knownDirectives = Object.create(null);\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = directives[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var directive = _step.value;\n            var directiveName = directive.name.value;\n\n            if (knownDirectives[directiveName]) {\n              context.reportError(new GraphQLError(duplicateDirectiveMessage(directiveName), [knownDirectives[directiveName], directive]));\n            } else {\n              knownDirectives[directiveName] = directive;\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n    }\n  };\n}","function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nimport suggestionList from '../../jsutils/suggestionList';\nimport quotedOrList from '../../jsutils/quotedOrList';\nimport { Kind } from '../../language/kinds';\nimport { specifiedDirectives } from '../../type/directives';\nexport function unknownArgMessage(argName, fieldName, typeName, suggestedArgs) {\n  var message = \"Unknown argument \\\"\".concat(argName, \"\\\" on field \\\"\").concat(fieldName, \"\\\" of \") + \"type \\\"\".concat(typeName, \"\\\".\");\n\n  if (suggestedArgs.length) {\n    message += \" Did you mean \".concat(quotedOrList(suggestedArgs), \"?\");\n  }\n\n  return message;\n}\nexport function unknownDirectiveArgMessage(argName, directiveName, suggestedArgs) {\n  var message = \"Unknown argument \\\"\".concat(argName, \"\\\" on directive \\\"@\").concat(directiveName, \"\\\".\");\n\n  if (suggestedArgs.length) {\n    message += \" Did you mean \".concat(quotedOrList(suggestedArgs), \"?\");\n  }\n\n  return message;\n}\n/**\n * Known argument names\n *\n * A GraphQL field is only valid if all supplied arguments are defined by\n * that field.\n */\n\nexport function KnownArgumentNames(context) {\n  return _objectSpread({}, KnownArgumentNamesOnDirectives(context), {\n    Argument: function Argument(argNode) {\n      var argDef = context.getArgument();\n      var fieldDef = context.getFieldDef();\n      var parentType = context.getParentType();\n\n      if (!argDef && fieldDef && parentType) {\n        var argName = argNode.name.value;\n        var knownArgsNames = fieldDef.args.map(function (arg) {\n          return arg.name;\n        });\n        context.reportError(new GraphQLError(unknownArgMessage(argName, fieldDef.name, parentType.name, suggestionList(argName, knownArgsNames)), argNode));\n      }\n    }\n  });\n} // @internal\n\nexport function KnownArgumentNamesOnDirectives(context) {\n  var directiveArgs = Object.create(null);\n  var schema = context.getSchema();\n  var definedDirectives = schema ? schema.getDirectives() : specifiedDirectives;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = definedDirectives[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var directive = _step.value;\n      directiveArgs[directive.name] = directive.args.map(function (arg) {\n        return arg.name;\n      });\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  var astDefinitions = context.getDocument().definitions;\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = astDefinitions[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var def = _step2.value;\n\n      if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n        directiveArgs[def.name.value] = def.arguments ? def.arguments.map(function (arg) {\n          return arg.name.value;\n        }) : [];\n      }\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  return {\n    Directive: function Directive(directiveNode) {\n      var directiveName = directiveNode.name.value;\n      var knownArgs = directiveArgs[directiveName];\n\n      if (directiveNode.arguments && knownArgs) {\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = directiveNode.arguments[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var argNode = _step3.value;\n            var argName = argNode.name.value;\n\n            if (knownArgs.indexOf(argName) === -1) {\n              var suggestions = suggestionList(argName, knownArgs);\n              context.reportError(new GraphQLError(unknownDirectiveArgMessage(argName, directiveName, suggestions), argNode));\n            }\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n              _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n      }\n\n      return false;\n    }\n  };\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateArgMessage(argName) {\n  return \"There can be only one argument named \\\"\".concat(argName, \"\\\".\");\n}\n/**\n * Unique argument names\n *\n * A GraphQL field or directive is only valid if all supplied arguments are\n * uniquely named.\n */\n\nexport function UniqueArgumentNames(context) {\n  var knownArgNames = Object.create(null);\n  return {\n    Field: function Field() {\n      knownArgNames = Object.create(null);\n    },\n    Directive: function Directive() {\n      knownArgNames = Object.create(null);\n    },\n    Argument: function Argument(node) {\n      var argName = node.name.value;\n\n      if (knownArgNames[argName]) {\n        context.reportError(new GraphQLError(duplicateArgMessage(argName), [knownArgNames[argName], node.name]));\n      } else {\n        knownArgNames[argName] = node.name;\n      }\n\n      return false;\n    }\n  };\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { print } from '../../language/printer';\nimport { isScalarType, isEnumType, isInputObjectType, isListType, isNonNullType, isRequiredInputField, getNullableType, getNamedType } from '../../type/definition';\nimport inspect from '../../jsutils/inspect';\nimport isInvalid from '../../jsutils/isInvalid';\nimport keyMap from '../../jsutils/keyMap';\nimport orList from '../../jsutils/orList';\nimport suggestionList from '../../jsutils/suggestionList';\nexport function badValueMessage(typeName, valueName, message) {\n  return \"Expected type \".concat(typeName, \", found \").concat(valueName) + (message ? \"; \".concat(message) : '.');\n}\nexport function requiredFieldMessage(typeName, fieldName, fieldTypeName) {\n  return \"Field \".concat(typeName, \".\").concat(fieldName, \" of required type \") + \"\".concat(fieldTypeName, \" was not provided.\");\n}\nexport function unknownFieldMessage(typeName, fieldName, message) {\n  return \"Field \\\"\".concat(fieldName, \"\\\" is not defined by type \").concat(typeName) + (message ? \"; \".concat(message) : '.');\n}\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n */\n\nexport function ValuesOfCorrectType(context) {\n  return {\n    NullValue: function NullValue(node) {\n      var type = context.getInputType();\n\n      if (isNonNullType(type)) {\n        context.reportError(new GraphQLError(badValueMessage(inspect(type), print(node)), node));\n      }\n    },\n    ListValue: function ListValue(node) {\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      var type = getNullableType(context.getParentInputType());\n\n      if (!isListType(type)) {\n        isValidScalar(context, node);\n        return false; // Don't traverse further.\n      }\n    },\n    ObjectValue: function ObjectValue(node) {\n      var type = getNamedType(context.getInputType());\n\n      if (!isInputObjectType(type)) {\n        isValidScalar(context, node);\n        return false; // Don't traverse further.\n      } // Ensure every required field exists.\n\n\n      var inputFields = type.getFields();\n      var fieldNodeMap = keyMap(node.fields, function (field) {\n        return field.name.value;\n      });\n\n      var _arr = Object.keys(inputFields);\n\n      for (var _i = 0; _i < _arr.length; _i++) {\n        var fieldName = _arr[_i];\n        var fieldDef = inputFields[fieldName];\n        var fieldNode = fieldNodeMap[fieldName];\n\n        if (!fieldNode && isRequiredInputField(fieldDef)) {\n          var typeStr = inspect(fieldDef.type);\n          context.reportError(new GraphQLError(requiredFieldMessage(type.name, fieldName, typeStr), node));\n        }\n      }\n    },\n    ObjectField: function ObjectField(node) {\n      var parentType = getNamedType(context.getParentInputType());\n      var fieldType = context.getInputType();\n\n      if (!fieldType && isInputObjectType(parentType)) {\n        var suggestions = suggestionList(node.name.value, Object.keys(parentType.getFields()));\n        var didYouMean = suggestions.length !== 0 ? \"Did you mean \".concat(orList(suggestions), \"?\") : undefined;\n        context.reportError(new GraphQLError(unknownFieldMessage(parentType.name, node.name.value, didYouMean), node));\n      }\n    },\n    EnumValue: function EnumValue(node) {\n      var type = getNamedType(context.getInputType());\n\n      if (!isEnumType(type)) {\n        isValidScalar(context, node);\n      } else if (!type.getValue(node.value)) {\n        context.reportError(new GraphQLError(badValueMessage(type.name, print(node), enumTypeSuggestion(type, node)), node));\n      }\n    },\n    IntValue: function IntValue(node) {\n      return isValidScalar(context, node);\n    },\n    FloatValue: function FloatValue(node) {\n      return isValidScalar(context, node);\n    },\n    StringValue: function StringValue(node) {\n      return isValidScalar(context, node);\n    },\n    BooleanValue: function BooleanValue(node) {\n      return isValidScalar(context, node);\n    }\n  };\n}\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\n\nfunction isValidScalar(context, node) {\n  // Report any error at the full type expected by the location.\n  var locationType = context.getInputType();\n\n  if (!locationType) {\n    return;\n  }\n\n  var type = getNamedType(locationType);\n\n  if (!isScalarType(type)) {\n    context.reportError(new GraphQLError(badValueMessage(inspect(locationType), print(node), enumTypeSuggestion(type, node)), node));\n    return;\n  } // Scalars determine if a literal value is valid via parseLiteral() which\n  // may throw or return an invalid value to indicate failure.\n\n\n  try {\n    var parseResult = type.parseLiteral(node, undefined\n    /* variables */\n    );\n\n    if (isInvalid(parseResult)) {\n      context.reportError(new GraphQLError(badValueMessage(inspect(locationType), print(node)), node));\n    }\n  } catch (error) {\n    // Ensure a reference to the original error is maintained.\n    context.reportError(new GraphQLError(badValueMessage(inspect(locationType), print(node), error.message), node, undefined, undefined, undefined, error));\n  }\n}\n\nfunction enumTypeSuggestion(type, node) {\n  if (isEnumType(type)) {\n    var suggestions = suggestionList(print(node), type.getValues().map(function (value) {\n      return value.name;\n    }));\n\n    if (suggestions.length !== 0) {\n      return \"Did you mean the enum value \".concat(orList(suggestions), \"?\");\n    }\n  }\n}","function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { Kind } from '../../language/kinds';\nimport inspect from '../../jsutils/inspect';\nimport keyMap from '../../jsutils/keyMap';\nimport { isType, isRequiredArgument } from '../../type/definition';\nimport { print } from '../../language/printer';\nimport { specifiedDirectives } from '../../type/directives';\nexport function missingFieldArgMessage(fieldName, argName, type) {\n  return \"Field \\\"\".concat(fieldName, \"\\\" argument \\\"\").concat(argName, \"\\\" of type \") + \"\\\"\".concat(type, \"\\\" is required but not provided.\");\n}\nexport function missingDirectiveArgMessage(directiveName, argName, type) {\n  return \"Directive \\\"@\".concat(directiveName, \"\\\" argument \\\"\").concat(argName, \"\\\" of type \") + \"\\\"\".concat(type, \"\\\" is required but not provided.\");\n}\n/**\n * Provided required arguments\n *\n * A field or directive is only valid if all required (non-null without a\n * default value) field arguments have been provided.\n */\n\nexport function ProvidedRequiredArguments(context) {\n  return _objectSpread({}, ProvidedRequiredArgumentsOnDirectives(context), {\n    Field: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave: function leave(fieldNode) {\n        var fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          return false;\n        }\n\n        var argNodes = fieldNode.arguments || [];\n        var argNodeMap = keyMap(argNodes, function (arg) {\n          return arg.name.value;\n        });\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = fieldDef.args[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var argDef = _step.value;\n            var argNode = argNodeMap[argDef.name];\n\n            if (!argNode && isRequiredArgument(argDef)) {\n              context.reportError(new GraphQLError(missingFieldArgMessage(fieldDef.name, argDef.name, inspect(argDef.type)), [fieldNode]));\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n    }\n  });\n} // @internal\n\nexport function ProvidedRequiredArgumentsOnDirectives(context) {\n  var requiredArgsMap = Object.create(null);\n  var schema = context.getSchema();\n  var definedDirectives = schema ? schema.getDirectives() : specifiedDirectives;\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = definedDirectives[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var directive = _step2.value;\n      requiredArgsMap[directive.name] = keyMap(directive.args.filter(isRequiredArgument), function (arg) {\n        return arg.name;\n      });\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  var astDefinitions = context.getDocument().definitions;\n  var _iteratorNormalCompletion3 = true;\n  var _didIteratorError3 = false;\n  var _iteratorError3 = undefined;\n\n  try {\n    for (var _iterator3 = astDefinitions[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n      var def = _step3.value;\n\n      if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n        requiredArgsMap[def.name.value] = keyMap(def.arguments ? def.arguments.filter(isRequiredArgumentNode) : [], function (arg) {\n          return arg.name.value;\n        });\n      }\n    }\n  } catch (err) {\n    _didIteratorError3 = true;\n    _iteratorError3 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n        _iterator3.return();\n      }\n    } finally {\n      if (_didIteratorError3) {\n        throw _iteratorError3;\n      }\n    }\n  }\n\n  return {\n    Directive: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave: function leave(directiveNode) {\n        var directiveName = directiveNode.name.value;\n        var requiredArgs = requiredArgsMap[directiveName];\n\n        if (requiredArgs) {\n          var argNodes = directiveNode.arguments || [];\n          var argNodeMap = keyMap(argNodes, function (arg) {\n            return arg.name.value;\n          });\n\n          var _arr = Object.keys(requiredArgs);\n\n          for (var _i = 0; _i < _arr.length; _i++) {\n            var argName = _arr[_i];\n\n            if (!argNodeMap[argName]) {\n              var argType = requiredArgs[argName].type;\n              context.reportError(new GraphQLError(missingDirectiveArgMessage(directiveName, argName, isType(argType) ? inspect(argType) : print(argType)), directiveNode));\n            }\n          }\n        }\n      }\n    }\n  };\n}\n\nfunction isRequiredArgumentNode(arg) {\n  return arg.type.kind === Kind.NON_NULL_TYPE && arg.defaultValue == null;\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport inspect from '../../jsutils/inspect';\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { Kind } from '../../language/kinds';\nimport { isNonNullType } from '../../type/definition';\nimport { isTypeSubTypeOf } from '../../utilities/typeComparators';\nimport { typeFromAST } from '../../utilities/typeFromAST';\nexport function badVarPosMessage(varName, varType, expectedType) {\n  return \"Variable \\\"$\".concat(varName, \"\\\" of type \\\"\").concat(varType, \"\\\" used in \") + \"position expecting type \\\"\".concat(expectedType, \"\\\".\");\n}\n/**\n * Variables passed to field arguments conform to type\n */\n\nexport function VariablesInAllowedPosition(context) {\n  var varDefMap = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        varDefMap = Object.create(null);\n      },\n      leave: function leave(operation) {\n        var usages = context.getRecursiveVariableUsages(operation);\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = usages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var _ref2 = _step.value;\n            var node = _ref2.node,\n                type = _ref2.type,\n                defaultValue = _ref2.defaultValue;\n            var varName = node.name.value;\n            var varDef = varDefMap[varName];\n\n            if (varDef && type) {\n              // A var type is allowed if it is the same or more strict (e.g. is\n              // a subtype of) than the expected type. It can be more strict if\n              // the variable type is non-null when the expected type is nullable.\n              // If both are list types, the variable item type can be more strict\n              // than the expected item type (contravariant).\n              var schema = context.getSchema();\n              var varType = typeFromAST(schema, varDef.type);\n\n              if (varType && !allowedVariableUsage(schema, varType, varDef.defaultValue, type, defaultValue)) {\n                context.reportError(new GraphQLError(badVarPosMessage(varName, inspect(varType), inspect(type)), [varDef, node]));\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      varDefMap[node.variable.name.value] = node;\n    }\n  };\n}\n/**\n * Returns true if the variable is allowed in the location it was found,\n * which includes considering if default values exist for either the variable\n * or the location at which it is located.\n */\n\nfunction allowedVariableUsage(schema, varType, varDefaultValue, locationType, locationDefaultValue) {\n  if (isNonNullType(locationType) && !isNonNullType(varType)) {\n    var hasNonNullVariableDefaultValue = varDefaultValue && varDefaultValue.kind !== Kind.NULL;\n    var hasLocationDefaultValue = locationDefaultValue !== undefined;\n\n    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {\n      return false;\n    }\n\n    var nullableLocationType = locationType.ofType;\n    return isTypeSubTypeOf(schema, varType, nullableLocationType);\n  }\n\n  return isTypeSubTypeOf(schema, varType, locationType);\n}","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nimport inspect from '../../jsutils/inspect';\nimport find from '../../jsutils/find';\nimport { Kind } from '../../language/kinds';\nimport { print } from '../../language/printer';\nimport { getNamedType, isNonNullType, isLeafType, isObjectType, isListType, isInterfaceType } from '../../type/definition';\nimport { typeFromAST } from '../../utilities/typeFromAST';\nexport function fieldsConflictMessage(responseName, reason) {\n  return \"Fields \\\"\".concat(responseName, \"\\\" conflict because \").concat(reasonMessage(reason), \". \") + 'Use different aliases on the fields to fetch both if this was intentional.';\n}\n\nfunction reasonMessage(reason) {\n  if (Array.isArray(reason)) {\n    return reason.map(function (_ref) {\n      var responseName = _ref[0],\n          subreason = _ref[1];\n      return \"subfields \\\"\".concat(responseName, \"\\\" conflict because \").concat(reasonMessage(subreason));\n    }).join(' and ');\n  }\n\n  return reason;\n}\n/**\n * Overlapping fields can be merged\n *\n * A selection set is only valid if all fields (including spreading any\n * fragments) either correspond to distinct response names or can be merged\n * without ambiguity.\n */\n\n\nexport function OverlappingFieldsCanBeMerged(context) {\n  // A memoization for when two fragments are compared \"between\" each other for\n  // conflicts. Two fragments may be compared many times, so memoizing this can\n  // dramatically improve the performance of this validator.\n  var comparedFragmentPairs = new PairSet(); // A cache for the \"field map\" and list of fragment names found in any given\n  // selection set. Selection sets may be asked for this information multiple\n  // times, so this improves the performance of this validator.\n\n  var cachedFieldsAndFragmentNames = new Map();\n  return {\n    SelectionSet: function SelectionSet(selectionSet) {\n      var conflicts = findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, context.getParentType(), selectionSet);\n\n      for (var _i = 0; _i < conflicts.length; _i++) {\n        var _ref3 = conflicts[_i];\n        var _ref2$ = _ref3[0];\n        var responseName = _ref2$[0];\n        var reason = _ref2$[1];\n        var fields1 = _ref3[1];\n        var fields2 = _ref3[2];\n        context.reportError(new GraphQLError(fieldsConflictMessage(responseName, reason), fields1.concat(fields2)));\n      }\n    }\n  };\n}\n\n/**\n * Algorithm:\n *\n * Conflicts occur when two fields exist in a query which will produce the same\n * response name, but represent differing values, thus creating a conflict.\n * The algorithm below finds all conflicts via making a series of comparisons\n * between fields. In order to compare as few fields as possible, this makes\n * a series of comparisons \"within\" sets of fields and \"between\" sets of fields.\n *\n * Given any selection set, a collection produces both a set of fields by\n * also including all inline fragments, as well as a list of fragments\n * referenced by fragment spreads.\n *\n * A) Each selection set represented in the document first compares \"within\" its\n * collected set of fields, finding any conflicts between every pair of\n * overlapping fields.\n * Note: This is the *only time* that a the fields \"within\" a set are compared\n * to each other. After this only fields \"between\" sets are compared.\n *\n * B) Also, if any fragment is referenced in a selection set, then a\n * comparison is made \"between\" the original set of fields and the\n * referenced fragment.\n *\n * C) Also, if multiple fragments are referenced, then comparisons\n * are made \"between\" each referenced fragment.\n *\n * D) When comparing \"between\" a set of fields and a referenced fragment, first\n * a comparison is made between each field in the original set of fields and\n * each field in the the referenced set of fields.\n *\n * E) Also, if any fragment is referenced in the referenced selection set,\n * then a comparison is made \"between\" the original set of fields and the\n * referenced fragment (recursively referring to step D).\n *\n * F) When comparing \"between\" two fragments, first a comparison is made between\n * each field in the first referenced set of fields and each field in the the\n * second referenced set of fields.\n *\n * G) Also, any fragments referenced by the first must be compared to the\n * second, and any fragments referenced by the second must be compared to the\n * first (recursively referring to step F).\n *\n * H) When comparing two fields, if both have selection sets, then a comparison\n * is made \"between\" both selection sets, first comparing the set of fields in\n * the first selection set with the set of fields in the second.\n *\n * I) Also, if any fragment is referenced in either selection set, then a\n * comparison is made \"between\" the other set of fields and the\n * referenced fragment.\n *\n * J) Also, if two fragments are referenced in both selection sets, then a\n * comparison is made \"between\" the two fragments.\n *\n */\n// Find all conflicts found \"within\" a selection set, including those found\n// via spreading in fragments. Called when visiting each SelectionSet in the\n// GraphQL Document.\nfunction findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentType, selectionSet) {\n  var conflicts = [];\n\n  var _getFieldsAndFragment = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet),\n      fieldMap = _getFieldsAndFragment[0],\n      fragmentNames = _getFieldsAndFragment[1]; // (A) Find find all conflicts \"within\" the fields of this selection set.\n  // Note: this is the *only place* `collectConflictsWithin` is called.\n\n\n  collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap);\n\n  if (fragmentNames.length !== 0) {\n    // (B) Then collect conflicts between these fields and those represented by\n    // each spread fragment name found.\n    var comparedFragments = Object.create(null);\n\n    for (var i = 0; i < fragmentNames.length; i++) {\n      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, comparedFragmentPairs, false, fieldMap, fragmentNames[i]); // (C) Then compare this fragment with all other fragments found in this\n      // selection set to collect conflicts between fragments spread together.\n      // This compares each item in the list of fragment names to every other\n      // item in that same list (except for itself).\n\n      for (var j = i + 1; j < fragmentNames.length; j++) {\n        collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fragmentNames[i], fragmentNames[j]);\n      }\n    }\n  }\n\n  return conflicts;\n} // Collect all conflicts found between a set of fields and a fragment reference\n// including via spreading in any nested fragments.\n\n\nfunction collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentName) {\n  // Memoize so a fragment is not compared for conflicts more than once.\n  if (comparedFragments[fragmentName]) {\n    return;\n  }\n\n  comparedFragments[fragmentName] = true;\n  var fragment = context.getFragment(fragmentName);\n\n  if (!fragment) {\n    return;\n  }\n\n  var _getReferencedFieldsA = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment),\n      fieldMap2 = _getReferencedFieldsA[0],\n      fragmentNames2 = _getReferencedFieldsA[1]; // Do not compare a fragment's fieldMap to itself.\n\n\n  if (fieldMap === fieldMap2) {\n    return;\n  } // (D) First collect any conflicts between the provided collection of fields\n  // and the collection of fields represented by the given fragment.\n\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fieldMap2); // (E) Then collect any conflicts between the provided collection of fields\n  // and any fragment names found in the given fragment.\n\n  for (var i = 0; i < fragmentNames2.length; i++) {\n    collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentNames2[i]);\n  }\n} // Collect all conflicts found between two fragments, including via spreading in\n// any nested fragments.\n\n\nfunction collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentName2) {\n  // No need to compare a fragment to itself.\n  if (fragmentName1 === fragmentName2) {\n    return;\n  } // Memoize so two fragments are not compared for conflicts more than once.\n\n\n  if (comparedFragmentPairs.has(fragmentName1, fragmentName2, areMutuallyExclusive)) {\n    return;\n  }\n\n  comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);\n  var fragment1 = context.getFragment(fragmentName1);\n  var fragment2 = context.getFragment(fragmentName2);\n\n  if (!fragment1 || !fragment2) {\n    return;\n  }\n\n  var _getReferencedFieldsA2 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment1),\n      fieldMap1 = _getReferencedFieldsA2[0],\n      fragmentNames1 = _getReferencedFieldsA2[1];\n\n  var _getReferencedFieldsA3 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment2),\n      fieldMap2 = _getReferencedFieldsA3[0],\n      fragmentNames2 = _getReferencedFieldsA3[1]; // (F) First, collect all conflicts between these two collections of fields\n  // (not including any nested fragments).\n\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2); // (G) Then collect conflicts between the first fragment and any nested\n  // fragments spread in the second fragment.\n\n  for (var j = 0; j < fragmentNames2.length; j++) {\n    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentNames2[j]);\n  } // (G) Then collect conflicts between the second fragment and any nested\n  // fragments spread in the first fragment.\n\n\n  for (var i = 0; i < fragmentNames1.length; i++) {\n    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[i], fragmentName2);\n  }\n} // Find all conflicts found between two selection sets, including those found\n// via spreading in fragments. Called when determining if conflicts exist\n// between the sub-fields of two overlapping fields.\n\n\nfunction findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, parentType1, selectionSet1, parentType2, selectionSet2) {\n  var conflicts = [];\n\n  var _getFieldsAndFragment2 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType1, selectionSet1),\n      fieldMap1 = _getFieldsAndFragment2[0],\n      fragmentNames1 = _getFieldsAndFragment2[1];\n\n  var _getFieldsAndFragment3 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType2, selectionSet2),\n      fieldMap2 = _getFieldsAndFragment3[0],\n      fragmentNames2 = _getFieldsAndFragment3[1]; // (H) First, collect all conflicts between these two collections of field.\n\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2); // (I) Then collect conflicts between the first collection of fields and\n  // those referenced by each fragment name associated with the second.\n\n  if (fragmentNames2.length !== 0) {\n    var comparedFragments = Object.create(null);\n\n    for (var j = 0; j < fragmentNames2.length; j++) {\n      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fragmentNames2[j]);\n    }\n  } // (I) Then collect conflicts between the second collection of fields and\n  // those referenced by each fragment name associated with the first.\n\n\n  if (fragmentNames1.length !== 0) {\n    var _comparedFragments = Object.create(null);\n\n    for (var i = 0; i < fragmentNames1.length; i++) {\n      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, _comparedFragments, comparedFragmentPairs, areMutuallyExclusive, fieldMap2, fragmentNames1[i]);\n    }\n  } // (J) Also collect conflicts between any fragment names by the first and\n  // fragment names by the second. This compares each item in the first set of\n  // names to each item in the second set of names.\n\n\n  for (var _i2 = 0; _i2 < fragmentNames1.length; _i2++) {\n    for (var _j = 0; _j < fragmentNames2.length; _j++) {\n      collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[_i2], fragmentNames2[_j]);\n    }\n  }\n\n  return conflicts;\n} // Collect all Conflicts \"within\" one collection of fields.\n\n\nfunction collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For every response name, if there are multiple fields, they\n  // must be compared to find a potential conflict.\n  var _arr = Object.keys(fieldMap);\n\n  for (var _i3 = 0; _i3 < _arr.length; _i3++) {\n    var responseName = _arr[_i3];\n    var fields = fieldMap[responseName]; // This compares every field in the list to every other field in this list\n    // (except to itself). If the list only has one item, nothing needs to\n    // be compared.\n\n    if (fields.length > 1) {\n      for (var i = 0; i < fields.length; i++) {\n        for (var j = i + 1; j < fields.length; j++) {\n          var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, // within one collection is never mutually exclusive\n          responseName, fields[i], fields[j]);\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Collect all Conflicts between two collections of fields. This is similar to,\n// but different from the `collectConflictsWithin` function above. This check\n// assumes that `collectConflictsWithin` has already been called on each\n// provided collection of fields. This is true because this validator traverses\n// each individual selection set.\n\n\nfunction collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, fieldMap1, fieldMap2) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For any response name which appears in both provided field\n  // maps, each field from the first field map must be compared to every field\n  // in the second field map to find potential conflicts.\n  var _arr2 = Object.keys(fieldMap1);\n\n  for (var _i4 = 0; _i4 < _arr2.length; _i4++) {\n    var responseName = _arr2[_i4];\n    var fields2 = fieldMap2[responseName];\n\n    if (fields2) {\n      var fields1 = fieldMap1[responseName];\n\n      for (var i = 0; i < fields1.length; i++) {\n        for (var j = 0; j < fields2.length; j++) {\n          var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, fields1[i], fields2[j]);\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Determines if there is a conflict between two particular fields, including\n// comparing their sub-fields.\n\n\nfunction findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, field1, field2) {\n  var parentType1 = field1[0],\n      node1 = field1[1],\n      def1 = field1[2];\n  var parentType2 = field2[0],\n      node2 = field2[1],\n      def2 = field2[2]; // If it is known that two fields could not possibly apply at the same\n  // time, due to the parent types, then it is safe to permit them to diverge\n  // in aliased field or arguments used as they will not present any ambiguity\n  // by differing.\n  // It is known that two parent types could never overlap if they are\n  // different Object types. Interface or Union types might overlap - if not\n  // in the current state of the schema, then perhaps in some future version,\n  // thus may not safely diverge.\n\n  var areMutuallyExclusive = parentFieldsAreMutuallyExclusive || parentType1 !== parentType2 && isObjectType(parentType1) && isObjectType(parentType2); // The return type for each field.\n\n  var type1 = def1 && def1.type;\n  var type2 = def2 && def2.type;\n\n  if (!areMutuallyExclusive) {\n    // Two aliases must refer to the same field.\n    var name1 = node1.name.value;\n    var name2 = node2.name.value;\n\n    if (name1 !== name2) {\n      return [[responseName, \"\".concat(name1, \" and \").concat(name2, \" are different fields\")], [node1], [node2]];\n    } // Two field calls must have the same arguments.\n\n\n    if (!sameArguments(node1.arguments || [], node2.arguments || [])) {\n      return [[responseName, 'they have differing arguments'], [node1], [node2]];\n    }\n  }\n\n  if (type1 && type2 && doTypesConflict(type1, type2)) {\n    return [[responseName, \"they return conflicting types \".concat(inspect(type1), \" and \").concat(inspect(type2))], [node1], [node2]];\n  } // Collect and compare sub-fields. Use the same \"visited fragment names\" list\n  // for both collections so fields in a fragment reference are never\n  // compared to themselves.\n\n\n  var selectionSet1 = node1.selectionSet;\n  var selectionSet2 = node2.selectionSet;\n\n  if (selectionSet1 && selectionSet2) {\n    var conflicts = findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, getNamedType(type1), selectionSet1, getNamedType(type2), selectionSet2);\n    return subfieldConflicts(conflicts, responseName, node1, node2);\n  }\n}\n\nfunction sameArguments(arguments1, arguments2) {\n  if (arguments1.length !== arguments2.length) {\n    return false;\n  }\n\n  return arguments1.every(function (argument1) {\n    var argument2 = find(arguments2, function (argument) {\n      return argument.name.value === argument1.name.value;\n    });\n\n    if (!argument2) {\n      return false;\n    }\n\n    return sameValue(argument1.value, argument2.value);\n  });\n}\n\nfunction sameValue(value1, value2) {\n  return !value1 && !value2 || print(value1) === print(value2);\n} // Two types conflict if both types could not apply to a value simultaneously.\n// Composite types are ignored as their individual field types will be compared\n// later recursively. However List and Non-Null types must match.\n\n\nfunction doTypesConflict(type1, type2) {\n  if (isListType(type1)) {\n    return isListType(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;\n  }\n\n  if (isListType(type2)) {\n    return true;\n  }\n\n  if (isNonNullType(type1)) {\n    return isNonNullType(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;\n  }\n\n  if (isNonNullType(type2)) {\n    return true;\n  }\n\n  if (isLeafType(type1) || isLeafType(type2)) {\n    return type1 !== type2;\n  }\n\n  return false;\n} // Given a selection set, return the collection of fields (a mapping of response\n// name to field nodes and definitions) as well as a list of fragment names\n// referenced via fragment spreads.\n\n\nfunction getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet) {\n  var cached = cachedFieldsAndFragmentNames.get(selectionSet);\n\n  if (!cached) {\n    var nodeAndDefs = Object.create(null);\n    var fragmentNames = Object.create(null);\n\n    _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames);\n\n    cached = [nodeAndDefs, Object.keys(fragmentNames)];\n    cachedFieldsAndFragmentNames.set(selectionSet, cached);\n  }\n\n  return cached;\n} // Given a reference to a fragment, return the represented collection of fields\n// as well as a list of nested fragment names referenced via fragment spreads.\n\n\nfunction getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment) {\n  // Short-circuit building a type from the node if possible.\n  var cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);\n\n  if (cached) {\n    return cached;\n  }\n\n  var fragmentType = typeFromAST(context.getSchema(), fragment.typeCondition);\n  return getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragmentType, fragment.selectionSet);\n}\n\nfunction _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames) {\n  for (var i = 0; i < selectionSet.selections.length; i++) {\n    var selection = selectionSet.selections[i];\n\n    switch (selection.kind) {\n      case Kind.FIELD:\n        var fieldName = selection.name.value;\n        var fieldDef = void 0;\n\n        if (isObjectType(parentType) || isInterfaceType(parentType)) {\n          fieldDef = parentType.getFields()[fieldName];\n        }\n\n        var responseName = selection.alias ? selection.alias.value : fieldName;\n\n        if (!nodeAndDefs[responseName]) {\n          nodeAndDefs[responseName] = [];\n        }\n\n        nodeAndDefs[responseName].push([parentType, selection, fieldDef]);\n        break;\n\n      case Kind.FRAGMENT_SPREAD:\n        fragmentNames[selection.name.value] = true;\n        break;\n\n      case Kind.INLINE_FRAGMENT:\n        var typeCondition = selection.typeCondition;\n        var inlineFragmentType = typeCondition ? typeFromAST(context.getSchema(), typeCondition) : parentType;\n\n        _collectFieldsAndFragmentNames(context, inlineFragmentType, selection.selectionSet, nodeAndDefs, fragmentNames);\n\n        break;\n    }\n  }\n} // Given a series of Conflicts which occurred between two sub-fields, generate\n// a single Conflict.\n\n\nfunction subfieldConflicts(conflicts, responseName, node1, node2) {\n  if (conflicts.length > 0) {\n    return [[responseName, conflicts.map(function (_ref4) {\n      var reason = _ref4[0];\n      return reason;\n    })], conflicts.reduce(function (allFields, _ref5) {\n      var fields1 = _ref5[1];\n      return allFields.concat(fields1);\n    }, [node1]), conflicts.reduce(function (allFields, _ref6) {\n      var fields2 = _ref6[2];\n      return allFields.concat(fields2);\n    }, [node2])];\n  }\n}\n/**\n * A way to keep track of pairs of things when the ordering of the pair does\n * not matter. We do this by maintaining a sort of double adjacency sets.\n */\n\n\nvar PairSet =\n/*#__PURE__*/\nfunction () {\n  function PairSet() {\n    _defineProperty(this, \"_data\", void 0);\n\n    this._data = Object.create(null);\n  }\n\n  var _proto = PairSet.prototype;\n\n  _proto.has = function has(a, b, areMutuallyExclusive) {\n    var first = this._data[a];\n    var result = first && first[b];\n\n    if (result === undefined) {\n      return false;\n    } // areMutuallyExclusive being false is a superset of being true,\n    // hence if we want to know if this PairSet \"has\" these two with no\n    // exclusivity, we have to ensure it was added as such.\n\n\n    if (areMutuallyExclusive === false) {\n      return result === false;\n    }\n\n    return true;\n  };\n\n  _proto.add = function add(a, b, areMutuallyExclusive) {\n    _pairSetAdd(this._data, a, b, areMutuallyExclusive);\n\n    _pairSetAdd(this._data, b, a, areMutuallyExclusive);\n  };\n\n  return PairSet;\n}();\n\nfunction _pairSetAdd(data, a, b, areMutuallyExclusive) {\n  var map = data[a];\n\n  if (!map) {\n    map = Object.create(null);\n    data[a] = map;\n  }\n\n  map[b] = areMutuallyExclusive;\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateInputFieldMessage(fieldName) {\n  return \"There can be only one input field named \\\"\".concat(fieldName, \"\\\".\");\n}\n/**\n * Unique input field names\n *\n * A GraphQL input object value is only valid if all supplied fields are\n * uniquely named.\n */\n\nexport function UniqueInputFieldNames(context) {\n  var knownNameStack = [];\n  var knownNames = Object.create(null);\n  return {\n    ObjectValue: {\n      enter: function enter() {\n        knownNameStack.push(knownNames);\n        knownNames = Object.create(null);\n      },\n      leave: function leave() {\n        knownNames = knownNameStack.pop();\n      }\n    },\n    ObjectField: function ObjectField(node) {\n      var fieldName = node.name.value;\n\n      if (knownNames[fieldName]) {\n        context.reportError(new GraphQLError(duplicateInputFieldMessage(fieldName), [knownNames[fieldName], node.name]));\n      } else {\n        knownNames[fieldName] = node.name;\n      }\n\n      return false;\n    }\n  };\n}","/**\n * Copyright (c) 2018-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nexport function schemaDefinitionNotAloneMessage() {\n  return 'Must provide only one schema definition.';\n}\nexport function canNotDefineSchemaWithinExtensionMessage() {\n  return 'Cannot define a new schema within a schema extension.';\n}\n/**\n * Lone Schema definition\n *\n * A GraphQL document is only valid if it contains only one schema definition.\n */\n\nexport function LoneSchemaDefinition(context) {\n  var oldSchema = context.getSchema();\n  var alreadyDefined = oldSchema && (oldSchema.astNode || oldSchema.getQueryType() || oldSchema.getMutationType() || oldSchema.getSubscriptionType());\n  var schemaDefinitionsCount = 0;\n  return {\n    SchemaDefinition: function SchemaDefinition(node) {\n      if (alreadyDefined) {\n        context.reportError(new GraphQLError(canNotDefineSchemaWithinExtensionMessage(), node));\n        return;\n      }\n\n      if (schemaDefinitionsCount > 0) {\n        context.reportError(new GraphQLError(schemaDefinitionNotAloneMessage(), node));\n      }\n\n      ++schemaDefinitionsCount;\n    }\n  };\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n// Spec Section: \"Executable Definitions\"\nimport { ExecutableDefinitions } from './rules/ExecutableDefinitions'; // Spec Section: \"Operation Name Uniqueness\"\n\nimport { UniqueOperationNames } from './rules/UniqueOperationNames'; // Spec Section: \"Lone Anonymous Operation\"\n\nimport { LoneAnonymousOperation } from './rules/LoneAnonymousOperation'; // Spec Section: \"Subscriptions with Single Root Field\"\n\nimport { SingleFieldSubscriptions } from './rules/SingleFieldSubscriptions'; // Spec Section: \"Fragment Spread Type Existence\"\n\nimport { KnownTypeNames } from './rules/KnownTypeNames'; // Spec Section: \"Fragments on Composite Types\"\n\nimport { FragmentsOnCompositeTypes } from './rules/FragmentsOnCompositeTypes'; // Spec Section: \"Variables are Input Types\"\n\nimport { VariablesAreInputTypes } from './rules/VariablesAreInputTypes'; // Spec Section: \"Leaf Field Selections\"\n\nimport { ScalarLeafs } from './rules/ScalarLeafs'; // Spec Section: \"Field Selections on Objects, Interfaces, and Unions Types\"\n\nimport { FieldsOnCorrectType } from './rules/FieldsOnCorrectType'; // Spec Section: \"Fragment Name Uniqueness\"\n\nimport { UniqueFragmentNames } from './rules/UniqueFragmentNames'; // Spec Section: \"Fragment spread target defined\"\n\nimport { KnownFragmentNames } from './rules/KnownFragmentNames'; // Spec Section: \"Fragments must be used\"\n\nimport { NoUnusedFragments } from './rules/NoUnusedFragments'; // Spec Section: \"Fragment spread is possible\"\n\nimport { PossibleFragmentSpreads } from './rules/PossibleFragmentSpreads'; // Spec Section: \"Fragments must not form cycles\"\n\nimport { NoFragmentCycles } from './rules/NoFragmentCycles'; // Spec Section: \"Variable Uniqueness\"\n\nimport { UniqueVariableNames } from './rules/UniqueVariableNames'; // Spec Section: \"All Variable Used Defined\"\n\nimport { NoUndefinedVariables } from './rules/NoUndefinedVariables'; // Spec Section: \"All Variables Used\"\n\nimport { NoUnusedVariables } from './rules/NoUnusedVariables'; // Spec Section: \"Directives Are Defined\"\n\nimport { KnownDirectives } from './rules/KnownDirectives'; // Spec Section: \"Directives Are Unique Per Location\"\n\nimport { UniqueDirectivesPerLocation } from './rules/UniqueDirectivesPerLocation'; // Spec Section: \"Argument Names\"\n\nimport { KnownArgumentNames } from './rules/KnownArgumentNames'; // Spec Section: \"Argument Uniqueness\"\n\nimport { UniqueArgumentNames } from './rules/UniqueArgumentNames'; // Spec Section: \"Value Type Correctness\"\n\nimport { ValuesOfCorrectType } from './rules/ValuesOfCorrectType'; // Spec Section: \"Argument Optionality\"\n\nimport { ProvidedRequiredArguments } from './rules/ProvidedRequiredArguments'; // Spec Section: \"All Variable Usages Are Allowed\"\n\nimport { VariablesInAllowedPosition } from './rules/VariablesInAllowedPosition'; // Spec Section: \"Field Selection Merging\"\n\nimport { OverlappingFieldsCanBeMerged } from './rules/OverlappingFieldsCanBeMerged'; // Spec Section: \"Input Object Field Uniqueness\"\n\nimport { UniqueInputFieldNames } from './rules/UniqueInputFieldNames';\n/**\n * This set includes all validation rules defined by the GraphQL spec.\n *\n * The order of the rules in this list has been adjusted to lead to the\n * most clear output when encountering multiple validation errors.\n */\n\nexport var specifiedRules = [ExecutableDefinitions, UniqueOperationNames, LoneAnonymousOperation, SingleFieldSubscriptions, KnownTypeNames, FragmentsOnCompositeTypes, VariablesAreInputTypes, ScalarLeafs, FieldsOnCorrectType, UniqueFragmentNames, KnownFragmentNames, NoUnusedFragments, PossibleFragmentSpreads, NoFragmentCycles, UniqueVariableNames, NoUndefinedVariables, NoUnusedVariables, KnownDirectives, UniqueDirectivesPerLocation, KnownArgumentNames, UniqueArgumentNames, ValuesOfCorrectType, ProvidedRequiredArguments, VariablesInAllowedPosition, OverlappingFieldsCanBeMerged, UniqueInputFieldNames];\nimport { LoneSchemaDefinition } from './rules/LoneSchemaDefinition';\nimport { KnownArgumentNamesOnDirectives } from './rules/KnownArgumentNames';\nimport { ProvidedRequiredArgumentsOnDirectives } from './rules/ProvidedRequiredArguments'; // @internal\n\nexport var specifiedSDLRules = [LoneSchemaDefinition, KnownDirectives, UniqueDirectivesPerLocation, KnownArgumentNamesOnDirectives, UniqueArgumentNames, UniqueInputFieldNames, ProvidedRequiredArgumentsOnDirectives];","function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { visit, visitWithTypeInfo } from '../language/visitor';\nimport { Kind } from '../language/kinds';\nimport { TypeInfo } from '../utilities/TypeInfo';\n\n/**\n * An instance of this class is passed as the \"this\" context to all validators,\n * allowing access to commonly useful contextual information from within a\n * validation rule.\n */\nexport var ASTValidationContext =\n/*#__PURE__*/\nfunction () {\n  function ASTValidationContext(ast) {\n    _defineProperty(this, \"_ast\", void 0);\n\n    _defineProperty(this, \"_errors\", void 0);\n\n    this._ast = ast;\n    this._errors = [];\n  }\n\n  var _proto = ASTValidationContext.prototype;\n\n  _proto.reportError = function reportError(error) {\n    this._errors.push(error);\n  };\n\n  _proto.getErrors = function getErrors() {\n    return this._errors;\n  };\n\n  _proto.getDocument = function getDocument() {\n    return this._ast;\n  };\n\n  return ASTValidationContext;\n}();\nexport var SDLValidationContext =\n/*#__PURE__*/\nfunction (_ASTValidationContext) {\n  _inheritsLoose(SDLValidationContext, _ASTValidationContext);\n\n  function SDLValidationContext(ast, schema) {\n    var _this;\n\n    _this = _ASTValidationContext.call(this, ast) || this;\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_schema\", void 0);\n\n    _this._schema = schema;\n    return _this;\n  }\n\n  var _proto2 = SDLValidationContext.prototype;\n\n  _proto2.getSchema = function getSchema() {\n    return this._schema;\n  };\n\n  return SDLValidationContext;\n}(ASTValidationContext);\nexport var ValidationContext =\n/*#__PURE__*/\nfunction (_ASTValidationContext2) {\n  _inheritsLoose(ValidationContext, _ASTValidationContext2);\n\n  function ValidationContext(schema, ast, typeInfo) {\n    var _this2;\n\n    _this2 = _ASTValidationContext2.call(this, ast) || this;\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), \"_schema\", void 0);\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), \"_typeInfo\", void 0);\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), \"_fragments\", void 0);\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), \"_fragmentSpreads\", void 0);\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), \"_recursivelyReferencedFragments\", void 0);\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), \"_variableUsages\", void 0);\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), \"_recursiveVariableUsages\", void 0);\n\n    _this2._schema = schema;\n    _this2._typeInfo = typeInfo;\n    _this2._fragmentSpreads = new Map();\n    _this2._recursivelyReferencedFragments = new Map();\n    _this2._variableUsages = new Map();\n    _this2._recursiveVariableUsages = new Map();\n    return _this2;\n  }\n\n  var _proto3 = ValidationContext.prototype;\n\n  _proto3.getSchema = function getSchema() {\n    return this._schema;\n  };\n\n  _proto3.getFragment = function getFragment(name) {\n    var fragments = this._fragments;\n\n    if (!fragments) {\n      this._fragments = fragments = this.getDocument().definitions.reduce(function (frags, statement) {\n        if (statement.kind === Kind.FRAGMENT_DEFINITION) {\n          frags[statement.name.value] = statement;\n        }\n\n        return frags;\n      }, Object.create(null));\n    }\n\n    return fragments[name];\n  };\n\n  _proto3.getFragmentSpreads = function getFragmentSpreads(node) {\n    var spreads = this._fragmentSpreads.get(node);\n\n    if (!spreads) {\n      spreads = [];\n      var setsToVisit = [node];\n\n      while (setsToVisit.length !== 0) {\n        var set = setsToVisit.pop();\n\n        for (var i = 0; i < set.selections.length; i++) {\n          var selection = set.selections[i];\n\n          if (selection.kind === Kind.FRAGMENT_SPREAD) {\n            spreads.push(selection);\n          } else if (selection.selectionSet) {\n            setsToVisit.push(selection.selectionSet);\n          }\n        }\n      }\n\n      this._fragmentSpreads.set(node, spreads);\n    }\n\n    return spreads;\n  };\n\n  _proto3.getRecursivelyReferencedFragments = function getRecursivelyReferencedFragments(operation) {\n    var fragments = this._recursivelyReferencedFragments.get(operation);\n\n    if (!fragments) {\n      fragments = [];\n      var collectedNames = Object.create(null);\n      var nodesToVisit = [operation.selectionSet];\n\n      while (nodesToVisit.length !== 0) {\n        var node = nodesToVisit.pop();\n        var spreads = this.getFragmentSpreads(node);\n\n        for (var i = 0; i < spreads.length; i++) {\n          var fragName = spreads[i].name.value;\n\n          if (collectedNames[fragName] !== true) {\n            collectedNames[fragName] = true;\n            var fragment = this.getFragment(fragName);\n\n            if (fragment) {\n              fragments.push(fragment);\n              nodesToVisit.push(fragment.selectionSet);\n            }\n          }\n        }\n      }\n\n      this._recursivelyReferencedFragments.set(operation, fragments);\n    }\n\n    return fragments;\n  };\n\n  _proto3.getVariableUsages = function getVariableUsages(node) {\n    var usages = this._variableUsages.get(node);\n\n    if (!usages) {\n      var newUsages = [];\n      var typeInfo = new TypeInfo(this._schema);\n      visit(node, visitWithTypeInfo(typeInfo, {\n        VariableDefinition: function VariableDefinition() {\n          return false;\n        },\n        Variable: function Variable(variable) {\n          newUsages.push({\n            node: variable,\n            type: typeInfo.getInputType(),\n            defaultValue: typeInfo.getDefaultValue()\n          });\n        }\n      }));\n      usages = newUsages;\n\n      this._variableUsages.set(node, usages);\n    }\n\n    return usages;\n  };\n\n  _proto3.getRecursiveVariableUsages = function getRecursiveVariableUsages(operation) {\n    var usages = this._recursiveVariableUsages.get(operation);\n\n    if (!usages) {\n      usages = this.getVariableUsages(operation);\n      var fragments = this.getRecursivelyReferencedFragments(operation);\n\n      for (var i = 0; i < fragments.length; i++) {\n        Array.prototype.push.apply(usages, this.getVariableUsages(fragments[i]));\n      }\n\n      this._recursiveVariableUsages.set(operation, usages);\n    }\n\n    return usages;\n  };\n\n  _proto3.getType = function getType() {\n    return this._typeInfo.getType();\n  };\n\n  _proto3.getParentType = function getParentType() {\n    return this._typeInfo.getParentType();\n  };\n\n  _proto3.getInputType = function getInputType() {\n    return this._typeInfo.getInputType();\n  };\n\n  _proto3.getParentInputType = function getParentInputType() {\n    return this._typeInfo.getParentInputType();\n  };\n\n  _proto3.getFieldDef = function getFieldDef() {\n    return this._typeInfo.getFieldDef();\n  };\n\n  _proto3.getDirective = function getDirective() {\n    return this._typeInfo.getDirective();\n  };\n\n  _proto3.getArgument = function getArgument() {\n    return this._typeInfo.getArgument();\n  };\n\n  return ValidationContext;\n}(ASTValidationContext);","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport invariant from '../jsutils/invariant';\nimport { visit, visitInParallel, visitWithTypeInfo } from '../language/visitor';\nimport { assertValidSchema } from '../type/validate';\nimport { TypeInfo } from '../utilities/TypeInfo';\nimport { specifiedRules, specifiedSDLRules } from './specifiedRules';\nimport { SDLValidationContext, ValidationContext } from './ValidationContext';\n/**\n * Implements the \"Validation\" section of the spec.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the document is valid.\n *\n * A list of specific validation rules may be provided. If not provided, the\n * default list of rules defined by the GraphQL specification will be used.\n *\n * Each validation rules is a function which returns a visitor\n * (see the language/visitor API). Visitor methods are expected to return\n * GraphQLErrors, or Arrays of GraphQLErrors when invalid.\n *\n * Optionally a custom TypeInfo instance may be provided. If not provided, one\n * will be created from the provided schema.\n */\n\nexport function validate(schema, documentAST) {\n  var rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : specifiedRules;\n  var typeInfo = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new TypeInfo(schema);\n  !documentAST ? invariant(0, 'Must provide document') : void 0; // If the schema used for validation is invalid, throw an error.\n\n  assertValidSchema(schema);\n  var context = new ValidationContext(schema, documentAST, typeInfo); // This uses a specialized visitor which runs multiple visitors in parallel,\n  // while maintaining the visitor skip and break API.\n\n  var visitor = visitInParallel(rules.map(function (rule) {\n    return rule(context);\n  })); // Visit the whole document with each instance of all provided rules.\n\n  visit(documentAST, visitWithTypeInfo(typeInfo, visitor));\n  return context.getErrors();\n} // @internal\n\nexport function validateSDL(documentAST, schemaToExtend) {\n  var rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : specifiedSDLRules;\n  var context = new SDLValidationContext(documentAST, schemaToExtend);\n  var visitors = rules.map(function (rule) {\n    return rule(context);\n  });\n  visit(documentAST, visitInParallel(visitors));\n  return context.getErrors();\n}\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\n\nexport function assertValidSDL(documentAST) {\n  var errors = validateSDL(documentAST);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map(function (error) {\n      return error.message;\n    }).join('\\n\\n'));\n  }\n}\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\n\nexport function assertValidSDLExtension(documentAST, schema) {\n  var errors = validateSDL(documentAST, schema);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map(function (error) {\n      return error.message;\n    }).join('\\n\\n'));\n  }\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from './GraphQLError';\n\n/**\n * Given an arbitrary Error, presumably thrown while attempting to execute a\n * GraphQL operation, produce a new GraphQLError aware of the location in the\n * document responsible for the original Error.\n */\nexport function locatedError(originalError, nodes, path) {\n  // Note: this uses a brand-check to support GraphQL errors originating from\n  // other contexts.\n  if (originalError && Array.isArray(originalError.path)) {\n    return originalError;\n  }\n\n  return new GraphQLError(originalError && originalError.message, originalError && originalError.nodes || nodes, originalError && originalError.source, originalError && originalError.positions, path, originalError);\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Returns true if the value acts like a Promise, i.e. has a \"then\" function,\n * otherwise returns false.\n */\n// eslint-disable-next-line no-redeclare\nexport default function isPromise(value) {\n  return Boolean(value && typeof value.then === 'function');\n}","/**\n * Copyright (c) 2017-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Memoizes the provided three-argument function.\n */\nexport default function memoize3(fn) {\n  var cache0;\n\n  function memoized(a1, a2, a3) {\n    if (!cache0) {\n      cache0 = new WeakMap();\n    }\n\n    var cache1 = cache0.get(a1);\n    var cache2;\n\n    if (cache1) {\n      cache2 = cache1.get(a2);\n\n      if (cache2) {\n        var cachedValue = cache2.get(a3);\n\n        if (cachedValue !== undefined) {\n          return cachedValue;\n        }\n      }\n    } else {\n      cache1 = new WeakMap();\n      cache0.set(a1, cache1);\n    }\n\n    if (!cache2) {\n      cache2 = new WeakMap();\n      cache1.set(a2, cache2);\n    }\n\n    var newValue = fn.apply(this, arguments);\n    cache2.set(a3, newValue);\n    return newValue;\n  }\n\n  return memoized;\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * This function transforms a JS object `ObjMap<Promise<T>>` into\n * a `Promise<ObjMap<T>>`\n *\n * This is akin to bluebird's `Promise.props`, but implemented only using\n * `Promise.all` so it will work with any implementation of ES6 promises.\n */\nexport default function promiseForObject(object) {\n  var keys = Object.keys(object);\n  var valuesAndPromises = keys.map(function (name) {\n    return object[name];\n  });\n  return Promise.all(valuesAndPromises).then(function (values) {\n    return values.reduce(function (resolvedObject, value, i) {\n      resolvedObject[keys[i]] = value;\n      return resolvedObject;\n    }, Object.create(null));\n  });\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport isPromise from './isPromise';\n\n/**\n * Similar to Array.prototype.reduce(), however the reducing callback may return\n * a Promise, in which case reduction will continue after each promise resolves.\n *\n * If the callback does not return a Promise, then this function will also not\n * return a Promise.\n */\nexport default function promiseReduce(values, callback, initialValue) {\n  return values.reduce(function (previous, value) {\n    return isPromise(previous) ? previous.then(function (resolved) {\n      return callback(resolved, value);\n    }) : callback(previous, value);\n  }, initialValue);\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../error/GraphQLError';\n\n/**\n * Extracts the root type of the operation from the schema.\n */\nexport function getOperationRootType(schema, operation) {\n  switch (operation.operation) {\n    case 'query':\n      var queryType = schema.getQueryType();\n\n      if (!queryType) {\n        throw new GraphQLError('Schema does not define the required query root type.', [operation]);\n      }\n\n      return queryType;\n\n    case 'mutation':\n      var mutationType = schema.getMutationType();\n\n      if (!mutationType) {\n        throw new GraphQLError('Schema is not configured for mutations.', [operation]);\n      }\n\n      return mutationType;\n\n    case 'subscription':\n      var subscriptionType = schema.getSubscriptionType();\n\n      if (!subscriptionType) {\n        throw new GraphQLError('Schema is not configured for subscriptions.', [operation]);\n      }\n\n      return subscriptionType;\n\n    default:\n      throw new GraphQLError('Can only have query, mutation and subscription operations.', [operation]);\n  }\n}","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { forEach, isCollection } from 'iterall';\nimport inspect from '../jsutils/inspect';\nimport isInvalid from '../jsutils/isInvalid';\nimport orList from '../jsutils/orList';\nimport suggestionList from '../jsutils/suggestionList';\nimport { GraphQLError } from '../error/GraphQLError';\nimport { isScalarType, isEnumType, isInputObjectType, isListType, isNonNullType } from '../type/definition';\n\n/**\n * Coerces a JavaScript value given a GraphQL Type.\n *\n * Returns either a value which is valid for the provided type or a list of\n * encountered coercion errors.\n *\n */\nexport function coerceValue(value, type, blameNode, path) {\n  // A value must be provided if the type is non-null.\n  if (isNonNullType(type)) {\n    if (value == null) {\n      return ofErrors([coercionError(\"Expected non-nullable type \".concat(inspect(type), \" not to be null\"), blameNode, path)]);\n    }\n\n    return coerceValue(value, type.ofType, blameNode, path);\n  }\n\n  if (value == null) {\n    // Explicitly return the value null.\n    return ofValue(null);\n  }\n\n  if (isScalarType(type)) {\n    // Scalars determine if a value is valid via parseValue(), which can\n    // throw to indicate failure. If it throws, maintain a reference to\n    // the original error.\n    try {\n      var parseResult = type.parseValue(value);\n\n      if (isInvalid(parseResult)) {\n        return ofErrors([coercionError(\"Expected type \".concat(type.name), blameNode, path)]);\n      }\n\n      return ofValue(parseResult);\n    } catch (error) {\n      return ofErrors([coercionError(\"Expected type \".concat(type.name), blameNode, path, error.message, error)]);\n    }\n  }\n\n  if (isEnumType(type)) {\n    if (typeof value === 'string') {\n      var enumValue = type.getValue(value);\n\n      if (enumValue) {\n        return ofValue(enumValue.value);\n      }\n    }\n\n    var suggestions = suggestionList(String(value), type.getValues().map(function (enumValue) {\n      return enumValue.name;\n    }));\n    var didYouMean = suggestions.length !== 0 ? \"did you mean \".concat(orList(suggestions), \"?\") : undefined;\n    return ofErrors([coercionError(\"Expected type \".concat(type.name), blameNode, path, didYouMean)]);\n  }\n\n  if (isListType(type)) {\n    var itemType = type.ofType;\n\n    if (isCollection(value)) {\n      var errors;\n      var coercedValue = [];\n      forEach(value, function (itemValue, index) {\n        var coercedItem = coerceValue(itemValue, itemType, blameNode, atPath(path, index));\n\n        if (coercedItem.errors) {\n          errors = add(errors, coercedItem.errors);\n        } else if (!errors) {\n          coercedValue.push(coercedItem.value);\n        }\n      });\n      return errors ? ofErrors(errors) : ofValue(coercedValue);\n    } // Lists accept a non-list value as a list of one.\n\n\n    var coercedItem = coerceValue(value, itemType, blameNode);\n    return coercedItem.errors ? coercedItem : ofValue([coercedItem.value]);\n  }\n\n  if (isInputObjectType(type)) {\n    if (_typeof(value) !== 'object') {\n      return ofErrors([coercionError(\"Expected type \".concat(type.name, \" to be an object\"), blameNode, path)]);\n    }\n\n    var _errors;\n\n    var _coercedValue = {};\n    var fields = type.getFields(); // Ensure every defined field is valid.\n\n    for (var fieldName in fields) {\n      if (hasOwnProperty.call(fields, fieldName)) {\n        var field = fields[fieldName];\n        var fieldValue = value[fieldName];\n\n        if (isInvalid(fieldValue)) {\n          if (!isInvalid(field.defaultValue)) {\n            _coercedValue[fieldName] = field.defaultValue;\n          } else if (isNonNullType(field.type)) {\n            _errors = add(_errors, coercionError(\"Field \".concat(printPath(atPath(path, fieldName)), \" of required \") + \"type \".concat(inspect(field.type), \" was not provided\"), blameNode));\n          }\n        } else {\n          var coercedField = coerceValue(fieldValue, field.type, blameNode, atPath(path, fieldName));\n\n          if (coercedField.errors) {\n            _errors = add(_errors, coercedField.errors);\n          } else if (!_errors) {\n            _coercedValue[fieldName] = coercedField.value;\n          }\n        }\n      }\n    } // Ensure every provided field is defined.\n\n\n    for (var _fieldName in value) {\n      if (hasOwnProperty.call(value, _fieldName)) {\n        if (!fields[_fieldName]) {\n          var _suggestions = suggestionList(_fieldName, Object.keys(fields));\n\n          var _didYouMean = _suggestions.length !== 0 ? \"did you mean \".concat(orList(_suggestions), \"?\") : undefined;\n\n          _errors = add(_errors, coercionError(\"Field \\\"\".concat(_fieldName, \"\\\" is not defined by type \").concat(type.name), blameNode, path, _didYouMean));\n        }\n      }\n    }\n\n    return _errors ? ofErrors(_errors) : ofValue(_coercedValue);\n  }\n  /* istanbul ignore next */\n\n\n  throw new Error(\"Unexpected type: \".concat(type, \".\"));\n}\n\nfunction ofValue(value) {\n  return {\n    errors: undefined,\n    value: value\n  };\n}\n\nfunction ofErrors(errors) {\n  return {\n    errors: errors,\n    value: undefined\n  };\n}\n\nfunction add(errors, moreErrors) {\n  return (errors || []).concat(moreErrors);\n}\n\nfunction atPath(prev, key) {\n  return {\n    prev: prev,\n    key: key\n  };\n}\n\nfunction coercionError(message, blameNode, path, subMessage, originalError) {\n  var pathStr = printPath(path); // Return a GraphQLError instance\n\n  return new GraphQLError(message + (pathStr ? ' at ' + pathStr : '') + (subMessage ? '; ' + subMessage : '.'), blameNode, undefined, undefined, undefined, originalError);\n} // Build a string describing the path into the value where the error was found\n\n\nfunction printPath(path) {\n  var pathStr = '';\n  var currentPath = path;\n\n  while (currentPath) {\n    pathStr = (typeof currentPath.key === 'string' ? '.' + currentPath.key : '[' + String(currentPath.key) + ']') + pathStr;\n    currentPath = currentPath.prev;\n  }\n\n  return pathStr ? 'value' + pathStr : '';\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport keyMap from '../jsutils/keyMap';\nimport isInvalid from '../jsutils/isInvalid';\nimport objectValues from '../jsutils/objectValues';\nimport { Kind } from '../language/kinds';\nimport { isScalarType, isEnumType, isInputObjectType, isListType, isNonNullType } from '../type/definition';\n\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * GraphQL Value literals.\n *\n * Returns `undefined` when the value could not be validly coerced according to\n * the provided type.\n *\n * | GraphQL Value        | JSON Value    |\n * | -------------------- | ------------- |\n * | Input Object         | Object        |\n * | List                 | Array         |\n * | Boolean              | Boolean       |\n * | String               | String        |\n * | Int / Float          | Number        |\n * | Enum Value           | Mixed         |\n * | NullValue            | null          |\n *\n */\nexport function valueFromAST(valueNode, type, variables) {\n  if (!valueNode) {\n    // When there is no node, then there is also no value.\n    // Importantly, this is different from returning the value null.\n    return;\n  }\n\n  if (isNonNullType(type)) {\n    if (valueNode.kind === Kind.NULL) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return valueFromAST(valueNode, type.ofType, variables);\n  }\n\n  if (valueNode.kind === Kind.NULL) {\n    // This is explicitly returning the value null.\n    return null;\n  }\n\n  if (valueNode.kind === Kind.VARIABLE) {\n    var variableName = valueNode.name.value;\n\n    if (!variables || isInvalid(variables[variableName])) {\n      // No valid return value.\n      return;\n    }\n\n    var variableValue = variables[variableName];\n\n    if (variableValue === null && isNonNullType(type)) {\n      return; // Invalid: intentionally return no value.\n    } // Note: This does no further checking that this variable is correct.\n    // This assumes that this query has been validated and the variable\n    // usage here is of the correct type.\n\n\n    return variableValue;\n  }\n\n  if (isListType(type)) {\n    var itemType = type.ofType;\n\n    if (valueNode.kind === Kind.LIST) {\n      var coercedValues = [];\n      var itemNodes = valueNode.values;\n\n      for (var i = 0; i < itemNodes.length; i++) {\n        if (isMissingVariable(itemNodes[i], variables)) {\n          // If an array contains a missing variable, it is either coerced to\n          // null or if the item type is non-null, it considered invalid.\n          if (isNonNullType(itemType)) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(null);\n        } else {\n          var itemValue = valueFromAST(itemNodes[i], itemType, variables);\n\n          if (isInvalid(itemValue)) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(itemValue);\n        }\n      }\n\n      return coercedValues;\n    }\n\n    var coercedValue = valueFromAST(valueNode, itemType, variables);\n\n    if (isInvalid(coercedValue)) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return [coercedValue];\n  }\n\n  if (isInputObjectType(type)) {\n    if (valueNode.kind !== Kind.OBJECT) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    var coercedObj = Object.create(null);\n    var fieldNodes = keyMap(valueNode.fields, function (field) {\n      return field.name.value;\n    });\n    var fields = objectValues(type.getFields());\n\n    for (var _i = 0; _i < fields.length; _i++) {\n      var field = fields[_i];\n      var fieldNode = fieldNodes[field.name];\n\n      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {\n        if (field.defaultValue !== undefined) {\n          coercedObj[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          return; // Invalid: intentionally return no value.\n        }\n\n        continue;\n      }\n\n      var fieldValue = valueFromAST(fieldNode.value, field.type, variables);\n\n      if (isInvalid(fieldValue)) {\n        return; // Invalid: intentionally return no value.\n      }\n\n      coercedObj[field.name] = fieldValue;\n    }\n\n    return coercedObj;\n  }\n\n  if (isEnumType(type)) {\n    if (valueNode.kind !== Kind.ENUM) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    var enumValue = type.getValue(valueNode.value);\n\n    if (!enumValue) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return enumValue.value;\n  }\n\n  if (isScalarType(type)) {\n    // Scalars fulfill parsing a literal value via parseLiteral().\n    // Invalid values represent a failure to parse correctly, in which case\n    // no value is returned.\n    var result;\n\n    try {\n      result = type.parseLiteral(valueNode, variables);\n    } catch (_error) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    if (isInvalid(result)) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return result;\n  }\n  /* istanbul ignore next */\n\n\n  throw new Error(\"Unknown type: \".concat(type, \".\"));\n} // Returns true if the provided valueNode is a variable which is not defined\n// in the set of variables.\n\nfunction isMissingVariable(valueNode, variables) {\n  return valueNode.kind === Kind.VARIABLE && (!variables || isInvalid(variables[valueNode.name.value]));\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../error/GraphQLError';\nimport find from '../jsutils/find';\nimport inspect from '../jsutils/inspect';\nimport invariant from '../jsutils/invariant';\nimport keyMap from '../jsutils/keyMap';\nimport { coerceValue } from '../utilities/coerceValue';\nimport { typeFromAST } from '../utilities/typeFromAST';\nimport { valueFromAST } from '../utilities/valueFromAST';\nimport { Kind } from '../language/kinds';\nimport { print } from '../language/printer';\nimport { isInputType, isNonNullType } from '../type/definition';\n\n/**\n * Prepares an object map of variableValues of the correct type based on the\n * provided variable definitions and arbitrary input. If the input cannot be\n * parsed to match the variable definitions, a GraphQLError will be thrown.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\nexport function getVariableValues(schema, varDefNodes, inputs) {\n  var errors = [];\n  var coercedValues = {};\n\n  for (var i = 0; i < varDefNodes.length; i++) {\n    var varDefNode = varDefNodes[i];\n    var varName = varDefNode.variable.name.value;\n    var varType = typeFromAST(schema, varDefNode.type);\n\n    if (!isInputType(varType)) {\n      // Must use input types for variables. This should be caught during\n      // validation, however is checked again here for safety.\n      errors.push(new GraphQLError(\"Variable \\\"$\".concat(varName, \"\\\" expected value of type \") + \"\\\"\".concat(print(varDefNode.type), \"\\\" which cannot be used as an input type.\"), [varDefNode.type]));\n    } else {\n      var hasValue = hasOwnProperty(inputs, varName);\n      var value = hasValue ? inputs[varName] : undefined;\n\n      if (!hasValue && varDefNode.defaultValue) {\n        // If no value was provided to a variable with a default value,\n        // use the default value.\n        coercedValues[varName] = valueFromAST(varDefNode.defaultValue, varType);\n      } else if ((!hasValue || value === null) && isNonNullType(varType)) {\n        // If no value or a nullish value was provided to a variable with a\n        // non-null type (required), produce an error.\n        errors.push(new GraphQLError(hasValue ? \"Variable \\\"$\".concat(varName, \"\\\" of non-null type \") + \"\\\"\".concat(inspect(varType), \"\\\" must not be null.\") : \"Variable \\\"$\".concat(varName, \"\\\" of required type \") + \"\\\"\".concat(inspect(varType), \"\\\" was not provided.\"), [varDefNode]));\n      } else if (hasValue) {\n        if (value === null) {\n          // If the explicit value `null` was provided, an entry in the coerced\n          // values must exist as the value `null`.\n          coercedValues[varName] = null;\n        } else {\n          // Otherwise, a non-null value was provided, coerce it to the expected\n          // type or report an error if coercion fails.\n          var coerced = coerceValue(value, varType, varDefNode);\n          var coercionErrors = coerced.errors;\n\n          if (coercionErrors) {\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n              for (var _iterator = coercionErrors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var error = _step.value;\n                error.message = \"Variable \\\"$\".concat(varName, \"\\\" got invalid value \").concat(inspect(value), \"; \") + error.message;\n              }\n            } catch (err) {\n              _didIteratorError = true;\n              _iteratorError = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n              } finally {\n                if (_didIteratorError) {\n                  throw _iteratorError;\n                }\n              }\n            }\n\n            errors.push.apply(errors, coercionErrors);\n          } else {\n            coercedValues[varName] = coerced.value;\n          }\n        }\n      }\n    }\n  }\n\n  return errors.length === 0 ? {\n    errors: undefined,\n    coerced: coercedValues\n  } : {\n    errors: errors,\n    coerced: undefined\n  };\n}\n/**\n * Prepares an object map of argument values given a list of argument\n * definitions and list of argument AST nodes.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n\nexport function getArgumentValues(def, node, variableValues) {\n  var coercedValues = {};\n  var argDefs = def.args;\n  var argNodes = node.arguments;\n\n  if (!argDefs || !argNodes) {\n    return coercedValues;\n  }\n\n  var argNodeMap = keyMap(argNodes, function (arg) {\n    return arg.name.value;\n  });\n\n  for (var i = 0; i < argDefs.length; i++) {\n    var argDef = argDefs[i];\n    var name = argDef.name;\n    var argType = argDef.type;\n    var argumentNode = argNodeMap[name];\n    var hasValue = void 0;\n    var isNull = void 0;\n\n    if (argumentNode && argumentNode.value.kind === Kind.VARIABLE) {\n      var variableName = argumentNode.value.name.value;\n      hasValue = variableValues && hasOwnProperty(variableValues, variableName);\n      isNull = variableValues && variableValues[variableName] === null;\n    } else {\n      hasValue = argumentNode != null;\n      isNull = argumentNode && argumentNode.value.kind === Kind.NULL;\n    }\n\n    if (!hasValue && argDef.defaultValue !== undefined) {\n      // If no argument was provided where the definition has a default value,\n      // use the default value.\n      coercedValues[name] = argDef.defaultValue;\n    } else if ((!hasValue || isNull) && isNonNullType(argType)) {\n      // If no argument or a null value was provided to an argument with a\n      // non-null type (required), produce a field error.\n      if (isNull) {\n        throw new GraphQLError(\"Argument \\\"\".concat(name, \"\\\" of non-null type \\\"\").concat(inspect(argType), \"\\\" \") + 'must not be null.', [argumentNode.value]);\n      } else if (argumentNode && argumentNode.value.kind === Kind.VARIABLE) {\n        var _variableName = argumentNode.value.name.value;\n        throw new GraphQLError(\"Argument \\\"\".concat(name, \"\\\" of required type \\\"\").concat(inspect(argType), \"\\\" \") + \"was provided the variable \\\"$\".concat(_variableName, \"\\\" \") + 'which was not provided a runtime value.', [argumentNode.value]);\n      } else {\n        throw new GraphQLError(\"Argument \\\"\".concat(name, \"\\\" of required type \\\"\").concat(inspect(argType), \"\\\" \") + 'was not provided.', [node]);\n      }\n    } else if (hasValue) {\n      if (argumentNode.value.kind === Kind.NULL) {\n        // If the explicit value `null` was provided, an entry in the coerced\n        // values must exist as the value `null`.\n        coercedValues[name] = null;\n      } else if (argumentNode.value.kind === Kind.VARIABLE) {\n        var _variableName2 = argumentNode.value.name.value;\n        !variableValues ? invariant(0, 'Must exist for hasValue to be true.') : void 0; // Note: This does no further checking that this variable is correct.\n        // This assumes that this query has been validated and the variable\n        // usage here is of the correct type.\n\n        coercedValues[name] = variableValues[_variableName2];\n      } else {\n        var valueNode = argumentNode.value;\n        var coercedValue = valueFromAST(valueNode, argType, variableValues);\n\n        if (coercedValue === undefined) {\n          // Note: ValuesOfCorrectType validation should catch this before\n          // execution. This is a runtime check to ensure execution does not\n          // continue with an invalid argument value.\n          throw new GraphQLError(\"Argument \\\"\".concat(name, \"\\\" has invalid value \").concat(print(valueNode), \".\"), [argumentNode.value]);\n        }\n\n        coercedValues[name] = coercedValue;\n      }\n    }\n  }\n\n  return coercedValues;\n}\n/**\n * Prepares an object map of argument values given a directive definition\n * and a AST node which may contain directives. Optionally also accepts a map\n * of variable values.\n *\n * If the directive does not exist on the node, returns undefined.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n\nexport function getDirectiveValues(directiveDef, node, variableValues) {\n  var directiveNode = node.directives && find(node.directives, function (directive) {\n    return directive.name.value === directiveDef.name;\n  });\n\n  if (directiveNode) {\n    return getArgumentValues(directiveDef, directiveNode, variableValues);\n  }\n}\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { forEach, isCollection } from 'iterall';\nimport { GraphQLError } from '../error/GraphQLError';\nimport { locatedError } from '../error/locatedError';\nimport inspect from '../jsutils/inspect';\nimport invariant from '../jsutils/invariant';\nimport isInvalid from '../jsutils/isInvalid';\nimport isNullish from '../jsutils/isNullish';\nimport isPromise from '../jsutils/isPromise';\nimport memoize3 from '../jsutils/memoize3';\nimport promiseForObject from '../jsutils/promiseForObject';\nimport promiseReduce from '../jsutils/promiseReduce';\nimport { getOperationRootType } from '../utilities/getOperationRootType';\nimport { typeFromAST } from '../utilities/typeFromAST';\nimport { Kind } from '../language/kinds';\nimport { getVariableValues, getArgumentValues, getDirectiveValues } from './values';\nimport { isObjectType, isAbstractType, isLeafType, isListType, isNonNullType } from '../type/definition';\nimport { SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef } from '../type/introspection';\nimport { GraphQLIncludeDirective, GraphQLSkipDirective } from '../type/directives';\nimport { assertValidSchema } from '../type/validate';\nexport function execute(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  /* eslint-enable no-redeclare */\n  // Extract arguments from object args if provided.\n  return arguments.length === 1 ? executeImpl(argsOrSchema.schema, argsOrSchema.document, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : executeImpl(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);\n}\n\nfunction executeImpl(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // If arguments are missing or incorrect, throw an error.\n  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  var exeContext = buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver); // Return early errors if execution context failed.\n\n  if (Array.isArray(exeContext)) {\n    return {\n      errors: exeContext\n    };\n  } // Return a Promise that will eventually resolve to the data described by\n  // The \"Response\" section of the GraphQL specification.\n  //\n  // If errors are encountered while executing a GraphQL field, only that\n  // field and its descendants will be omitted, and sibling fields will still\n  // be executed. An execution which encounters errors will still result in a\n  // resolved Promise.\n\n\n  var data = executeOperation(exeContext, exeContext.operation, rootValue);\n  return buildResponse(exeContext, data);\n}\n/**\n * Given a completed execution context and data, build the { errors, data }\n * response defined by the \"Response\" section of the GraphQL specification.\n */\n\n\nfunction buildResponse(exeContext, data) {\n  if (isPromise(data)) {\n    return data.then(function (resolved) {\n      return buildResponse(exeContext, resolved);\n    });\n  }\n\n  return exeContext.errors.length === 0 ? {\n    data: data\n  } : {\n    errors: exeContext.errors,\n    data: data\n  };\n}\n/**\n * Given a ResponsePath (found in the `path` entry in the information provided\n * as the last argument to a field resolver), return an Array of the path keys.\n */\n\n\nexport function responsePathAsArray(path) {\n  var flattened = [];\n  var curr = path;\n\n  while (curr) {\n    flattened.push(curr.key);\n    curr = curr.prev;\n  }\n\n  return flattened.reverse();\n}\n/**\n * Given a ResponsePath and a key, return a new ResponsePath containing the\n * new key.\n */\n\nexport function addPath(prev, key) {\n  return {\n    prev: prev,\n    key: key\n  };\n}\n/**\n * Essential assertions before executing to provide developer feedback for\n * improper use of the GraphQL library.\n */\n\nexport function assertValidExecutionArguments(schema, document, rawVariableValues) {\n  !document ? invariant(0, 'Must provide document') : void 0; // If the schema used for execution is invalid, throw an error.\n\n  assertValidSchema(schema); // Variables, if provided, must be an object.\n\n  !(!rawVariableValues || _typeof(rawVariableValues) === 'object') ? invariant(0, 'Variables must be provided as an Object where each property is a ' + 'variable value. Perhaps look to see if an unparsed JSON string ' + 'was provided.') : void 0;\n}\n/**\n * Constructs a ExecutionContext object from the arguments passed to\n * execute, which we will pass throughout the other execution methods.\n *\n * Throws a GraphQLError if a valid execution context cannot be created.\n */\n\nexport function buildExecutionContext(schema, document, rootValue, contextValue, rawVariableValues, operationName, fieldResolver) {\n  var errors = [];\n  var operation;\n  var hasMultipleAssumedOperations = false;\n  var fragments = Object.create(null);\n\n  for (var i = 0; i < document.definitions.length; i++) {\n    var definition = document.definitions[i];\n\n    switch (definition.kind) {\n      case Kind.OPERATION_DEFINITION:\n        if (!operationName && operation) {\n          hasMultipleAssumedOperations = true;\n        } else if (!operationName || definition.name && definition.name.value === operationName) {\n          operation = definition;\n        }\n\n        break;\n\n      case Kind.FRAGMENT_DEFINITION:\n        fragments[definition.name.value] = definition;\n        break;\n    }\n  }\n\n  if (!operation) {\n    if (operationName) {\n      errors.push(new GraphQLError(\"Unknown operation named \\\"\".concat(operationName, \"\\\".\")));\n    } else {\n      errors.push(new GraphQLError('Must provide an operation.'));\n    }\n  } else if (hasMultipleAssumedOperations) {\n    errors.push(new GraphQLError('Must provide operation name if query contains multiple operations.'));\n  }\n\n  var variableValues;\n\n  if (operation) {\n    var coercedVariableValues = getVariableValues(schema, operation.variableDefinitions || [], rawVariableValues || {});\n\n    if (coercedVariableValues.errors) {\n      errors.push.apply(errors, coercedVariableValues.errors);\n    } else {\n      variableValues = coercedVariableValues.coerced;\n    }\n  }\n\n  if (errors.length !== 0) {\n    return errors;\n  }\n\n  !operation ? invariant(0, 'Has operation if no errors.') : void 0;\n  !variableValues ? invariant(0, 'Has variables if no errors.') : void 0;\n  return {\n    schema: schema,\n    fragments: fragments,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    operation: operation,\n    variableValues: variableValues,\n    fieldResolver: fieldResolver || defaultFieldResolver,\n    errors: errors\n  };\n}\n/**\n * Implements the \"Evaluating operations\" section of the spec.\n */\n\nfunction executeOperation(exeContext, operation, rootValue) {\n  var type = getOperationRootType(exeContext.schema, operation);\n  var fields = collectFields(exeContext, type, operation.selectionSet, Object.create(null), Object.create(null));\n  var path = undefined; // Errors from sub-fields of a NonNull type may propagate to the top level,\n  // at which point we still log the error and null the parent field, which\n  // in this case is the entire response.\n  //\n  // Similar to completeValueCatchingError.\n\n  try {\n    var result = operation.operation === 'mutation' ? executeFieldsSerially(exeContext, type, rootValue, path, fields) : executeFields(exeContext, type, rootValue, path, fields);\n\n    if (isPromise(result)) {\n      return result.then(undefined, function (error) {\n        exeContext.errors.push(error);\n        return Promise.resolve(null);\n      });\n    }\n\n    return result;\n  } catch (error) {\n    exeContext.errors.push(error);\n    return null;\n  }\n}\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"write\" mode.\n */\n\n\nfunction executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {\n  return promiseReduce(Object.keys(fields), function (results, responseName) {\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n\n    if (result === undefined) {\n      return results;\n    }\n\n    if (isPromise(result)) {\n      return result.then(function (resolvedResult) {\n        results[responseName] = resolvedResult;\n        return results;\n      });\n    }\n\n    results[responseName] = result;\n    return results;\n  }, Object.create(null));\n}\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"read\" mode.\n */\n\n\nfunction executeFields(exeContext, parentType, sourceValue, path, fields) {\n  var results = Object.create(null);\n  var containsPromise = false;\n\n  for (var i = 0, keys = Object.keys(fields); i < keys.length; ++i) {\n    var responseName = keys[i];\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n\n    if (result !== undefined) {\n      results[responseName] = result;\n\n      if (!containsPromise && isPromise(result)) {\n        containsPromise = true;\n      }\n    }\n  } // If there are no promises, we can just return the object\n\n\n  if (!containsPromise) {\n    return results;\n  } // Otherwise, results is a map from field name to the result of resolving that\n  // field, which is possibly a promise. Return a promise that will return this\n  // same map, but with any promises replaced with the values they resolved to.\n\n\n  return promiseForObject(results);\n}\n/**\n * Given a selectionSet, adds all of the fields in that selection to\n * the passed in map of fields, and returns it at the end.\n *\n * CollectFields requires the \"runtime type\" of an object. For a field which\n * returns an Interface or Union type, the \"runtime type\" will be the actual\n * Object type returned by that field.\n */\n\n\nexport function collectFields(exeContext, runtimeType, selectionSet, fields, visitedFragmentNames) {\n  for (var i = 0; i < selectionSet.selections.length; i++) {\n    var selection = selectionSet.selections[i];\n\n    switch (selection.kind) {\n      case Kind.FIELD:\n        if (!shouldIncludeNode(exeContext, selection)) {\n          continue;\n        }\n\n        var name = getFieldEntryKey(selection);\n\n        if (!fields[name]) {\n          fields[name] = [];\n        }\n\n        fields[name].push(selection);\n        break;\n\n      case Kind.INLINE_FRAGMENT:\n        if (!shouldIncludeNode(exeContext, selection) || !doesFragmentConditionMatch(exeContext, selection, runtimeType)) {\n          continue;\n        }\n\n        collectFields(exeContext, runtimeType, selection.selectionSet, fields, visitedFragmentNames);\n        break;\n\n      case Kind.FRAGMENT_SPREAD:\n        var fragName = selection.name.value;\n\n        if (visitedFragmentNames[fragName] || !shouldIncludeNode(exeContext, selection)) {\n          continue;\n        }\n\n        visitedFragmentNames[fragName] = true;\n        var fragment = exeContext.fragments[fragName];\n\n        if (!fragment || !doesFragmentConditionMatch(exeContext, fragment, runtimeType)) {\n          continue;\n        }\n\n        collectFields(exeContext, runtimeType, fragment.selectionSet, fields, visitedFragmentNames);\n        break;\n    }\n  }\n\n  return fields;\n}\n/**\n * Determines if a field should be included based on the @include and @skip\n * directives, where @skip has higher precedence than @include.\n */\n\nfunction shouldIncludeNode(exeContext, node) {\n  var skip = getDirectiveValues(GraphQLSkipDirective, node, exeContext.variableValues);\n\n  if (skip && skip.if === true) {\n    return false;\n  }\n\n  var include = getDirectiveValues(GraphQLIncludeDirective, node, exeContext.variableValues);\n\n  if (include && include.if === false) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Determines if a fragment is applicable to the given type.\n */\n\n\nfunction doesFragmentConditionMatch(exeContext, fragment, type) {\n  var typeConditionNode = fragment.typeCondition;\n\n  if (!typeConditionNode) {\n    return true;\n  }\n\n  var conditionalType = typeFromAST(exeContext.schema, typeConditionNode);\n\n  if (conditionalType === type) {\n    return true;\n  }\n\n  if (isAbstractType(conditionalType)) {\n    return exeContext.schema.isPossibleType(conditionalType, type);\n  }\n\n  return false;\n}\n/**\n * Implements the logic to compute the key of a given field's entry\n */\n\n\nfunction getFieldEntryKey(node) {\n  return node.alias ? node.alias.value : node.name.value;\n}\n/**\n * Resolves the field on the given source object. In particular, this\n * figures out the value that the field returns by calling its resolve function,\n * then calls completeValue to complete promises, serialize scalars, or execute\n * the sub-selection-set for objects.\n */\n\n\nfunction resolveField(exeContext, parentType, source, fieldNodes, path) {\n  var fieldNode = fieldNodes[0];\n  var fieldName = fieldNode.name.value;\n  var fieldDef = getFieldDef(exeContext.schema, parentType, fieldName);\n\n  if (!fieldDef) {\n    return;\n  }\n\n  var resolveFn = fieldDef.resolve || exeContext.fieldResolver;\n  var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path); // Get the resolve function, regardless of if its result is normal\n  // or abrupt (error).\n\n  var result = resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info);\n  return completeValueCatchingError(exeContext, fieldDef.type, fieldNodes, info, path, result);\n}\n\nexport function buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {\n  // The resolve function's optional fourth argument is a collection of\n  // information about the current execution state.\n  return {\n    fieldName: fieldDef.name,\n    fieldNodes: fieldNodes,\n    returnType: fieldDef.type,\n    parentType: parentType,\n    path: path,\n    schema: exeContext.schema,\n    fragments: exeContext.fragments,\n    rootValue: exeContext.rootValue,\n    operation: exeContext.operation,\n    variableValues: exeContext.variableValues\n  };\n} // Isolates the \"ReturnOrAbrupt\" behavior to not de-opt the `resolveField`\n// function. Returns the result of resolveFn or the abrupt-return Error object.\n\nexport function resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info) {\n  try {\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    // TODO: find a way to memoize, in case this field is within a List type.\n    var args = getArgumentValues(fieldDef, fieldNodes[0], exeContext.variableValues); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    var _contextValue = exeContext.contextValue;\n    var result = resolveFn(source, args, _contextValue, info);\n    return isPromise(result) ? result.then(undefined, asErrorInstance) : result;\n  } catch (error) {\n    return asErrorInstance(error);\n  }\n} // Sometimes a non-error is thrown, wrap it as an Error instance to ensure a\n// consistent Error interface.\n\nfunction asErrorInstance(error) {\n  return error instanceof Error ? error : new Error(error || undefined);\n} // This is a small wrapper around completeValue which detects and logs errors\n// in the execution context.\n\n\nfunction completeValueCatchingError(exeContext, returnType, fieldNodes, info, path, result) {\n  try {\n    var completed;\n\n    if (isPromise(result)) {\n      completed = result.then(function (resolved) {\n        return completeValue(exeContext, returnType, fieldNodes, info, path, resolved);\n      });\n    } else {\n      completed = completeValue(exeContext, returnType, fieldNodes, info, path, result);\n    }\n\n    if (isPromise(completed)) {\n      // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n      // to take a second callback for the error case.\n      return completed.then(undefined, function (error) {\n        return handleFieldError(error, fieldNodes, path, returnType, exeContext);\n      });\n    }\n\n    return completed;\n  } catch (error) {\n    return handleFieldError(error, fieldNodes, path, returnType, exeContext);\n  }\n}\n\nfunction handleFieldError(rawError, fieldNodes, path, returnType, exeContext) {\n  var error = locatedError(asErrorInstance(rawError), fieldNodes, responsePathAsArray(path)); // If the field type is non-nullable, then it is resolved without any\n  // protection from errors, however it still properly locates the error.\n\n  if (isNonNullType(returnType)) {\n    throw error;\n  } // Otherwise, error protection is applied, logging the error and resolving\n  // a null value for this field if one is encountered.\n\n\n  exeContext.errors.push(error);\n  return null;\n}\n/**\n * Implements the instructions for completeValue as defined in the\n * \"Field entries\" section of the spec.\n *\n * If the field type is Non-Null, then this recursively completes the value\n * for the inner type. It throws a field error if that completion returns null,\n * as per the \"Nullability\" section of the spec.\n *\n * If the field type is a List, then this recursively completes the value\n * for the inner type on each item in the list.\n *\n * If the field type is a Scalar or Enum, ensures the completed value is a legal\n * value of the type by calling the `serialize` method of GraphQL type\n * definition.\n *\n * If the field is an abstract type, determine the runtime type of the value\n * and then complete based on that type\n *\n * Otherwise, the field type expects a sub-selection set, and will complete the\n * value by evaluating all sub-selections.\n */\n\n\nfunction completeValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If result is an Error, throw a located error.\n  if (result instanceof Error) {\n    throw result;\n  } // If field type is NonNull, complete for inner type, and throw field error\n  // if result is null.\n\n\n  if (isNonNullType(returnType)) {\n    var completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result);\n\n    if (completed === null) {\n      throw new Error(\"Cannot return null for non-nullable field \".concat(info.parentType.name, \".\").concat(info.fieldName, \".\"));\n    }\n\n    return completed;\n  } // If result value is null-ish (null, undefined, or NaN) then return null.\n\n\n  if (isNullish(result)) {\n    return null;\n  } // If field type is List, complete each item in the list with the inner type\n\n\n  if (isListType(returnType)) {\n    return completeListValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // If field type is a leaf type, Scalar or Enum, serialize to a valid value,\n  // returning null if serialization is not possible.\n\n\n  if (isLeafType(returnType)) {\n    return completeLeafValue(returnType, result);\n  } // If field type is an abstract type, Interface or Union, determine the\n  // runtime Object type and complete for that type.\n\n\n  if (isAbstractType(returnType)) {\n    return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // If field type is Object, execute and complete all sub-selections.\n\n\n  if (isObjectType(returnType)) {\n    return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // Not reachable. All possible output types have been considered.\n\n  /* istanbul ignore next */\n\n\n  throw new Error(\"Cannot complete value of unexpected type \\\"\".concat(inspect(returnType), \"\\\".\"));\n}\n/**\n * Complete a list value by completing each item in the list with the\n * inner type\n */\n\n\nfunction completeListValue(exeContext, returnType, fieldNodes, info, path, result) {\n  !isCollection(result) ? invariant(0, \"Expected Iterable, but did not find one for field \".concat(info.parentType.name, \".\").concat(info.fieldName, \".\")) : void 0; // This is specified as a simple map, however we're optimizing the path\n  // where the list contains no Promises by avoiding creating another Promise.\n\n  var itemType = returnType.ofType;\n  var containsPromise = false;\n  var completedResults = [];\n  forEach(result, function (item, index) {\n    // No need to modify the info object containing the path,\n    // since from here on it is not ever accessed by resolver functions.\n    var fieldPath = addPath(path, index);\n    var completedItem = completeValueCatchingError(exeContext, itemType, fieldNodes, info, fieldPath, item);\n\n    if (!containsPromise && isPromise(completedItem)) {\n      containsPromise = true;\n    }\n\n    completedResults.push(completedItem);\n  });\n  return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n/**\n * Complete a Scalar or Enum by serializing to a valid value, returning\n * null if serialization is not possible.\n */\n\n\nfunction completeLeafValue(returnType, result) {\n  !returnType.serialize ? invariant(0, 'Missing serialize method on type') : void 0;\n  var serializedResult = returnType.serialize(result);\n\n  if (isInvalid(serializedResult)) {\n    throw new Error(\"Expected a value of type \\\"\".concat(inspect(returnType), \"\\\" but \") + \"received: \".concat(inspect(result)));\n  }\n\n  return serializedResult;\n}\n/**\n * Complete a value of an abstract type by determining the runtime object type\n * of that value, then complete the value for that type.\n */\n\n\nfunction completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result) {\n  var runtimeType = returnType.resolveType ? returnType.resolveType(result, exeContext.contextValue, info) : defaultResolveTypeFn(result, exeContext.contextValue, info, returnType);\n\n  if (isPromise(runtimeType)) {\n    return runtimeType.then(function (resolvedRuntimeType) {\n      return completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n    });\n  }\n\n  return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n}\n\nfunction ensureValidRuntimeType(runtimeTypeOrName, exeContext, returnType, fieldNodes, info, result) {\n  var runtimeType = typeof runtimeTypeOrName === 'string' ? exeContext.schema.getType(runtimeTypeOrName) : runtimeTypeOrName;\n\n  if (!isObjectType(runtimeType)) {\n    throw new GraphQLError(\"Abstract type \".concat(returnType.name, \" must resolve to an Object type at \") + \"runtime for field \".concat(info.parentType.name, \".\").concat(info.fieldName, \" with \") + \"value \".concat(inspect(result), \", received \\\"\").concat(inspect(runtimeType), \"\\\". \") + \"Either the \".concat(returnType.name, \" type should provide a \\\"resolveType\\\" \") + 'function or each possible type should provide an \"isTypeOf\" function.', fieldNodes);\n  }\n\n  if (!exeContext.schema.isPossibleType(returnType, runtimeType)) {\n    throw new GraphQLError(\"Runtime Object type \\\"\".concat(runtimeType.name, \"\\\" is not a possible type \") + \"for \\\"\".concat(returnType.name, \"\\\".\"), fieldNodes);\n  }\n\n  return runtimeType;\n}\n/**\n * Complete an Object value by executing all sub-selections.\n */\n\n\nfunction completeObjectValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If there is an isTypeOf predicate function, call it with the\n  // current result. If isTypeOf returns false, then raise an error rather\n  // than continuing execution.\n  if (returnType.isTypeOf) {\n    var isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);\n\n    if (isPromise(isTypeOf)) {\n      return isTypeOf.then(function (resolvedIsTypeOf) {\n        if (!resolvedIsTypeOf) {\n          throw invalidReturnTypeError(returnType, result, fieldNodes);\n        }\n\n        return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result);\n      });\n    }\n\n    if (!isTypeOf) {\n      throw invalidReturnTypeError(returnType, result, fieldNodes);\n    }\n  }\n\n  return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result);\n}\n\nfunction invalidReturnTypeError(returnType, result, fieldNodes) {\n  return new GraphQLError(\"Expected value of type \\\"\".concat(returnType.name, \"\\\" but got: \").concat(inspect(result), \".\"), fieldNodes);\n}\n\nfunction collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result) {\n  // Collect sub-fields to execute to complete this value.\n  var subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes);\n  return executeFields(exeContext, returnType, result, path, subFieldNodes);\n}\n/**\n * A memoized collection of relevant subfields with regard to the return\n * type. Memoizing ensures the subfields are not repeatedly calculated, which\n * saves overhead when resolving lists of values.\n */\n\n\nvar collectSubfields = memoize3(_collectSubfields);\n\nfunction _collectSubfields(exeContext, returnType, fieldNodes) {\n  var subFieldNodes = Object.create(null);\n  var visitedFragmentNames = Object.create(null);\n\n  for (var i = 0; i < fieldNodes.length; i++) {\n    var selectionSet = fieldNodes[i].selectionSet;\n\n    if (selectionSet) {\n      subFieldNodes = collectFields(exeContext, returnType, selectionSet, subFieldNodes, visitedFragmentNames);\n    }\n  }\n\n  return subFieldNodes;\n}\n/**\n * If a resolveType function is not given, then a default resolve behavior is\n * used which attempts two strategies:\n *\n * First, See if the provided value has a `__typename` field defined, if so, use\n * that value as name of the resolved type.\n *\n * Otherwise, test each possible type for the abstract type by calling\n * isTypeOf for the object being coerced, returning the first type that matches.\n */\n\n\nfunction defaultResolveTypeFn(value, contextValue, info, abstractType) {\n  // First, look for `__typename`.\n  if (value !== null && _typeof(value) === 'object' && typeof value.__typename === 'string') {\n    return value.__typename;\n  } // Otherwise, test each possible type.\n\n\n  var possibleTypes = info.schema.getPossibleTypes(abstractType);\n  var promisedIsTypeOfResults = [];\n\n  for (var i = 0; i < possibleTypes.length; i++) {\n    var type = possibleTypes[i];\n\n    if (type.isTypeOf) {\n      var isTypeOfResult = type.isTypeOf(value, contextValue, info);\n\n      if (isPromise(isTypeOfResult)) {\n        promisedIsTypeOfResults[i] = isTypeOfResult;\n      } else if (isTypeOfResult) {\n        return type;\n      }\n    }\n  }\n\n  if (promisedIsTypeOfResults.length) {\n    return Promise.all(promisedIsTypeOfResults).then(function (isTypeOfResults) {\n      for (var _i = 0; _i < isTypeOfResults.length; _i++) {\n        if (isTypeOfResults[_i]) {\n          return possibleTypes[_i];\n        }\n      }\n    });\n  }\n}\n/**\n * If a resolve function is not given, then a default resolve behavior is used\n * which takes the property of the source object of the same name as the field\n * and returns it as the result, or if it's a function, returns the result\n * of calling that function while passing along args and context value.\n */\n\n\nexport var defaultFieldResolver = function defaultFieldResolver(source, args, contextValue, info) {\n  // ensure source is a value for which property access is acceptable.\n  if (_typeof(source) === 'object' || typeof source === 'function') {\n    var property = source[info.fieldName];\n\n    if (typeof property === 'function') {\n      return source[info.fieldName](args, contextValue, info);\n    }\n\n    return property;\n  }\n};\n/**\n * This method looks up the field on the given type definition.\n * It has special casing for the two introspection fields, __schema\n * and __typename. __typename is special because it can always be\n * queried as a field, even in situations where no other fields\n * are allowed, like on a Union. __schema could get automatically\n * added to the query type, but that would require mutating type\n * definitions, which would cause issues.\n */\n\nexport function getFieldDef(schema, parentType, fieldName) {\n  if (fieldName === SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return SchemaMetaFieldDef;\n  } else if (fieldName === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return TypeMetaFieldDef;\n  } else if (fieldName === TypeNameMetaFieldDef.name) {\n    return TypeNameMetaFieldDef;\n  }\n\n  return parentType.getFields()[fieldName];\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { validateSchema } from './type/validate';\nimport { parse } from './language/parser';\nimport { validate } from './validation/validate';\nimport { execute } from './execution/execute';\nexport function graphql(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  var _arguments = arguments;\n\n  /* eslint-enable no-redeclare */\n  // Always return a Promise for a consistent API.\n  return new Promise(function (resolve) {\n    return resolve( // Extract arguments from object args if provided.\n    _arguments.length === 1 ? graphqlImpl(argsOrSchema.schema, argsOrSchema.source, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : graphqlImpl(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver));\n  });\n}\n/**\n * The graphqlSync function also fulfills GraphQL operations by parsing,\n * validating, and executing a GraphQL document along side a GraphQL schema.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */\n\nexport function graphqlSync(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  /* eslint-enable no-redeclare */\n  // Extract arguments from object args if provided.\n  var result = arguments.length === 1 ? graphqlImpl(argsOrSchema.schema, argsOrSchema.source, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : graphqlImpl(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver); // Assert that the execution was synchronous.\n\n  if (result.then) {\n    throw new Error('GraphQL execution failed to complete synchronously.');\n  }\n\n  return result;\n}\n\nfunction graphqlImpl(schema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // Validate Schema\n  var schemaValidationErrors = validateSchema(schema);\n\n  if (schemaValidationErrors.length > 0) {\n    return {\n      errors: schemaValidationErrors\n    };\n  } // Parse\n\n\n  var document;\n\n  try {\n    document = parse(source);\n  } catch (syntaxError) {\n    return {\n      errors: [syntaxError]\n    };\n  } // Validate\n\n\n  var validationErrors = validate(schema, document);\n\n  if (validationErrors.length > 0) {\n    return {\n      errors: validationErrors\n    };\n  } // Execute\n\n\n  return execute(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nexport { // Predicate\nisSchema, // GraphQL Schema definition\nGraphQLSchema } from './schema';\nexport { // Predicates\nisType, isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, isListType, isNonNullType, isInputType, isOutputType, isLeafType, isCompositeType, isAbstractType, isWrappingType, isNullableType, isNamedType, isRequiredArgument, isRequiredInputField, // Assertions\nassertType, assertScalarType, assertObjectType, assertInterfaceType, assertUnionType, assertEnumType, assertInputObjectType, assertListType, assertNonNullType, assertInputType, assertOutputType, assertLeafType, assertCompositeType, assertAbstractType, assertWrappingType, assertNullableType, assertNamedType, // Un-modifiers\ngetNullableType, getNamedType, // Definitions\nGraphQLScalarType, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType, // Type Wrappers\nGraphQLList, GraphQLNonNull } from './definition';\nexport { // Predicate\nisDirective, // Directives Definition\nGraphQLDirective, // Built-in Directives defined by the Spec\nisSpecifiedDirective, specifiedDirectives, GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective, // Constant Deprecation Reason\nDEFAULT_DEPRECATION_REASON } from './directives';\n// Common built-in scalar instances.\nexport { isSpecifiedScalarType, specifiedScalarTypes, GraphQLInt, GraphQLFloat, GraphQLString, GraphQLBoolean, GraphQLID } from './scalars';\nexport { // \"Enum\" of Type Kinds\nTypeKind, // GraphQL Types for introspection.\nisIntrospectionType, introspectionTypes, __Schema, __Directive, __DirectiveLocation, __Type, __Field, __InputValue, __EnumValue, __TypeKind, // Meta-field definitions.\nSchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef } from './introspection';\nexport { validateSchema, assertValidSchema } from './validate';","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source, position) {\n  var lineRegexp = /\\r\\n|[\\n\\r]/g;\n  var line = 1;\n  var column = position + 1;\n  var match;\n\n  while ((match = lineRegexp.exec(source.body)) && match.index < position) {\n    line += 1;\n    column = position + 1 - (match.index + match[0].length);\n  }\n\n  return {\n    line: line,\n    column: column\n  };\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nexport { getLocation } from './location';\nexport { Kind } from './kinds';\nexport { createLexer, TokenKind } from './lexer';\nexport { parse, parseValue, parseType } from './parser';\nexport { print } from './printer';\nexport { Source } from './source';\nexport { visit, visitInParallel, visitWithTypeInfo, getVisitFn, BREAK } from './visitor';\nexport { isDefinitionNode, isExecutableDefinitionNode, isSelectionNode, isValueNode, isTypeNode, isTypeSystemDefinitionNode, isTypeDefinitionNode, isTypeSystemExtensionNode, isTypeExtensionNode } from './predicates';\nexport { DirectiveLocation } from './directiveLocation';","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nexport { execute, defaultFieldResolver, responsePathAsArray } from './execute';\nexport { getDirectiveValues } from './values';","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Copyright (c) 2017-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { $$asyncIterator, getAsyncIterator } from 'iterall';\n\n/**\n * Given an AsyncIterable and a callback function, return an AsyncIterator\n * which produces values mapped via calling the callback function.\n */\nexport default function mapAsyncIterator(iterable, callback, rejectCallback) {\n  var iterator = getAsyncIterator(iterable);\n  var $return;\n  var abruptClose; // $FlowFixMe(>=0.68.0)\n\n  if (typeof iterator.return === 'function') {\n    $return = iterator.return;\n\n    abruptClose = function abruptClose(error) {\n      var rethrow = function rethrow() {\n        return Promise.reject(error);\n      };\n\n      return $return.call(iterator).then(rethrow, rethrow);\n    };\n  }\n\n  function mapResult(result) {\n    return result.done ? result : asyncMapValue(result.value, callback).then(iteratorResult, abruptClose);\n  }\n\n  var mapReject;\n\n  if (rejectCallback) {\n    // Capture rejectCallback to ensure it cannot be null.\n    var reject = rejectCallback;\n\n    mapReject = function mapReject(error) {\n      return asyncMapValue(error, reject).then(iteratorResult, abruptClose);\n    };\n  }\n  /* TODO: Flow doesn't support symbols as keys:\n     https://github.com/facebook/flow/issues/3258 */\n\n\n  return _defineProperty({\n    next: function next() {\n      return iterator.next().then(mapResult, mapReject);\n    },\n    return: function _return() {\n      return $return ? $return.call(iterator).then(mapResult, mapReject) : Promise.resolve({\n        value: undefined,\n        done: true\n      });\n    },\n    throw: function _throw(error) {\n      // $FlowFixMe(>=0.68.0)\n      if (typeof iterator.throw === 'function') {\n        return iterator.throw(error).then(mapResult, mapReject);\n      }\n\n      return Promise.reject(error).catch(abruptClose);\n    }\n  }, $$asyncIterator, function () {\n    return this;\n  });\n}\n\nfunction asyncMapValue(value, callback) {\n  return new Promise(function (resolve) {\n    return resolve(callback(value));\n  });\n}\n\nfunction iteratorResult(value) {\n  return {\n    value: value,\n    done: false\n  };\n}","/**\n * Copyright (c) 2017-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { isAsyncIterable } from 'iterall';\nimport inspect from '../jsutils/inspect';\nimport { GraphQLError } from '../error/GraphQLError';\nimport { locatedError } from '../error/locatedError';\nimport { addPath, assertValidExecutionArguments, buildExecutionContext, buildResolveInfo, collectFields, execute, getFieldDef, resolveFieldValueOrError, responsePathAsArray } from '../execution/execute';\nimport mapAsyncIterator from './mapAsyncIterator';\nimport { getOperationRootType } from '../utilities/getOperationRootType';\n/**\n * Implements the \"Subscribe\" algorithm described in the GraphQL specification.\n *\n * Returns a Promise which resolves to either an AsyncIterator (if successful)\n * or an ExecutionResult (client error). The promise will be rejected if a\n * server error occurs.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to an AsyncIterator, which\n * yields a stream of ExecutionResults representing the response stream.\n *\n * Accepts either an object with named arguments, or individual arguments.\n */\n\nexport function subscribe(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver) {\n  /* eslint-enable no-redeclare */\n  // Extract arguments from object args if provided.\n  return arguments.length === 1 ? subscribeImpl(argsOrSchema.schema, argsOrSchema.document, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver, argsOrSchema.subscribeFieldResolver) : subscribeImpl(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver);\n}\n/**\n * This function checks if the error is a GraphQLError. If it is, report it as\n * an ExecutionResult, containing only errors and no data. Otherwise treat the\n * error as a system-class error and re-throw it.\n */\n\nfunction reportGraphQLError(error) {\n  if (error instanceof GraphQLError) {\n    return {\n      errors: [error]\n    };\n  }\n\n  throw error;\n}\n\nfunction subscribeImpl(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver) {\n  var sourcePromise = createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, subscribeFieldResolver); // For each payload yielded from a subscription, map it over the normal\n  // GraphQL `execute` function, with `payload` as the rootValue.\n  // This implements the \"MapSourceToResponseEvent\" algorithm described in\n  // the GraphQL specification. The `execute` function provides the\n  // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n  // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n\n  var mapSourceToResponse = function mapSourceToResponse(payload) {\n    return execute(schema, document, payload, contextValue, variableValues, operationName, fieldResolver);\n  }; // Resolve the Source Stream, then map every source value to a\n  // ExecutionResult value as described above.\n\n\n  return sourcePromise.then(function (resultOrStream) {\n    return (// Note: Flow can't refine isAsyncIterable, so explicit casts are used.\n      isAsyncIterable(resultOrStream) ? mapAsyncIterator(resultOrStream, mapSourceToResponse, reportGraphQLError) : resultOrStream\n    );\n  }, reportGraphQLError);\n}\n/**\n * Implements the \"CreateSourceEventStream\" algorithm described in the\n * GraphQL specification, resolving the subscription source event stream.\n *\n * Returns a Promise<AsyncIterable>.\n *\n * If the client-provided invalid arguments, the source stream could not be\n * created, or the resolver did not return an AsyncIterable, this function will\n * will throw an error, which should be caught and handled by the caller.\n *\n * A Source Event Stream represents a sequence of events, each of which triggers\n * a GraphQL execution for that event.\n *\n * This may be useful when hosting the stateful subscription service in a\n * different process or machine than the stateless GraphQL execution engine,\n * or otherwise separating these two steps. For more on this, see the\n * \"Supporting Subscriptions at Scale\" information in the GraphQL specification.\n */\n\n\nexport function createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // If arguments are missing or incorrectly typed, this is an internal\n  // developer mistake which should throw an early error.\n  assertValidExecutionArguments(schema, document, variableValues);\n\n  try {\n    // If a valid context cannot be created due to incorrect arguments,\n    // this will throw an error.\n    var exeContext = buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver); // Return early errors if execution context failed.\n\n    if (Array.isArray(exeContext)) {\n      return Promise.resolve({\n        errors: exeContext\n      });\n    }\n\n    var type = getOperationRootType(schema, exeContext.operation);\n    var fields = collectFields(exeContext, type, exeContext.operation.selectionSet, Object.create(null), Object.create(null));\n    var responseNames = Object.keys(fields);\n    var responseName = responseNames[0];\n    var fieldNodes = fields[responseName];\n    var fieldNode = fieldNodes[0];\n    var fieldName = fieldNode.name.value;\n    var fieldDef = getFieldDef(schema, type, fieldName);\n\n    if (!fieldDef) {\n      throw new GraphQLError(\"The subscription field \\\"\".concat(fieldName, \"\\\" is not defined.\"), fieldNodes);\n    } // Call the `subscribe()` resolver or the default resolver to produce an\n    // AsyncIterable yielding raw payloads.\n\n\n    var resolveFn = fieldDef.subscribe || exeContext.fieldResolver;\n    var path = addPath(undefined, responseName);\n    var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, type, path); // resolveFieldValueOrError implements the \"ResolveFieldEventStream\"\n    // algorithm from GraphQL specification. It differs from\n    // \"ResolveFieldValue\" due to providing a different `resolveFn`.\n\n    var result = resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, rootValue, info); // Coerce to Promise for easier error handling and consistent return type.\n\n    return Promise.resolve(result).then(function (eventStream) {\n      // If eventStream is an Error, rethrow a located error.\n      if (eventStream instanceof Error) {\n        throw locatedError(eventStream, fieldNodes, responsePathAsArray(path));\n      } // Assert field returned an event stream, otherwise yield an error.\n\n\n      if (isAsyncIterable(eventStream)) {\n        // Note: isAsyncIterable above ensures this will be correct.\n        return eventStream;\n      }\n\n      throw new Error('Subscription field must return Async Iterable. Received: ' + inspect(eventStream));\n    });\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}","/**\n * Copyright (c) 2017-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nexport { subscribe, createSourceEventStream } from './subscribe';","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nexport { validate } from './validate';\nexport { ValidationContext } from './ValidationContext';\nexport { specifiedRules } from './specifiedRules'; // Spec Section: \"Field Selections on Objects, Interfaces, and Unions Types\"\n\nexport { FieldsOnCorrectType as FieldsOnCorrectTypeRule } from './rules/FieldsOnCorrectType'; // Spec Section: \"Fragments on Composite Types\"\n\nexport { FragmentsOnCompositeTypes as FragmentsOnCompositeTypesRule } from './rules/FragmentsOnCompositeTypes'; // Spec Section: \"Argument Names\"\n\nexport { KnownArgumentNames as KnownArgumentNamesRule } from './rules/KnownArgumentNames'; // Spec Section: \"Directives Are Defined\"\n\nexport { KnownDirectives as KnownDirectivesRule } from './rules/KnownDirectives'; // Spec Section: \"Fragment spread target defined\"\n\nexport { KnownFragmentNames as KnownFragmentNamesRule } from './rules/KnownFragmentNames'; // Spec Section: \"Fragment Spread Type Existence\"\n\nexport { KnownTypeNames as KnownTypeNamesRule } from './rules/KnownTypeNames'; // Spec Section: \"Lone Anonymous Operation\"\n\nexport { LoneAnonymousOperation as LoneAnonymousOperationRule } from './rules/LoneAnonymousOperation'; // Spec Section: \"Fragments must not form cycles\"\n\nexport { NoFragmentCycles as NoFragmentCyclesRule } from './rules/NoFragmentCycles'; // Spec Section: \"All Variable Used Defined\"\n\nexport { NoUndefinedVariables as NoUndefinedVariablesRule } from './rules/NoUndefinedVariables'; // Spec Section: \"Fragments must be used\"\n\nexport { NoUnusedFragments as NoUnusedFragmentsRule } from './rules/NoUnusedFragments'; // Spec Section: \"All Variables Used\"\n\nexport { NoUnusedVariables as NoUnusedVariablesRule } from './rules/NoUnusedVariables'; // Spec Section: \"Field Selection Merging\"\n\nexport { OverlappingFieldsCanBeMerged as OverlappingFieldsCanBeMergedRule } from './rules/OverlappingFieldsCanBeMerged'; // Spec Section: \"Fragment spread is possible\"\n\nexport { PossibleFragmentSpreads as PossibleFragmentSpreadsRule } from './rules/PossibleFragmentSpreads'; // Spec Section: \"Argument Optionality\"\n\nexport { ProvidedRequiredArguments as ProvidedRequiredArgumentsRule } from './rules/ProvidedRequiredArguments'; // Spec Section: \"Leaf Field Selections\"\n\nexport { ScalarLeafs as ScalarLeafsRule } from './rules/ScalarLeafs'; // Spec Section: \"Subscriptions with Single Root Field\"\n\nexport { SingleFieldSubscriptions as SingleFieldSubscriptionsRule } from './rules/SingleFieldSubscriptions'; // Spec Section: \"Argument Uniqueness\"\n\nexport { UniqueArgumentNames as UniqueArgumentNamesRule } from './rules/UniqueArgumentNames'; // Spec Section: \"Directives Are Unique Per Location\"\n\nexport { UniqueDirectivesPerLocation as UniqueDirectivesPerLocationRule } from './rules/UniqueDirectivesPerLocation'; // Spec Section: \"Fragment Name Uniqueness\"\n\nexport { UniqueFragmentNames as UniqueFragmentNamesRule } from './rules/UniqueFragmentNames'; // Spec Section: \"Input Object Field Uniqueness\"\n\nexport { UniqueInputFieldNames as UniqueInputFieldNamesRule } from './rules/UniqueInputFieldNames'; // Spec Section: \"Operation Name Uniqueness\"\n\nexport { UniqueOperationNames as UniqueOperationNamesRule } from './rules/UniqueOperationNames'; // Spec Section: \"Variable Uniqueness\"\n\nexport { UniqueVariableNames as UniqueVariableNamesRule } from './rules/UniqueVariableNames'; // Spec Section: \"Values Type Correctness\"\n\nexport { ValuesOfCorrectType as ValuesOfCorrectTypeRule } from './rules/ValuesOfCorrectType'; // Spec Section: \"Variables are Input Types\"\n\nexport { VariablesAreInputTypes as VariablesAreInputTypesRule } from './rules/VariablesAreInputTypes'; // Spec Section: \"All Variable Usages Are Allowed\"\n\nexport { VariablesInAllowedPosition as VariablesInAllowedPositionRule } from './rules/VariablesInAllowedPosition';","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nexport { GraphQLError } from './GraphQLError';\nexport { syntaxError } from './syntaxError';\nexport { locatedError } from './locatedError';\nexport { printError } from './printError';\nexport { formatError } from './formatError';","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nexport function getIntrospectionQuery(options) {\n  var descriptions = !(options && options.descriptions === false);\n  return \"\\n    query IntrospectionQuery {\\n      __schema {\\n        queryType { name }\\n        mutationType { name }\\n        subscriptionType { name }\\n        types {\\n          ...FullType\\n        }\\n        directives {\\n          name\\n          \".concat(descriptions ? 'description' : '', \"\\n          locations\\n          args {\\n            ...InputValue\\n          }\\n        }\\n      }\\n    }\\n\\n    fragment FullType on __Type {\\n      kind\\n      name\\n      \").concat(descriptions ? 'description' : '', \"\\n      fields(includeDeprecated: true) {\\n        name\\n        \").concat(descriptions ? 'description' : '', \"\\n        args {\\n          ...InputValue\\n        }\\n        type {\\n          ...TypeRef\\n        }\\n        isDeprecated\\n        deprecationReason\\n      }\\n      inputFields {\\n        ...InputValue\\n      }\\n      interfaces {\\n        ...TypeRef\\n      }\\n      enumValues(includeDeprecated: true) {\\n        name\\n        \").concat(descriptions ? 'description' : '', \"\\n        isDeprecated\\n        deprecationReason\\n      }\\n      possibleTypes {\\n        ...TypeRef\\n      }\\n    }\\n\\n    fragment InputValue on __InputValue {\\n      name\\n      \").concat(descriptions ? 'description' : '', \"\\n      type { ...TypeRef }\\n      defaultValue\\n    }\\n\\n    fragment TypeRef on __Type {\\n      kind\\n      name\\n      ofType {\\n        kind\\n        name\\n        ofType {\\n          kind\\n          name\\n          ofType {\\n            kind\\n            name\\n            ofType {\\n              kind\\n              name\\n              ofType {\\n                kind\\n                name\\n                ofType {\\n                  kind\\n                  name\\n                  ofType {\\n                    kind\\n                    name\\n                  }\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  \");\n}\n/**\n * Deprecated, call getIntrospectionQuery directly.\n *\n * This function will be removed in v15\n */\n\nexport var introspectionQuery = getIntrospectionQuery();","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { Kind } from '../language/kinds';\n\n/**\n * Returns an operation AST given a document AST and optionally an operation\n * name. If a name is not provided, an operation is only returned if only one is\n * provided in the document.\n */\nexport function getOperationAST(documentAST, operationName) {\n  var operation = null;\n\n  for (var i = 0; i < documentAST.definitions.length; i++) {\n    var definition = documentAST.definitions[i];\n\n    if (definition.kind === Kind.OPERATION_DEFINITION) {\n      if (!operationName) {\n        // If no operation name was provided, only return an Operation if there\n        // is one defined in the document. Upon encountering the second, return\n        // null.\n        if (operation) {\n          return null;\n        }\n\n        operation = definition;\n      } else if (definition.name && definition.name.value === operationName) {\n        return definition;\n      }\n    }\n  }\n\n  return operation;\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport invariant from '../jsutils/invariant';\nimport { getIntrospectionQuery } from './introspectionQuery';\nimport { execute } from '../execution/execute';\nimport { parse } from '../language/parser';\n\n/**\n * Build an IntrospectionQuery from a GraphQLSchema\n *\n * IntrospectionQuery is useful for utilities that care about type and field\n * relationships, but do not need to traverse through those relationships.\n *\n * This is the inverse of buildClientSchema. The primary use case is outside\n * of the server context, for instance when doing schema comparisons.\n */\nexport function introspectionFromSchema(schema, options) {\n  var queryAST = parse(getIntrospectionQuery(options));\n  var result = execute(schema, queryAST);\n  !(!result.then && !result.errors && result.data) ? invariant(0) : void 0;\n  return result.data;\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport inspect from '../jsutils/inspect';\nimport invariant from '../jsutils/invariant';\nimport keyMap from '../jsutils/keyMap';\nimport keyValMap from '../jsutils/keyValMap';\nimport { valueFromAST } from './valueFromAST';\nimport { parseValue } from '../language/parser';\nimport { GraphQLSchema } from '../type/schema';\nimport { isInputType, isOutputType, GraphQLScalarType, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType, GraphQLList, GraphQLNonNull, assertNullableType, assertObjectType, assertInterfaceType } from '../type/definition';\nimport { GraphQLDirective } from '../type/directives';\nimport { introspectionTypes, TypeKind } from '../type/introspection';\nimport { specifiedScalarTypes } from '../type/scalars';\n\n/**\n * Build a GraphQLSchema for use by client tools.\n *\n * Given the result of a client running the introspection query, creates and\n * returns a GraphQLSchema instance which can be then used with all graphql-js\n * tools, but cannot be used to execute a query, as introspection does not\n * represent the \"resolver\", \"parse\" or \"serialize\" functions or any other\n * server-internal mechanisms.\n *\n * This function expects a complete introspection result. Don't forget to check\n * the \"errors\" field of a server response before calling this function.\n */\nexport function buildClientSchema(introspection, options) {\n  // Get the schema from the introspection result.\n  var schemaIntrospection = introspection.__schema; // Converts the list of types into a keyMap based on the type names.\n\n  var typeIntrospectionMap = keyMap(schemaIntrospection.types, function (type) {\n    return type.name;\n  }); // A cache to use to store the actual GraphQLType definition objects by name.\n  // Initialize to the GraphQL built in scalars. All functions below are inline\n  // so that this type def cache is within the scope of the closure.\n\n  var typeDefCache = keyMap(specifiedScalarTypes.concat(introspectionTypes), function (type) {\n    return type.name;\n  }); // Given a type reference in introspection, return the GraphQLType instance.\n  // preferring cached instances before building new instances.\n\n  function getType(typeRef) {\n    if (typeRef.kind === TypeKind.LIST) {\n      var itemRef = typeRef.ofType;\n\n      if (!itemRef) {\n        throw new Error('Decorated type deeper than introspection query.');\n      }\n\n      return GraphQLList(getType(itemRef));\n    }\n\n    if (typeRef.kind === TypeKind.NON_NULL) {\n      var nullableRef = typeRef.ofType;\n\n      if (!nullableRef) {\n        throw new Error('Decorated type deeper than introspection query.');\n      }\n\n      var nullableType = getType(nullableRef);\n      return GraphQLNonNull(assertNullableType(nullableType));\n    }\n\n    if (!typeRef.name) {\n      throw new Error('Unknown type reference: ' + inspect(typeRef));\n    }\n\n    return getNamedType(typeRef.name);\n  }\n\n  function getNamedType(typeName) {\n    if (typeDefCache[typeName]) {\n      return typeDefCache[typeName];\n    }\n\n    var typeIntrospection = typeIntrospectionMap[typeName];\n\n    if (!typeIntrospection) {\n      throw new Error(\"Invalid or incomplete schema, unknown type: \".concat(typeName, \". Ensure \") + 'that a full introspection query is used in order to build a ' + 'client schema.');\n    }\n\n    var typeDef = buildType(typeIntrospection);\n    typeDefCache[typeName] = typeDef;\n    return typeDef;\n  }\n\n  function getInputType(typeRef) {\n    var type = getType(typeRef);\n    !isInputType(type) ? invariant(0, 'Introspection must provide input type for arguments.') : void 0;\n    return type;\n  }\n\n  function getOutputType(typeRef) {\n    var type = getType(typeRef);\n    !isOutputType(type) ? invariant(0, 'Introspection must provide output type for fields.') : void 0;\n    return type;\n  }\n\n  function getObjectType(typeRef) {\n    var type = getType(typeRef);\n    return assertObjectType(type);\n  }\n\n  function getInterfaceType(typeRef) {\n    var type = getType(typeRef);\n    return assertInterfaceType(type);\n  } // Given a type's introspection result, construct the correct\n  // GraphQLType instance.\n\n\n  function buildType(type) {\n    if (type && type.name && type.kind) {\n      switch (type.kind) {\n        case TypeKind.SCALAR:\n          return buildScalarDef(type);\n\n        case TypeKind.OBJECT:\n          return buildObjectDef(type);\n\n        case TypeKind.INTERFACE:\n          return buildInterfaceDef(type);\n\n        case TypeKind.UNION:\n          return buildUnionDef(type);\n\n        case TypeKind.ENUM:\n          return buildEnumDef(type);\n\n        case TypeKind.INPUT_OBJECT:\n          return buildInputObjectDef(type);\n      }\n    }\n\n    throw new Error('Invalid or incomplete introspection result. Ensure that a full ' + 'introspection query is used in order to build a client schema:' + inspect(type));\n  }\n\n  function buildScalarDef(scalarIntrospection) {\n    return new GraphQLScalarType({\n      name: scalarIntrospection.name,\n      description: scalarIntrospection.description,\n      serialize: function serialize(value) {\n        return value;\n      }\n    });\n  }\n\n  function buildObjectDef(objectIntrospection) {\n    if (!objectIntrospection.interfaces) {\n      throw new Error('Introspection result missing interfaces: ' + inspect(objectIntrospection));\n    }\n\n    return new GraphQLObjectType({\n      name: objectIntrospection.name,\n      description: objectIntrospection.description,\n      interfaces: function interfaces() {\n        return objectIntrospection.interfaces.map(getInterfaceType);\n      },\n      fields: function fields() {\n        return buildFieldDefMap(objectIntrospection);\n      }\n    });\n  }\n\n  function buildInterfaceDef(interfaceIntrospection) {\n    return new GraphQLInterfaceType({\n      name: interfaceIntrospection.name,\n      description: interfaceIntrospection.description,\n      fields: function fields() {\n        return buildFieldDefMap(interfaceIntrospection);\n      }\n    });\n  }\n\n  function buildUnionDef(unionIntrospection) {\n    if (!unionIntrospection.possibleTypes) {\n      throw new Error('Introspection result missing possibleTypes: ' + inspect(unionIntrospection));\n    }\n\n    return new GraphQLUnionType({\n      name: unionIntrospection.name,\n      description: unionIntrospection.description,\n      types: function types() {\n        return unionIntrospection.possibleTypes.map(getObjectType);\n      }\n    });\n  }\n\n  function buildEnumDef(enumIntrospection) {\n    if (!enumIntrospection.enumValues) {\n      throw new Error('Introspection result missing enumValues: ' + inspect(enumIntrospection));\n    }\n\n    return new GraphQLEnumType({\n      name: enumIntrospection.name,\n      description: enumIntrospection.description,\n      values: keyValMap(enumIntrospection.enumValues, function (valueIntrospection) {\n        return valueIntrospection.name;\n      }, function (valueIntrospection) {\n        return {\n          description: valueIntrospection.description,\n          deprecationReason: valueIntrospection.deprecationReason\n        };\n      })\n    });\n  }\n\n  function buildInputObjectDef(inputObjectIntrospection) {\n    if (!inputObjectIntrospection.inputFields) {\n      throw new Error('Introspection result missing inputFields: ' + inspect(inputObjectIntrospection));\n    }\n\n    return new GraphQLInputObjectType({\n      name: inputObjectIntrospection.name,\n      description: inputObjectIntrospection.description,\n      fields: function fields() {\n        return buildInputValueDefMap(inputObjectIntrospection.inputFields);\n      }\n    });\n  }\n\n  function buildFieldDefMap(typeIntrospection) {\n    if (!typeIntrospection.fields) {\n      throw new Error('Introspection result missing fields: ' + inspect(typeIntrospection));\n    }\n\n    return keyValMap(typeIntrospection.fields, function (fieldIntrospection) {\n      return fieldIntrospection.name;\n    }, function (fieldIntrospection) {\n      if (!fieldIntrospection.args) {\n        throw new Error('Introspection result missing field args: ' + inspect(fieldIntrospection));\n      }\n\n      return {\n        description: fieldIntrospection.description,\n        deprecationReason: fieldIntrospection.deprecationReason,\n        type: getOutputType(fieldIntrospection.type),\n        args: buildInputValueDefMap(fieldIntrospection.args)\n      };\n    });\n  }\n\n  function buildInputValueDefMap(inputValueIntrospections) {\n    return keyValMap(inputValueIntrospections, function (inputValue) {\n      return inputValue.name;\n    }, buildInputValue);\n  }\n\n  function buildInputValue(inputValueIntrospection) {\n    var type = getInputType(inputValueIntrospection.type);\n    var defaultValue = inputValueIntrospection.defaultValue ? valueFromAST(parseValue(inputValueIntrospection.defaultValue), type) : undefined;\n    return {\n      description: inputValueIntrospection.description,\n      type: type,\n      defaultValue: defaultValue\n    };\n  }\n\n  function buildDirective(directiveIntrospection) {\n    if (!directiveIntrospection.args) {\n      throw new Error('Introspection result missing directive args: ' + inspect(directiveIntrospection));\n    }\n\n    if (!directiveIntrospection.locations) {\n      throw new Error('Introspection result missing directive locations: ' + inspect(directiveIntrospection));\n    }\n\n    return new GraphQLDirective({\n      name: directiveIntrospection.name,\n      description: directiveIntrospection.description,\n      locations: directiveIntrospection.locations.slice(),\n      args: buildInputValueDefMap(directiveIntrospection.args)\n    });\n  } // Iterate through all types, getting the type definition for each, ensuring\n  // that any type not directly referenced by a field will get created.\n\n\n  var types = schemaIntrospection.types.map(function (typeIntrospection) {\n    return getNamedType(typeIntrospection.name);\n  }); // Get the root Query, Mutation, and Subscription types.\n\n  var queryType = schemaIntrospection.queryType ? getObjectType(schemaIntrospection.queryType) : null;\n  var mutationType = schemaIntrospection.mutationType ? getObjectType(schemaIntrospection.mutationType) : null;\n  var subscriptionType = schemaIntrospection.subscriptionType ? getObjectType(schemaIntrospection.subscriptionType) : null; // Get the directives supported by Introspection, assuming empty-set if\n  // directives were not queried for.\n\n  var directives = schemaIntrospection.directives ? schemaIntrospection.directives.map(buildDirective) : []; // Then produce and return a Schema with these types.\n\n  return new GraphQLSchema({\n    query: queryType,\n    mutation: mutationType,\n    subscription: subscriptionType,\n    types: types,\n    directives: directives,\n    assumeValid: options && options.assumeValid,\n    allowedLegacyNames: options && options.allowedLegacyNames\n  });\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n */\nexport default function blockStringValue(rawString) {\n  // Expand a block string's raw value into independent lines.\n  var lines = rawString.split(/\\r\\n|[\\n\\r]/g); // Remove common indentation from all lines but first.\n\n  var commonIndent = null;\n\n  for (var i = 1; i < lines.length; i++) {\n    var line = lines[i];\n    var indent = leadingWhitespace(line);\n\n    if (indent < line.length && (commonIndent === null || indent < commonIndent)) {\n      commonIndent = indent;\n\n      if (commonIndent === 0) {\n        break;\n      }\n    }\n  }\n\n  if (commonIndent) {\n    for (var _i = 1; _i < lines.length; _i++) {\n      lines[_i] = lines[_i].slice(commonIndent);\n    }\n  } // Remove leading and trailing blank lines.\n\n\n  while (lines.length > 0 && isBlank(lines[0])) {\n    lines.shift();\n  }\n\n  while (lines.length > 0 && isBlank(lines[lines.length - 1])) {\n    lines.pop();\n  } // Return a string of the lines joined with U+000A.\n\n\n  return lines.join('\\n');\n}\n\nfunction leadingWhitespace(str) {\n  var i = 0;\n\n  while (i < str.length && (str[i] === ' ' || str[i] === '\\t')) {\n    i++;\n  }\n\n  return i;\n}\n\nfunction isBlank(str) {\n  return leadingWhitespace(str) === str.length;\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { syntaxError } from '../error';\nimport blockStringValue from './blockStringValue';\n/**\n * Given a Source object, this returns a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport function createLexer(source, options) {\n  var startOfFileToken = new Tok(TokenKind.SOF, 0, 0, 0, 0, null);\n  var lexer = {\n    source: source,\n    options: options,\n    lastToken: startOfFileToken,\n    token: startOfFileToken,\n    line: 1,\n    lineStart: 0,\n    advance: advanceLexer,\n    lookahead: lookahead\n  };\n  return lexer;\n}\n\nfunction advanceLexer() {\n  this.lastToken = this.token;\n  var token = this.token = this.lookahead();\n  return token;\n}\n\nfunction lookahead() {\n  var token = this.token;\n\n  if (token.kind !== TokenKind.EOF) {\n    do {\n      // Note: next is only mutable during parsing, so we cast to allow this.\n      token = token.next || (token.next = readToken(this, token));\n    } while (token.kind === TokenKind.COMMENT);\n  }\n\n  return token;\n}\n/**\n * The return type of createLexer.\n */\n\n\n/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nexport var TokenKind = Object.freeze({\n  SOF: '<SOF>',\n  EOF: '<EOF>',\n  BANG: '!',\n  DOLLAR: '$',\n  AMP: '&',\n  PAREN_L: '(',\n  PAREN_R: ')',\n  SPREAD: '...',\n  COLON: ':',\n  EQUALS: '=',\n  AT: '@',\n  BRACKET_L: '[',\n  BRACKET_R: ']',\n  BRACE_L: '{',\n  PIPE: '|',\n  BRACE_R: '}',\n  NAME: 'Name',\n  INT: 'Int',\n  FLOAT: 'Float',\n  STRING: 'String',\n  BLOCK_STRING: 'BlockString',\n  COMMENT: 'Comment'\n});\n/**\n * The enum type representing the token kinds values.\n */\n\n/**\n * A helper function to describe a token as a string for debugging\n */\nexport function getTokenDesc(token) {\n  var value = token.value;\n  return value ? \"\".concat(token.kind, \" \\\"\").concat(value, \"\\\"\") : token.kind;\n}\nvar charCodeAt = String.prototype.charCodeAt;\nvar slice = String.prototype.slice;\n/**\n * Helper function for constructing the Token object.\n */\n\nfunction Tok(kind, start, end, line, column, prev, value) {\n  this.kind = kind;\n  this.start = start;\n  this.end = end;\n  this.line = line;\n  this.column = column;\n  this.value = value;\n  this.prev = prev;\n  this.next = null;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\nTok.prototype.toJSON = Tok.prototype.inspect = function toJSON() {\n  return {\n    kind: this.kind,\n    value: this.value,\n    line: this.line,\n    column: this.column\n  };\n};\n\nfunction printCharCode(code) {\n  return (// NaN/undefined represents access beyond the end of the file.\n    isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.\n    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.\n    \"\\\"\\\\u\".concat(('00' + code.toString(16).toUpperCase()).slice(-4), \"\\\"\")\n  );\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace and comments until it finds the next lexable\n * token, then lexes punctuators immediately or calls the appropriate helper\n * function for more complicated tokens.\n */\n\n\nfunction readToken(lexer, prev) {\n  var source = lexer.source;\n  var body = source.body;\n  var bodyLength = body.length;\n  var pos = positionAfterWhitespace(body, prev.end, lexer);\n  var line = lexer.line;\n  var col = 1 + pos - lexer.lineStart;\n\n  if (pos >= bodyLength) {\n    return new Tok(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);\n  }\n\n  var code = charCodeAt.call(body, pos); // SourceCharacter\n\n  switch (code) {\n    // !\n    case 33:\n      return new Tok(TokenKind.BANG, pos, pos + 1, line, col, prev);\n    // #\n\n    case 35:\n      return readComment(source, pos, line, col, prev);\n    // $\n\n    case 36:\n      return new Tok(TokenKind.DOLLAR, pos, pos + 1, line, col, prev);\n    // &\n\n    case 38:\n      return new Tok(TokenKind.AMP, pos, pos + 1, line, col, prev);\n    // (\n\n    case 40:\n      return new Tok(TokenKind.PAREN_L, pos, pos + 1, line, col, prev);\n    // )\n\n    case 41:\n      return new Tok(TokenKind.PAREN_R, pos, pos + 1, line, col, prev);\n    // .\n\n    case 46:\n      if (charCodeAt.call(body, pos + 1) === 46 && charCodeAt.call(body, pos + 2) === 46) {\n        return new Tok(TokenKind.SPREAD, pos, pos + 3, line, col, prev);\n      }\n\n      break;\n    // :\n\n    case 58:\n      return new Tok(TokenKind.COLON, pos, pos + 1, line, col, prev);\n    // =\n\n    case 61:\n      return new Tok(TokenKind.EQUALS, pos, pos + 1, line, col, prev);\n    // @\n\n    case 64:\n      return new Tok(TokenKind.AT, pos, pos + 1, line, col, prev);\n    // [\n\n    case 91:\n      return new Tok(TokenKind.BRACKET_L, pos, pos + 1, line, col, prev);\n    // ]\n\n    case 93:\n      return new Tok(TokenKind.BRACKET_R, pos, pos + 1, line, col, prev);\n    // {\n\n    case 123:\n      return new Tok(TokenKind.BRACE_L, pos, pos + 1, line, col, prev);\n    // |\n\n    case 124:\n      return new Tok(TokenKind.PIPE, pos, pos + 1, line, col, prev);\n    // }\n\n    case 125:\n      return new Tok(TokenKind.BRACE_R, pos, pos + 1, line, col, prev);\n    // A-Z _ a-z\n\n    case 65:\n    case 66:\n    case 67:\n    case 68:\n    case 69:\n    case 70:\n    case 71:\n    case 72:\n    case 73:\n    case 74:\n    case 75:\n    case 76:\n    case 77:\n    case 78:\n    case 79:\n    case 80:\n    case 81:\n    case 82:\n    case 83:\n    case 84:\n    case 85:\n    case 86:\n    case 87:\n    case 88:\n    case 89:\n    case 90:\n    case 95:\n    case 97:\n    case 98:\n    case 99:\n    case 100:\n    case 101:\n    case 102:\n    case 103:\n    case 104:\n    case 105:\n    case 106:\n    case 107:\n    case 108:\n    case 109:\n    case 110:\n    case 111:\n    case 112:\n    case 113:\n    case 114:\n    case 115:\n    case 116:\n    case 117:\n    case 118:\n    case 119:\n    case 120:\n    case 121:\n    case 122:\n      return readName(source, pos, line, col, prev);\n    // - 0-9\n\n    case 45:\n    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n      return readNumber(source, pos, code, line, col, prev);\n    // \"\n\n    case 34:\n      if (charCodeAt.call(body, pos + 1) === 34 && charCodeAt.call(body, pos + 2) === 34) {\n        return readBlockString(source, pos, line, col, prev);\n      }\n\n      return readString(source, pos, line, col, prev);\n  }\n\n  throw syntaxError(source, pos, unexpectedCharacterMessage(code));\n}\n/**\n * Report a message that an unexpected character was encountered.\n */\n\n\nfunction unexpectedCharacterMessage(code) {\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n    return \"Cannot contain the invalid character \".concat(printCharCode(code), \".\");\n  }\n\n  if (code === 39) {\n    // '\n    return \"Unexpected single quote character ('), did you mean to use \" + 'a double quote (\")?';\n  }\n\n  return \"Cannot parse the unexpected character \".concat(printCharCode(code), \".\");\n}\n/**\n * Reads from body starting at startPosition until it finds a non-whitespace\n * or commented character, then returns the position of that character for\n * lexing.\n */\n\n\nfunction positionAfterWhitespace(body, startPosition, lexer) {\n  var bodyLength = body.length;\n  var position = startPosition;\n\n  while (position < bodyLength) {\n    var code = charCodeAt.call(body, position); // tab | space | comma | BOM\n\n    if (code === 9 || code === 32 || code === 44 || code === 0xfeff) {\n      ++position;\n    } else if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (charCodeAt.call(body, position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else {\n      break;\n    }\n  }\n\n  return position;\n}\n/**\n * Reads a comment token from the source file.\n *\n * #[\\u0009\\u0020-\\uFFFF]*\n */\n\n\nfunction readComment(source, start, line, col, prev) {\n  var body = source.body;\n  var code;\n  var position = start;\n\n  do {\n    code = charCodeAt.call(body, ++position);\n  } while (code !== null && ( // SourceCharacter but not LineTerminator\n  code > 0x001f || code === 0x0009));\n\n  return new Tok(TokenKind.COMMENT, start, position, line, col, prev, slice.call(body, start + 1, position));\n}\n/**\n * Reads a number token from the source file, either a float\n * or an int depending on whether a decimal point appears.\n *\n * Int:   -?(0|[1-9][0-9]*)\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\n */\n\n\nfunction readNumber(source, start, firstCode, line, col, prev) {\n  var body = source.body;\n  var code = firstCode;\n  var position = start;\n  var isFloat = false;\n\n  if (code === 45) {\n    // -\n    code = charCodeAt.call(body, ++position);\n  }\n\n  if (code === 48) {\n    // 0\n    code = charCodeAt.call(body, ++position);\n\n    if (code >= 48 && code <= 57) {\n      throw syntaxError(source, position, \"Invalid number, unexpected digit after 0: \".concat(printCharCode(code), \".\"));\n    }\n  } else {\n    position = readDigits(source, position, code);\n    code = charCodeAt.call(body, position);\n  }\n\n  if (code === 46) {\n    // .\n    isFloat = true;\n    code = charCodeAt.call(body, ++position);\n    position = readDigits(source, position, code);\n    code = charCodeAt.call(body, position);\n  }\n\n  if (code === 69 || code === 101) {\n    // E e\n    isFloat = true;\n    code = charCodeAt.call(body, ++position);\n\n    if (code === 43 || code === 45) {\n      // + -\n      code = charCodeAt.call(body, ++position);\n    }\n\n    position = readDigits(source, position, code);\n  }\n\n  return new Tok(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, slice.call(body, start, position));\n}\n/**\n * Returns the new position in the source after reading digits.\n */\n\n\nfunction readDigits(source, start, firstCode) {\n  var body = source.body;\n  var position = start;\n  var code = firstCode;\n\n  if (code >= 48 && code <= 57) {\n    // 0 - 9\n    do {\n      code = charCodeAt.call(body, ++position);\n    } while (code >= 48 && code <= 57); // 0 - 9\n\n\n    return position;\n  }\n\n  throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n}\n/**\n * Reads a string token from the source file.\n *\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\n */\n\n\nfunction readString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 1;\n  var chunkStart = position;\n  var code = 0;\n  var value = '';\n\n  while (position < body.length && (code = charCodeAt.call(body, position)) !== null && // not LineTerminator\n  code !== 0x000a && code !== 0x000d) {\n    // Closing Quote (\")\n    if (code === 34) {\n      value += slice.call(body, chunkStart, position);\n      return new Tok(TokenKind.STRING, start, position + 1, line, col, prev, value);\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    ++position;\n\n    if (code === 92) {\n      // \\\n      value += slice.call(body, chunkStart, position - 1);\n      code = charCodeAt.call(body, position);\n\n      switch (code) {\n        case 34:\n          value += '\"';\n          break;\n\n        case 47:\n          value += '/';\n          break;\n\n        case 92:\n          value += '\\\\';\n          break;\n\n        case 98:\n          value += '\\b';\n          break;\n\n        case 102:\n          value += '\\f';\n          break;\n\n        case 110:\n          value += '\\n';\n          break;\n\n        case 114:\n          value += '\\r';\n          break;\n\n        case 116:\n          value += '\\t';\n          break;\n\n        case 117:\n          // u\n          var charCode = uniCharCode(charCodeAt.call(body, position + 1), charCodeAt.call(body, position + 2), charCodeAt.call(body, position + 3), charCodeAt.call(body, position + 4));\n\n          if (charCode < 0) {\n            throw syntaxError(source, position, 'Invalid character escape sequence: ' + \"\\\\u\".concat(body.slice(position + 1, position + 5), \".\"));\n          }\n\n          value += String.fromCharCode(charCode);\n          position += 4;\n          break;\n\n        default:\n          throw syntaxError(source, position, \"Invalid character escape sequence: \\\\\".concat(String.fromCharCode(code), \".\"));\n      }\n\n      ++position;\n      chunkStart = position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Reads a block string token from the source file.\n *\n * \"\"\"(\"?\"?(\\\\\"\"\"|\\\\(?!=\"\"\")|[^\"\\\\]))*\"\"\"\n */\n\n\nfunction readBlockString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 3;\n  var chunkStart = position;\n  var code = 0;\n  var rawValue = '';\n\n  while (position < body.length && (code = charCodeAt.call(body, position)) !== null) {\n    // Closing Triple-Quote (\"\"\")\n    if (code === 34 && charCodeAt.call(body, position + 1) === 34 && charCodeAt.call(body, position + 2) === 34) {\n      rawValue += slice.call(body, chunkStart, position);\n      return new Tok(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, blockStringValue(rawValue));\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    } // Escape Triple-Quote (\\\"\"\")\n\n\n    if (code === 92 && charCodeAt.call(body, position + 1) === 34 && charCodeAt.call(body, position + 2) === 34 && charCodeAt.call(body, position + 3) === 34) {\n      rawValue += slice.call(body, chunkStart, position) + '\"\"\"';\n      position += 4;\n      chunkStart = position;\n    } else {\n      ++position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Converts four hexadecimal chars to the integer that the\n * string represents. For example, uniCharCode('0','0','0','f')\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\n *\n * Returns a negative number on error, if a char was invalid.\n *\n * This is implemented by noting that char2hex() returns -1 on error,\n * which means the result of ORing the char2hex() will also be negative.\n */\n\n\nfunction uniCharCode(a, b, c, d) {\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\n}\n/**\n * Converts a hex character to its integer value.\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 on error.\n */\n\n\nfunction char2hex(a) {\n  return a >= 48 && a <= 57 ? a - 48 // 0-9\n  : a >= 65 && a <= 70 ? a - 55 // A-F\n  : a >= 97 && a <= 102 ? a - 87 // a-f\n  : -1;\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * [_A-Za-z][_0-9A-Za-z]*\n */\n\n\nfunction readName(source, start, line, col, prev) {\n  var body = source.body;\n  var bodyLength = body.length;\n  var position = start + 1;\n  var code = 0;\n\n  while (position !== bodyLength && (code = charCodeAt.call(body, position)) !== null && (code === 95 || // _\n  code >= 48 && code <= 57 || // 0-9\n  code >= 65 && code <= 90 || // A-Z\n  code >= 97 && code <= 122) // a-z\n  ) {\n    ++position;\n  }\n\n  return new Tok(TokenKind.NAME, start, position, line, col, prev, slice.call(body, start, position));\n}","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport invariant from '../jsutils/invariant';\nimport keyMap from '../jsutils/keyMap';\nimport keyValMap from '../jsutils/keyValMap';\nimport { valueFromAST } from './valueFromAST';\nimport { assertValidSDL } from '../validation/validate';\nimport blockStringValue from '../language/blockStringValue';\nimport { TokenKind } from '../language/lexer';\nimport { parse } from '../language/parser';\nimport { getDirectiveValues } from '../execution/values';\nimport { Kind } from '../language/kinds';\nimport { isTypeDefinitionNode } from '../language/predicates';\nimport { GraphQLScalarType, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType, GraphQLList, GraphQLNonNull } from '../type/definition';\nimport { GraphQLDirective, GraphQLSkipDirective, GraphQLIncludeDirective, GraphQLDeprecatedDirective } from '../type/directives';\nimport { introspectionTypes } from '../type/introspection';\nimport { specifiedScalarTypes } from '../type/scalars';\nimport { GraphQLSchema } from '../type/schema';\n\n/**\n * This takes the ast of a schema document produced by the parse function in\n * src/language/parser.js.\n *\n * If no schema definition is provided, then it will look for types named Query\n * and Mutation.\n *\n * Given that AST it constructs a GraphQLSchema. The resulting schema\n * has no resolve methods, so execution will use default resolvers.\n *\n * Accepts options as a second argument:\n *\n *    - commentDescriptions:\n *        Provide true to use preceding comments as the description.\n *\n */\nexport function buildASTSchema(documentAST, options) {\n  !(documentAST && documentAST.kind === Kind.DOCUMENT) ? invariant(0, 'Must provide valid Document AST') : void 0;\n\n  if (!options || !(options.assumeValid || options.assumeValidSDL)) {\n    assertValidSDL(documentAST);\n  }\n\n  var schemaDef;\n  var typeDefs = [];\n  var nodeMap = Object.create(null);\n  var directiveDefs = [];\n\n  for (var i = 0; i < documentAST.definitions.length; i++) {\n    var def = documentAST.definitions[i];\n\n    if (def.kind === Kind.SCHEMA_DEFINITION) {\n      schemaDef = def;\n    } else if (isTypeDefinitionNode(def)) {\n      var typeName = def.name.value;\n\n      if (nodeMap[typeName]) {\n        throw new Error(\"Type \\\"\".concat(typeName, \"\\\" was defined more than once.\"));\n      }\n\n      typeDefs.push(def);\n      nodeMap[typeName] = def;\n    } else if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      directiveDefs.push(def);\n    }\n  }\n\n  var operationTypes = schemaDef ? getOperationTypes(schemaDef) : {\n    query: nodeMap.Query,\n    mutation: nodeMap.Mutation,\n    subscription: nodeMap.Subscription\n  };\n  var definitionBuilder = new ASTDefinitionBuilder(nodeMap, options, function (typeRef) {\n    throw new Error(\"Type \\\"\".concat(typeRef.name.value, \"\\\" not found in document.\"));\n  });\n  var directives = directiveDefs.map(function (def) {\n    return definitionBuilder.buildDirective(def);\n  }); // If specified directives were not explicitly declared, add them.\n\n  if (!directives.some(function (directive) {\n    return directive.name === 'skip';\n  })) {\n    directives.push(GraphQLSkipDirective);\n  }\n\n  if (!directives.some(function (directive) {\n    return directive.name === 'include';\n  })) {\n    directives.push(GraphQLIncludeDirective);\n  }\n\n  if (!directives.some(function (directive) {\n    return directive.name === 'deprecated';\n  })) {\n    directives.push(GraphQLDeprecatedDirective);\n  } // Note: While this could make early assertions to get the correctly\n  // typed values below, that would throw immediately while type system\n  // validation with validateSchema() will produce more actionable results.\n\n\n  return new GraphQLSchema({\n    query: operationTypes.query ? definitionBuilder.buildType(operationTypes.query) : null,\n    mutation: operationTypes.mutation ? definitionBuilder.buildType(operationTypes.mutation) : null,\n    subscription: operationTypes.subscription ? definitionBuilder.buildType(operationTypes.subscription) : null,\n    types: typeDefs.map(function (node) {\n      return definitionBuilder.buildType(node);\n    }),\n    directives: directives,\n    astNode: schemaDef,\n    assumeValid: options && options.assumeValid,\n    allowedLegacyNames: options && options.allowedLegacyNames\n  });\n\n  function getOperationTypes(schema) {\n    var opTypes = {};\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = schema.operationTypes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var operationType = _step.value;\n        var _typeName = operationType.type.name.value;\n        var operation = operationType.operation;\n\n        if (opTypes[operation]) {\n          throw new Error(\"Must provide only one \".concat(operation, \" type in schema.\"));\n        }\n\n        if (!nodeMap[_typeName]) {\n          throw new Error(\"Specified \".concat(operation, \" type \\\"\").concat(_typeName, \"\\\" not found in document.\"));\n        }\n\n        opTypes[operation] = operationType.type;\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return opTypes;\n  }\n}\nexport var ASTDefinitionBuilder =\n/*#__PURE__*/\nfunction () {\n  function ASTDefinitionBuilder(typeDefinitionsMap, options, resolveType) {\n    _defineProperty(this, \"_typeDefinitionsMap\", void 0);\n\n    _defineProperty(this, \"_options\", void 0);\n\n    _defineProperty(this, \"_resolveType\", void 0);\n\n    _defineProperty(this, \"_cache\", void 0);\n\n    this._typeDefinitionsMap = typeDefinitionsMap;\n    this._options = options;\n    this._resolveType = resolveType; // Initialize to the GraphQL built in scalars and introspection types.\n\n    this._cache = keyMap(specifiedScalarTypes.concat(introspectionTypes), function (type) {\n      return type.name;\n    });\n  }\n\n  var _proto = ASTDefinitionBuilder.prototype;\n\n  _proto.buildType = function buildType(node) {\n    var typeName = node.name.value;\n\n    if (!this._cache[typeName]) {\n      if (node.kind === Kind.NAMED_TYPE) {\n        var defNode = this._typeDefinitionsMap[typeName];\n        this._cache[typeName] = defNode ? this._makeSchemaDef(defNode) : this._resolveType(node);\n      } else {\n        this._cache[typeName] = this._makeSchemaDef(node);\n      }\n    }\n\n    return this._cache[typeName];\n  };\n\n  _proto._buildWrappedType = function _buildWrappedType(typeNode) {\n    if (typeNode.kind === Kind.LIST_TYPE) {\n      return GraphQLList(this._buildWrappedType(typeNode.type));\n    }\n\n    if (typeNode.kind === Kind.NON_NULL_TYPE) {\n      return GraphQLNonNull( // Note: GraphQLNonNull constructor validates this type\n      this._buildWrappedType(typeNode.type));\n    }\n\n    return this.buildType(typeNode);\n  };\n\n  _proto.buildDirective = function buildDirective(directiveNode) {\n    return new GraphQLDirective({\n      name: directiveNode.name.value,\n      description: getDescription(directiveNode, this._options),\n      locations: directiveNode.locations.map(function (node) {\n        return node.value;\n      }),\n      args: directiveNode.arguments && this._makeInputValues(directiveNode.arguments),\n      astNode: directiveNode\n    });\n  };\n\n  _proto.buildField = function buildField(field) {\n    return {\n      // Note: While this could make assertions to get the correctly typed\n      // value, that would throw immediately while type system validation\n      // with validateSchema() will produce more actionable results.\n      type: this._buildWrappedType(field.type),\n      description: getDescription(field, this._options),\n      args: field.arguments && this._makeInputValues(field.arguments),\n      deprecationReason: getDeprecationReason(field),\n      astNode: field\n    };\n  };\n\n  _proto.buildInputField = function buildInputField(value) {\n    // Note: While this could make assertions to get the correctly typed\n    // value, that would throw immediately while type system validation\n    var type = this._buildWrappedType(value.type);\n\n    return {\n      name: value.name.value,\n      type: type,\n      description: getDescription(value, this._options),\n      defaultValue: valueFromAST(value.defaultValue, type),\n      astNode: value\n    };\n  };\n\n  _proto.buildEnumValue = function buildEnumValue(value) {\n    return {\n      description: getDescription(value, this._options),\n      deprecationReason: getDeprecationReason(value),\n      astNode: value\n    };\n  };\n\n  _proto._makeSchemaDef = function _makeSchemaDef(def) {\n    switch (def.kind) {\n      case Kind.OBJECT_TYPE_DEFINITION:\n        return this._makeTypeDef(def);\n\n      case Kind.INTERFACE_TYPE_DEFINITION:\n        return this._makeInterfaceDef(def);\n\n      case Kind.ENUM_TYPE_DEFINITION:\n        return this._makeEnumDef(def);\n\n      case Kind.UNION_TYPE_DEFINITION:\n        return this._makeUnionDef(def);\n\n      case Kind.SCALAR_TYPE_DEFINITION:\n        return this._makeScalarDef(def);\n\n      case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n        return this._makeInputObjectDef(def);\n\n      default:\n        throw new Error(\"Type kind \\\"\".concat(def.kind, \"\\\" not supported.\"));\n    }\n  };\n\n  _proto._makeTypeDef = function _makeTypeDef(def) {\n    var _this = this;\n\n    var interfaces = def.interfaces;\n    return new GraphQLObjectType({\n      name: def.name.value,\n      description: getDescription(def, this._options),\n      fields: function fields() {\n        return _this._makeFieldDefMap(def);\n      },\n      // Note: While this could make early assertions to get the correctly\n      // typed values, that would throw immediately while type system\n      // validation with validateSchema() will produce more actionable results.\n      interfaces: interfaces ? function () {\n        return interfaces.map(function (ref) {\n          return _this.buildType(ref);\n        });\n      } : [],\n      astNode: def\n    });\n  };\n\n  _proto._makeFieldDefMap = function _makeFieldDefMap(def) {\n    var _this2 = this;\n\n    return def.fields ? keyValMap(def.fields, function (field) {\n      return field.name.value;\n    }, function (field) {\n      return _this2.buildField(field);\n    }) : {};\n  };\n\n  _proto._makeInputValues = function _makeInputValues(values) {\n    var _this3 = this;\n\n    return keyValMap(values, function (value) {\n      return value.name.value;\n    }, function (value) {\n      return _this3.buildInputField(value);\n    });\n  };\n\n  _proto._makeInterfaceDef = function _makeInterfaceDef(def) {\n    var _this4 = this;\n\n    return new GraphQLInterfaceType({\n      name: def.name.value,\n      description: getDescription(def, this._options),\n      fields: function fields() {\n        return _this4._makeFieldDefMap(def);\n      },\n      astNode: def\n    });\n  };\n\n  _proto._makeEnumDef = function _makeEnumDef(def) {\n    return new GraphQLEnumType({\n      name: def.name.value,\n      description: getDescription(def, this._options),\n      values: this._makeValueDefMap(def),\n      astNode: def\n    });\n  };\n\n  _proto._makeValueDefMap = function _makeValueDefMap(def) {\n    var _this5 = this;\n\n    return def.values ? keyValMap(def.values, function (enumValue) {\n      return enumValue.name.value;\n    }, function (enumValue) {\n      return _this5.buildEnumValue(enumValue);\n    }) : {};\n  };\n\n  _proto._makeUnionDef = function _makeUnionDef(def) {\n    var _this6 = this;\n\n    var types = def.types;\n    return new GraphQLUnionType({\n      name: def.name.value,\n      description: getDescription(def, this._options),\n      // Note: While this could make assertions to get the correctly typed\n      // values below, that would throw immediately while type system\n      // validation with validateSchema() will produce more actionable results.\n      types: types ? function () {\n        return types.map(function (ref) {\n          return _this6.buildType(ref);\n        });\n      } : [],\n      astNode: def\n    });\n  };\n\n  _proto._makeScalarDef = function _makeScalarDef(def) {\n    return new GraphQLScalarType({\n      name: def.name.value,\n      description: getDescription(def, this._options),\n      astNode: def,\n      serialize: function serialize(value) {\n        return value;\n      }\n    });\n  };\n\n  _proto._makeInputObjectDef = function _makeInputObjectDef(def) {\n    var _this7 = this;\n\n    return new GraphQLInputObjectType({\n      name: def.name.value,\n      description: getDescription(def, this._options),\n      fields: function fields() {\n        return def.fields ? _this7._makeInputValues(def.fields) : {};\n      },\n      astNode: def\n    });\n  };\n\n  return ASTDefinitionBuilder;\n}();\n/**\n * Given a field or enum value node, returns the string value for the\n * deprecation reason.\n */\n\nfunction getDeprecationReason(node) {\n  var deprecated = getDirectiveValues(GraphQLDeprecatedDirective, node);\n  return deprecated && deprecated.reason;\n}\n/**\n * Given an ast node, returns its string description.\n * @deprecated: provided to ease adoption and will be removed in v16.\n *\n * Accepts options as a second argument:\n *\n *    - commentDescriptions:\n *        Provide true to use preceding comments as the description.\n *\n */\n\n\nexport function getDescription(node, options) {\n  if (node.description) {\n    return node.description.value;\n  }\n\n  if (options && options.commentDescriptions) {\n    var rawValue = getLeadingCommentBlock(node);\n\n    if (rawValue !== undefined) {\n      return blockStringValue('\\n' + rawValue);\n    }\n  }\n}\n\nfunction getLeadingCommentBlock(node) {\n  var loc = node.loc;\n\n  if (!loc) {\n    return;\n  }\n\n  var comments = [];\n  var token = loc.startToken.prev;\n\n  while (token && token.kind === TokenKind.COMMENT && token.next && token.prev && token.line + 1 === token.next.line && token.line !== token.prev.line) {\n    var value = String(token.value);\n    comments.push(value);\n    token = token.prev;\n  }\n\n  return comments.reverse().join('\\n');\n}\n/**\n * A helper function to build a GraphQLSchema directly from a source\n * document.\n */\n\n\nexport function buildSchema(source, options) {\n  return buildASTSchema(parse(source, options), options);\n}","function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport invariant from '../jsutils/invariant';\nimport keyMap from '../jsutils/keyMap';\nimport keyValMap from '../jsutils/keyValMap';\nimport objectValues from '../jsutils/objectValues';\nimport { ASTDefinitionBuilder } from './buildASTSchema';\nimport { assertValidSDLExtension } from '../validation/validate';\nimport { GraphQLError } from '../error/GraphQLError';\nimport { isSchema, GraphQLSchema } from '../type/schema';\nimport { isIntrospectionType } from '../type/introspection';\nimport { isSpecifiedScalarType } from '../type/scalars';\nimport { isScalarType, isObjectType, isInterfaceType, isUnionType, isListType, isNonNullType, isEnumType, isInputObjectType, GraphQLList, GraphQLNonNull, GraphQLScalarType, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType } from '../type/definition';\nimport { GraphQLDirective } from '../type/directives';\nimport { Kind } from '../language/kinds';\nimport { isTypeDefinitionNode, isTypeExtensionNode } from '../language/predicates';\n\n/**\n * Produces a new schema given an existing schema and a document which may\n * contain GraphQL type extensions and definitions. The original schema will\n * remain unaltered.\n *\n * Because a schema represents a graph of references, a schema cannot be\n * extended without effectively making an entire copy. We do not know until it's\n * too late if subgraphs remain unchanged.\n *\n * This algorithm copies the provided schema, applying extensions while\n * producing the copy. The original schema remains unaltered.\n *\n * Accepts options as a third argument:\n *\n *    - commentDescriptions:\n *        Provide true to use preceding comments as the description.\n *\n */\nexport function extendSchema(schema, documentAST, options) {\n  !isSchema(schema) ? invariant(0, 'Must provide valid GraphQLSchema') : void 0;\n  !(documentAST && documentAST.kind === Kind.DOCUMENT) ? invariant(0, 'Must provide valid Document AST') : void 0;\n\n  if (!options || !(options.assumeValid || options.assumeValidSDL)) {\n    assertValidSDLExtension(documentAST, schema);\n  } // Collect the type definitions and extensions found in the document.\n\n\n  var typeDefinitionMap = Object.create(null);\n  var typeExtensionsMap = Object.create(null); // New directives and types are separate because a directives and types can\n  // have the same name. For example, a type named \"skip\".\n\n  var directiveDefinitions = [];\n  var schemaDef; // Schema extensions are collected which may add additional operation types.\n\n  var schemaExtensions = [];\n\n  for (var i = 0; i < documentAST.definitions.length; i++) {\n    var def = documentAST.definitions[i];\n\n    if (def.kind === Kind.SCHEMA_DEFINITION) {\n      schemaDef = def;\n    } else if (def.kind === Kind.SCHEMA_EXTENSION) {\n      schemaExtensions.push(def);\n    } else if (isTypeDefinitionNode(def)) {\n      // Sanity check that none of the defined types conflict with the\n      // schema's existing types.\n      var typeName = def.name.value;\n\n      if (schema.getType(typeName)) {\n        throw new GraphQLError(\"Type \\\"\".concat(typeName, \"\\\" already exists in the schema. It cannot also \") + 'be defined in this type definition.', [def]);\n      }\n\n      typeDefinitionMap[typeName] = def;\n    } else if (isTypeExtensionNode(def)) {\n      // Sanity check that this type extension exists within the\n      // schema's existing types.\n      var extendedTypeName = def.name.value;\n      var existingType = schema.getType(extendedTypeName);\n\n      if (!existingType) {\n        throw new GraphQLError(\"Cannot extend type \\\"\".concat(extendedTypeName, \"\\\" because it does not \") + 'exist in the existing schema.', [def]);\n      }\n\n      checkExtensionNode(existingType, def);\n      var existingTypeExtensions = typeExtensionsMap[extendedTypeName];\n      typeExtensionsMap[extendedTypeName] = existingTypeExtensions ? existingTypeExtensions.concat([def]) : [def];\n    } else if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      var directiveName = def.name.value;\n      var existingDirective = schema.getDirective(directiveName);\n\n      if (existingDirective) {\n        throw new GraphQLError(\"Directive \\\"\".concat(directiveName, \"\\\" already exists in the schema. It \") + 'cannot be redefined.', [def]);\n      }\n\n      directiveDefinitions.push(def);\n    }\n  } // If this document contains no new types, extensions, or directives then\n  // return the same unmodified GraphQLSchema instance.\n\n\n  if (Object.keys(typeExtensionsMap).length === 0 && Object.keys(typeDefinitionMap).length === 0 && directiveDefinitions.length === 0 && schemaExtensions.length === 0 && !schemaDef) {\n    return schema;\n  }\n\n  var astBuilder = new ASTDefinitionBuilder(typeDefinitionMap, options, function (typeRef) {\n    var typeName = typeRef.name.value;\n    var existingType = schema.getType(typeName);\n\n    if (existingType) {\n      return extendNamedType(existingType);\n    }\n\n    throw new GraphQLError(\"Unknown type: \\\"\".concat(typeName, \"\\\". Ensure that this type exists \") + 'either in the original schema, or is added in a type definition.', [typeRef]);\n  });\n  var extendTypeCache = Object.create(null); // Get the extended root operation types.\n\n  var operationTypes = {\n    query: extendMaybeNamedType(schema.getQueryType()),\n    mutation: extendMaybeNamedType(schema.getMutationType()),\n    subscription: extendMaybeNamedType(schema.getSubscriptionType())\n  };\n\n  if (schemaDef) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = schemaDef.operationTypes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var _ref2 = _step.value;\n        var operation = _ref2.operation,\n            type = _ref2.type;\n\n        if (operationTypes[operation]) {\n          throw new Error(\"Must provide only one \".concat(operation, \" type in schema.\"));\n        } // Note: While this could make early assertions to get the correctly\n        // typed values, that would throw immediately while type system\n        // validation with validateSchema() will produce more actionable results.\n\n\n        operationTypes[operation] = astBuilder.buildType(type);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  } // Then, incorporate schema definition and all schema extensions.\n\n\n  for (var _i = 0; _i < schemaExtensions.length; _i++) {\n    var schemaExtension = schemaExtensions[_i];\n\n    if (schemaExtension.operationTypes) {\n      var _iteratorNormalCompletion12 = true;\n      var _didIteratorError12 = false;\n      var _iteratorError12 = undefined;\n\n      try {\n        for (var _iterator12 = schemaExtension.operationTypes[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {\n          var _ref4 = _step12.value;\n          var operation = _ref4.operation,\n              type = _ref4.type;\n\n          if (operationTypes[operation]) {\n            throw new Error(\"Must provide only one \".concat(operation, \" type in schema.\"));\n          } // Note: While this could make early assertions to get the correctly\n          // typed values, that would throw immediately while type system\n          // validation with validateSchema() will produce more actionable results.\n\n\n          operationTypes[operation] = astBuilder.buildType(type);\n        }\n      } catch (err) {\n        _didIteratorError12 = true;\n        _iteratorError12 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion12 && _iterator12.return != null) {\n            _iterator12.return();\n          }\n        } finally {\n          if (_didIteratorError12) {\n            throw _iteratorError12;\n          }\n        }\n      }\n    }\n  }\n\n  var schemaExtensionASTNodes = schemaExtensions ? schema.extensionASTNodes ? schema.extensionASTNodes.concat(schemaExtensions) : schemaExtensions : schema.extensionASTNodes;\n  var types = objectValues(schema.getTypeMap()).map(function (type) {\n    return extendNamedType(type);\n  }).concat(objectValues(typeDefinitionMap).map(function (type) {\n    return astBuilder.buildType(type);\n  })); // Support both original legacy names and extended legacy names.\n\n  var allowedLegacyNames = schema.__allowedLegacyNames.concat(options && options.allowedLegacyNames || []); // Then produce and return a Schema with these types.\n\n\n  return new GraphQLSchema(_objectSpread({}, operationTypes, {\n    types: types,\n    directives: getMergedDirectives(),\n    astNode: schema.astNode,\n    extensionASTNodes: schemaExtensionASTNodes,\n    allowedLegacyNames: allowedLegacyNames\n  })); // Below are functions used for producing this schema that have closed over\n  // this scope and have access to the schema, cache, and newly defined types.\n\n  function getMergedDirectives() {\n    var existingDirectives = schema.getDirectives().map(extendDirective);\n    !existingDirectives ? invariant(0, 'schema must have default directives') : void 0;\n    return existingDirectives.concat(directiveDefinitions.map(function (node) {\n      return astBuilder.buildDirective(node);\n    }));\n  }\n\n  function extendMaybeNamedType(type) {\n    return type ? extendNamedType(type) : null;\n  }\n\n  function extendNamedType(type) {\n    if (isIntrospectionType(type) || isSpecifiedScalarType(type)) {\n      // Builtin types are not extended.\n      return type;\n    }\n\n    var name = type.name;\n\n    if (!extendTypeCache[name]) {\n      if (isScalarType(type)) {\n        extendTypeCache[name] = extendScalarType(type);\n      } else if (isObjectType(type)) {\n        extendTypeCache[name] = extendObjectType(type);\n      } else if (isInterfaceType(type)) {\n        extendTypeCache[name] = extendInterfaceType(type);\n      } else if (isUnionType(type)) {\n        extendTypeCache[name] = extendUnionType(type);\n      } else if (isEnumType(type)) {\n        extendTypeCache[name] = extendEnumType(type);\n      } else if (isInputObjectType(type)) {\n        extendTypeCache[name] = extendInputObjectType(type);\n      }\n    }\n\n    return extendTypeCache[name];\n  }\n\n  function extendDirective(directive) {\n    return new GraphQLDirective({\n      name: directive.name,\n      description: directive.description,\n      locations: directive.locations,\n      args: extendArgs(directive.args),\n      astNode: directive.astNode\n    });\n  }\n\n  function extendInputObjectType(type) {\n    var name = type.name;\n    var extensionASTNodes = typeExtensionsMap[name] ? type.extensionASTNodes ? type.extensionASTNodes.concat(typeExtensionsMap[name]) : typeExtensionsMap[name] : type.extensionASTNodes;\n    return new GraphQLInputObjectType({\n      name: name,\n      description: type.description,\n      fields: function fields() {\n        return extendInputFieldMap(type);\n      },\n      astNode: type.astNode,\n      extensionASTNodes: extensionASTNodes\n    });\n  }\n\n  function extendInputFieldMap(type) {\n    var newFieldMap = Object.create(null);\n    var oldFieldMap = type.getFields();\n\n    var _arr = Object.keys(oldFieldMap);\n\n    for (var _i2 = 0; _i2 < _arr.length; _i2++) {\n      var _fieldName = _arr[_i2];\n      var _field = oldFieldMap[_fieldName];\n      newFieldMap[_fieldName] = {\n        description: _field.description,\n        type: extendType(_field.type),\n        defaultValue: _field.defaultValue,\n        astNode: _field.astNode\n      };\n    } // If there are any extensions to the fields, apply those here.\n\n\n    var extensions = typeExtensionsMap[type.name];\n\n    if (extensions) {\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = extensions[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var extension = _step2.value;\n          var _iteratorNormalCompletion3 = true;\n          var _didIteratorError3 = false;\n          var _iteratorError3 = undefined;\n\n          try {\n            for (var _iterator3 = extension.fields[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n              var field = _step3.value;\n              var fieldName = field.name.value;\n\n              if (oldFieldMap[fieldName]) {\n                throw new GraphQLError(\"Field \\\"\".concat(type.name, \".\").concat(fieldName, \"\\\" already exists in the \") + 'schema. It cannot also be defined in this type extension.', [field]);\n              }\n\n              newFieldMap[fieldName] = astBuilder.buildInputField(field);\n            }\n          } catch (err) {\n            _didIteratorError3 = true;\n            _iteratorError3 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                _iterator3.return();\n              }\n            } finally {\n              if (_didIteratorError3) {\n                throw _iteratorError3;\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n\n    return newFieldMap;\n  }\n\n  function extendEnumType(type) {\n    var name = type.name;\n    var extensionASTNodes = typeExtensionsMap[name] ? type.extensionASTNodes ? type.extensionASTNodes.concat(typeExtensionsMap[name]) : typeExtensionsMap[name] : type.extensionASTNodes;\n    return new GraphQLEnumType({\n      name: name,\n      description: type.description,\n      values: extendValueMap(type),\n      astNode: type.astNode,\n      extensionASTNodes: extensionASTNodes\n    });\n  }\n\n  function extendValueMap(type) {\n    var newValueMap = Object.create(null);\n    var oldValueMap = keyMap(type.getValues(), function (value) {\n      return value.name;\n    });\n\n    var _arr2 = Object.keys(oldValueMap);\n\n    for (var _i3 = 0; _i3 < _arr2.length; _i3++) {\n      var _valueName = _arr2[_i3];\n      var _value = oldValueMap[_valueName];\n      newValueMap[_valueName] = {\n        name: _value.name,\n        description: _value.description,\n        value: _value.value,\n        deprecationReason: _value.deprecationReason,\n        astNode: _value.astNode\n      };\n    } // If there are any extensions to the values, apply those here.\n\n\n    var extensions = typeExtensionsMap[type.name];\n\n    if (extensions) {\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = extensions[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var extension = _step4.value;\n          var _iteratorNormalCompletion5 = true;\n          var _didIteratorError5 = false;\n          var _iteratorError5 = undefined;\n\n          try {\n            for (var _iterator5 = extension.values[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n              var value = _step5.value;\n              var valueName = value.name.value;\n\n              if (oldValueMap[valueName]) {\n                throw new GraphQLError(\"Enum value \\\"\".concat(type.name, \".\").concat(valueName, \"\\\" already exists in the \") + 'schema. It cannot also be defined in this type extension.', [value]);\n              }\n\n              newValueMap[valueName] = astBuilder.buildEnumValue(value);\n            }\n          } catch (err) {\n            _didIteratorError5 = true;\n            _iteratorError5 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n                _iterator5.return();\n              }\n            } finally {\n              if (_didIteratorError5) {\n                throw _iteratorError5;\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n    }\n\n    return newValueMap;\n  }\n\n  function extendScalarType(type) {\n    var name = type.name;\n    var extensionASTNodes = typeExtensionsMap[name] ? type.extensionASTNodes ? type.extensionASTNodes.concat(typeExtensionsMap[name]) : typeExtensionsMap[name] : type.extensionASTNodes;\n    return new GraphQLScalarType({\n      name: name,\n      description: type.description,\n      astNode: type.astNode,\n      extensionASTNodes: extensionASTNodes,\n      serialize: type.serialize,\n      parseValue: type.parseValue,\n      parseLiteral: type.parseLiteral\n    });\n  }\n\n  function extendObjectType(type) {\n    var name = type.name;\n    var extensionASTNodes = typeExtensionsMap[name] ? type.extensionASTNodes ? type.extensionASTNodes.concat(typeExtensionsMap[name]) : typeExtensionsMap[name] : type.extensionASTNodes;\n    return new GraphQLObjectType({\n      name: name,\n      description: type.description,\n      interfaces: function interfaces() {\n        return extendImplementedInterfaces(type);\n      },\n      fields: function fields() {\n        return extendFieldMap(type);\n      },\n      astNode: type.astNode,\n      extensionASTNodes: extensionASTNodes,\n      isTypeOf: type.isTypeOf\n    });\n  }\n\n  function extendArgs(args) {\n    return keyValMap(args, function (arg) {\n      return arg.name;\n    }, function (arg) {\n      return {\n        type: extendType(arg.type),\n        defaultValue: arg.defaultValue,\n        description: arg.description,\n        astNode: arg.astNode\n      };\n    });\n  }\n\n  function extendInterfaceType(type) {\n    var name = type.name;\n    var extensionASTNodes = typeExtensionsMap[name] ? type.extensionASTNodes ? type.extensionASTNodes.concat(typeExtensionsMap[name]) : typeExtensionsMap[name] : type.extensionASTNodes;\n    return new GraphQLInterfaceType({\n      name: type.name,\n      description: type.description,\n      fields: function fields() {\n        return extendFieldMap(type);\n      },\n      astNode: type.astNode,\n      extensionASTNodes: extensionASTNodes,\n      resolveType: type.resolveType\n    });\n  }\n\n  function extendUnionType(type) {\n    var name = type.name;\n    var extensionASTNodes = typeExtensionsMap[name] ? type.extensionASTNodes ? type.extensionASTNodes.concat(typeExtensionsMap[name]) : typeExtensionsMap[name] : type.extensionASTNodes;\n    return new GraphQLUnionType({\n      name: name,\n      description: type.description,\n      types: function types() {\n        return extendPossibleTypes(type);\n      },\n      astNode: type.astNode,\n      resolveType: type.resolveType,\n      extensionASTNodes: extensionASTNodes\n    });\n  }\n\n  function extendPossibleTypes(type) {\n    var possibleTypes = type.getTypes().map(extendNamedType); // If there are any extensions to the union, apply those here.\n\n    var extensions = typeExtensionsMap[type.name];\n\n    if (extensions) {\n      var _iteratorNormalCompletion6 = true;\n      var _didIteratorError6 = false;\n      var _iteratorError6 = undefined;\n\n      try {\n        for (var _iterator6 = extensions[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n          var extension = _step6.value;\n          var _iteratorNormalCompletion7 = true;\n          var _didIteratorError7 = false;\n          var _iteratorError7 = undefined;\n\n          try {\n            for (var _iterator7 = extension.types[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n              var namedType = _step7.value;\n              // Note: While this could make early assertions to get the correctly\n              // typed values, that would throw immediately while type system\n              // validation with validateSchema() will produce more actionable results.\n              possibleTypes.push(astBuilder.buildType(namedType));\n            }\n          } catch (err) {\n            _didIteratorError7 = true;\n            _iteratorError7 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n                _iterator7.return();\n              }\n            } finally {\n              if (_didIteratorError7) {\n                throw _iteratorError7;\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError6 = true;\n        _iteratorError6 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n            _iterator6.return();\n          }\n        } finally {\n          if (_didIteratorError6) {\n            throw _iteratorError6;\n          }\n        }\n      }\n    }\n\n    return possibleTypes;\n  }\n\n  function extendImplementedInterfaces(type) {\n    var interfaces = type.getInterfaces().map(extendNamedType); // If there are any extensions to the interfaces, apply those here.\n\n    var extensions = typeExtensionsMap[type.name];\n\n    if (extensions) {\n      var _iteratorNormalCompletion8 = true;\n      var _didIteratorError8 = false;\n      var _iteratorError8 = undefined;\n\n      try {\n        for (var _iterator8 = extensions[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n          var extension = _step8.value;\n          var _iteratorNormalCompletion9 = true;\n          var _didIteratorError9 = false;\n          var _iteratorError9 = undefined;\n\n          try {\n            for (var _iterator9 = extension.interfaces[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n              var namedType = _step9.value;\n              // Note: While this could make early assertions to get the correctly\n              // typed values, that would throw immediately while type system\n              // validation with validateSchema() will produce more actionable results.\n              interfaces.push(astBuilder.buildType(namedType));\n            }\n          } catch (err) {\n            _didIteratorError9 = true;\n            _iteratorError9 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion9 && _iterator9.return != null) {\n                _iterator9.return();\n              }\n            } finally {\n              if (_didIteratorError9) {\n                throw _iteratorError9;\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError8 = true;\n        _iteratorError8 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n            _iterator8.return();\n          }\n        } finally {\n          if (_didIteratorError8) {\n            throw _iteratorError8;\n          }\n        }\n      }\n    }\n\n    return interfaces;\n  }\n\n  function extendFieldMap(type) {\n    var newFieldMap = Object.create(null);\n    var oldFieldMap = type.getFields();\n\n    var _arr3 = Object.keys(oldFieldMap);\n\n    for (var _i4 = 0; _i4 < _arr3.length; _i4++) {\n      var _fieldName2 = _arr3[_i4];\n      var _field2 = oldFieldMap[_fieldName2];\n      newFieldMap[_fieldName2] = {\n        description: _field2.description,\n        deprecationReason: _field2.deprecationReason,\n        type: extendType(_field2.type),\n        args: extendArgs(_field2.args),\n        astNode: _field2.astNode,\n        resolve: _field2.resolve\n      };\n    } // If there are any extensions to the fields, apply those here.\n\n\n    var extensions = typeExtensionsMap[type.name];\n\n    if (extensions) {\n      var _iteratorNormalCompletion10 = true;\n      var _didIteratorError10 = false;\n      var _iteratorError10 = undefined;\n\n      try {\n        for (var _iterator10 = extensions[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n          var extension = _step10.value;\n          var _iteratorNormalCompletion11 = true;\n          var _didIteratorError11 = false;\n          var _iteratorError11 = undefined;\n\n          try {\n            for (var _iterator11 = extension.fields[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {\n              var field = _step11.value;\n              var fieldName = field.name.value;\n\n              if (oldFieldMap[fieldName]) {\n                throw new GraphQLError(\"Field \\\"\".concat(type.name, \".\").concat(fieldName, \"\\\" already exists in the \") + 'schema. It cannot also be defined in this type extension.', [field]);\n              }\n\n              newFieldMap[fieldName] = astBuilder.buildField(field);\n            }\n          } catch (err) {\n            _didIteratorError11 = true;\n            _iteratorError11 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion11 && _iterator11.return != null) {\n                _iterator11.return();\n              }\n            } finally {\n              if (_didIteratorError11) {\n                throw _iteratorError11;\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError10 = true;\n        _iteratorError10 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion10 && _iterator10.return != null) {\n            _iterator10.return();\n          }\n        } finally {\n          if (_didIteratorError10) {\n            throw _iteratorError10;\n          }\n        }\n      }\n    }\n\n    return newFieldMap;\n  }\n\n  function extendType(typeDef) {\n    if (isListType(typeDef)) {\n      return GraphQLList(extendType(typeDef.ofType));\n    }\n\n    if (isNonNullType(typeDef)) {\n      return GraphQLNonNull(extendType(typeDef.ofType));\n    }\n\n    return extendNamedType(typeDef);\n  }\n}\n\nfunction checkExtensionNode(type, node) {\n  switch (node.kind) {\n    case Kind.OBJECT_TYPE_EXTENSION:\n      if (!isObjectType(type)) {\n        throw new GraphQLError(\"Cannot extend non-object type \\\"\".concat(type.name, \"\\\".\"), [node]);\n      }\n\n      break;\n\n    case Kind.INTERFACE_TYPE_EXTENSION:\n      if (!isInterfaceType(type)) {\n        throw new GraphQLError(\"Cannot extend non-interface type \\\"\".concat(type.name, \"\\\".\"), [node]);\n      }\n\n      break;\n\n    case Kind.ENUM_TYPE_EXTENSION:\n      if (!isEnumType(type)) {\n        throw new GraphQLError(\"Cannot extend non-enum type \\\"\".concat(type.name, \"\\\".\"), [node]);\n      }\n\n      break;\n\n    case Kind.UNION_TYPE_EXTENSION:\n      if (!isUnionType(type)) {\n        throw new GraphQLError(\"Cannot extend non-union type \\\"\".concat(type.name, \"\\\".\"), [node]);\n      }\n\n      break;\n\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      if (!isInputObjectType(type)) {\n        throw new GraphQLError(\"Cannot extend non-input object type \\\"\".concat(type.name, \"\\\".\"), [node]);\n      }\n\n      break;\n  }\n}","function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport keyValMap from '../jsutils/keyValMap';\nimport objectValues from '../jsutils/objectValues';\nimport { GraphQLSchema } from '../type/schema';\nimport { GraphQLDirective } from '../type/directives';\nimport { GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType, GraphQLList, GraphQLNonNull, isListType, isNonNullType, isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType } from '../type/definition';\nimport { isSpecifiedScalarType } from '../type/scalars';\nimport { isIntrospectionType } from '../type/introspection';\n/**\n * Sort GraphQLSchema.\n */\n\nexport function lexicographicSortSchema(schema) {\n  var cache = Object.create(null);\n\n  var sortMaybeType = function sortMaybeType(maybeType) {\n    return maybeType && sortNamedType(maybeType);\n  };\n\n  return new GraphQLSchema({\n    types: sortTypes(objectValues(schema.getTypeMap())),\n    directives: sortByName(schema.getDirectives()).map(sortDirective),\n    query: sortMaybeType(schema.getQueryType()),\n    mutation: sortMaybeType(schema.getMutationType()),\n    subscription: sortMaybeType(schema.getSubscriptionType()),\n    astNode: schema.astNode\n  });\n\n  function sortDirective(directive) {\n    return new GraphQLDirective({\n      name: directive.name,\n      description: directive.description,\n      locations: sortBy(directive.locations, function (x) {\n        return x;\n      }),\n      args: sortArgs(directive.args),\n      astNode: directive.astNode\n    });\n  }\n\n  function sortArgs(args) {\n    return keyValMap(sortByName(args), function (arg) {\n      return arg.name;\n    }, function (arg) {\n      return _objectSpread({}, arg, {\n        type: sortType(arg.type)\n      });\n    });\n  }\n\n  function sortFields(fieldsMap) {\n    return sortObjMap(fieldsMap, function (field) {\n      return {\n        type: sortType(field.type),\n        args: sortArgs(field.args),\n        resolve: field.resolve,\n        subscribe: field.subscribe,\n        deprecationReason: field.deprecationReason,\n        description: field.description,\n        astNode: field.astNode\n      };\n    });\n  }\n\n  function sortInputFields(fieldsMap) {\n    return sortObjMap(fieldsMap, function (field) {\n      return {\n        type: sortType(field.type),\n        defaultValue: field.defaultValue,\n        description: field.description,\n        astNode: field.astNode\n      };\n    });\n  }\n\n  function sortType(type) {\n    if (isListType(type)) {\n      return new GraphQLList(sortType(type.ofType));\n    } else if (isNonNullType(type)) {\n      return new GraphQLNonNull(sortType(type.ofType));\n    }\n\n    return sortNamedType(type);\n  }\n\n  function sortTypes(arr) {\n    return sortByName(arr).map(sortNamedType);\n  }\n\n  function sortNamedType(type) {\n    if (isSpecifiedScalarType(type) || isIntrospectionType(type)) {\n      return type;\n    }\n\n    var sortedType = cache[type.name];\n\n    if (!sortedType) {\n      sortedType = sortNamedTypeImpl(type);\n      cache[type.name] = sortedType;\n    }\n\n    return sortedType;\n  }\n\n  function sortNamedTypeImpl(type) {\n    if (isScalarType(type)) {\n      return type;\n    } else if (isObjectType(type)) {\n      return new GraphQLObjectType({\n        name: type.name,\n        interfaces: function interfaces() {\n          return sortTypes(type.getInterfaces());\n        },\n        fields: function fields() {\n          return sortFields(type.getFields());\n        },\n        isTypeOf: type.isTypeOf,\n        description: type.description,\n        astNode: type.astNode,\n        extensionASTNodes: type.extensionASTNodes\n      });\n    } else if (isInterfaceType(type)) {\n      return new GraphQLInterfaceType({\n        name: type.name,\n        fields: function fields() {\n          return sortFields(type.getFields());\n        },\n        resolveType: type.resolveType,\n        description: type.description,\n        astNode: type.astNode,\n        extensionASTNodes: type.extensionASTNodes\n      });\n    } else if (isUnionType(type)) {\n      return new GraphQLUnionType({\n        name: type.name,\n        types: function types() {\n          return sortTypes(type.getTypes());\n        },\n        resolveType: type.resolveType,\n        description: type.description,\n        astNode: type.astNode\n      });\n    } else if (isEnumType(type)) {\n      return new GraphQLEnumType({\n        name: type.name,\n        values: keyValMap(sortByName(type.getValues()), function (val) {\n          return val.name;\n        }, function (val) {\n          return {\n            value: val.value,\n            deprecationReason: val.deprecationReason,\n            description: val.description,\n            astNode: val.astNode\n          };\n        }),\n        description: type.description,\n        astNode: type.astNode\n      });\n    } else if (isInputObjectType(type)) {\n      return new GraphQLInputObjectType({\n        name: type.name,\n        fields: function fields() {\n          return sortInputFields(type.getFields());\n        },\n        description: type.description,\n        astNode: type.astNode\n      });\n    }\n\n    throw new Error(\"Unknown type: \\\"\".concat(type, \"\\\"\"));\n  }\n}\n\nfunction sortObjMap(map, sortValueFn) {\n  var sortedMap = Object.create(null);\n  var sortedKeys = sortBy(Object.keys(map), function (x) {\n    return x;\n  });\n\n  for (var _i = 0; _i < sortedKeys.length; _i++) {\n    var key = sortedKeys[_i];\n    var value = map[key];\n    sortedMap[key] = sortValueFn ? sortValueFn(value) : value;\n  }\n\n  return sortedMap;\n}\n\nfunction sortByName(array) {\n  return sortBy(array, function (obj) {\n    return obj.name;\n  });\n}\n\nfunction sortBy(array, mapToKey) {\n  return array.slice().sort(function (obj1, obj2) {\n    var key1 = mapToKey(obj1);\n    var key2 = mapToKey(obj2);\n    return key1.localeCompare(key2);\n  });\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport isNullish from '../jsutils/isNullish';\nimport isInvalid from '../jsutils/isInvalid';\nimport objectValues from '../jsutils/objectValues';\nimport { astFromValue } from '../utilities/astFromValue';\nimport { print } from '../language/printer';\nimport { isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType } from '../type/definition';\nimport { GraphQLString, isSpecifiedScalarType } from '../type/scalars';\nimport { GraphQLDirective, DEFAULT_DEPRECATION_REASON, isSpecifiedDirective } from '../type/directives';\nimport { isIntrospectionType } from '../type/introspection';\n\n/**\n * Accepts options as a second argument:\n *\n *    - commentDescriptions:\n *        Provide true to use preceding comments as the description.\n *\n */\nexport function printSchema(schema, options) {\n  return printFilteredSchema(schema, function (n) {\n    return !isSpecifiedDirective(n);\n  }, isDefinedType, options);\n}\nexport function printIntrospectionSchema(schema, options) {\n  return printFilteredSchema(schema, isSpecifiedDirective, isIntrospectionType, options);\n}\n\nfunction isDefinedType(type) {\n  return !isSpecifiedScalarType(type) && !isIntrospectionType(type);\n}\n\nfunction printFilteredSchema(schema, directiveFilter, typeFilter, options) {\n  var directives = schema.getDirectives().filter(directiveFilter);\n  var typeMap = schema.getTypeMap();\n  var types = objectValues(typeMap).sort(function (type1, type2) {\n    return type1.name.localeCompare(type2.name);\n  }).filter(typeFilter);\n  return [printSchemaDefinition(schema)].concat(directives.map(function (directive) {\n    return printDirective(directive, options);\n  }), types.map(function (type) {\n    return printType(type, options);\n  })).filter(Boolean).join('\\n\\n') + '\\n';\n}\n\nfunction printSchemaDefinition(schema) {\n  if (isSchemaOfCommonNames(schema)) {\n    return;\n  }\n\n  var operationTypes = [];\n  var queryType = schema.getQueryType();\n\n  if (queryType) {\n    operationTypes.push(\"  query: \".concat(queryType.name));\n  }\n\n  var mutationType = schema.getMutationType();\n\n  if (mutationType) {\n    operationTypes.push(\"  mutation: \".concat(mutationType.name));\n  }\n\n  var subscriptionType = schema.getSubscriptionType();\n\n  if (subscriptionType) {\n    operationTypes.push(\"  subscription: \".concat(subscriptionType.name));\n  }\n\n  return \"schema {\\n\".concat(operationTypes.join('\\n'), \"\\n}\");\n}\n/**\n * GraphQL schema define root types for each type of operation. These types are\n * the same as any other type and can be named in any manner, however there is\n * a common naming convention:\n *\n *   schema {\n *     query: Query\n *     mutation: Mutation\n *   }\n *\n * When using this naming convention, the schema description can be omitted.\n */\n\n\nfunction isSchemaOfCommonNames(schema) {\n  var queryType = schema.getQueryType();\n\n  if (queryType && queryType.name !== 'Query') {\n    return false;\n  }\n\n  var mutationType = schema.getMutationType();\n\n  if (mutationType && mutationType.name !== 'Mutation') {\n    return false;\n  }\n\n  var subscriptionType = schema.getSubscriptionType();\n\n  if (subscriptionType && subscriptionType.name !== 'Subscription') {\n    return false;\n  }\n\n  return true;\n}\n\nexport function printType(type, options) {\n  if (isScalarType(type)) {\n    return printScalar(type, options);\n  } else if (isObjectType(type)) {\n    return printObject(type, options);\n  } else if (isInterfaceType(type)) {\n    return printInterface(type, options);\n  } else if (isUnionType(type)) {\n    return printUnion(type, options);\n  } else if (isEnumType(type)) {\n    return printEnum(type, options);\n  } else if (isInputObjectType(type)) {\n    return printInputObject(type, options);\n  }\n  /* istanbul ignore next */\n\n\n  throw new Error(\"Unknown type: \".concat(type, \".\"));\n}\n\nfunction printScalar(type, options) {\n  return printDescription(options, type) + \"scalar \".concat(type.name);\n}\n\nfunction printObject(type, options) {\n  var interfaces = type.getInterfaces();\n  var implementedInterfaces = interfaces.length ? ' implements ' + interfaces.map(function (i) {\n    return i.name;\n  }).join(' & ') : '';\n  return printDescription(options, type) + \"type \".concat(type.name).concat(implementedInterfaces, \" {\\n\") + printFields(options, type) + '\\n' + '}';\n}\n\nfunction printInterface(type, options) {\n  return printDescription(options, type) + \"interface \".concat(type.name, \" {\\n\") + printFields(options, type) + '\\n' + '}';\n}\n\nfunction printUnion(type, options) {\n  return printDescription(options, type) + \"union \".concat(type.name, \" = \").concat(type.getTypes().join(' | '));\n}\n\nfunction printEnum(type, options) {\n  return printDescription(options, type) + \"enum \".concat(type.name, \" {\\n\") + printEnumValues(type.getValues(), options) + '\\n' + '}';\n}\n\nfunction printEnumValues(values, options) {\n  return values.map(function (value, i) {\n    return printDescription(options, value, '  ', !i) + '  ' + value.name + printDeprecated(value);\n  }).join('\\n');\n}\n\nfunction printInputObject(type, options) {\n  var fields = objectValues(type.getFields());\n  return printDescription(options, type) + \"input \".concat(type.name, \" {\\n\") + fields.map(function (f, i) {\n    return printDescription(options, f, '  ', !i) + '  ' + printInputValue(f);\n  }).join('\\n') + '\\n' + '}';\n}\n\nfunction printFields(options, type) {\n  var fields = objectValues(type.getFields());\n  return fields.map(function (f, i) {\n    return printDescription(options, f, '  ', !i) + '  ' + f.name + printArgs(options, f.args, '  ') + ': ' + String(f.type) + printDeprecated(f);\n  }).join('\\n');\n}\n\nfunction printArgs(options, args) {\n  var indentation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n\n  if (args.length === 0) {\n    return '';\n  } // If every arg does not have a description, print them on one line.\n\n\n  if (args.every(function (arg) {\n    return !arg.description;\n  })) {\n    return '(' + args.map(printInputValue).join(', ') + ')';\n  }\n\n  return '(\\n' + args.map(function (arg, i) {\n    return printDescription(options, arg, '  ' + indentation, !i) + '  ' + indentation + printInputValue(arg);\n  }).join('\\n') + '\\n' + indentation + ')';\n}\n\nfunction printInputValue(arg) {\n  var argDecl = arg.name + ': ' + String(arg.type);\n\n  if (!isInvalid(arg.defaultValue)) {\n    argDecl += \" = \".concat(print(astFromValue(arg.defaultValue, arg.type)));\n  }\n\n  return argDecl;\n}\n\nfunction printDirective(directive, options) {\n  return printDescription(options, directive) + 'directive @' + directive.name + printArgs(options, directive.args) + ' on ' + directive.locations.join(' | ');\n}\n\nfunction printDeprecated(fieldOrEnumVal) {\n  if (!fieldOrEnumVal.isDeprecated) {\n    return '';\n  }\n\n  var reason = fieldOrEnumVal.deprecationReason;\n\n  if (isNullish(reason) || reason === '' || reason === DEFAULT_DEPRECATION_REASON) {\n    return ' @deprecated';\n  }\n\n  return ' @deprecated(reason: ' + print(astFromValue(reason, GraphQLString)) + ')';\n}\n\nfunction printDescription(options, def) {\n  var indentation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var firstInBlock = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n  if (!def.description) {\n    return '';\n  }\n\n  var lines = descriptionLines(def.description, 120 - indentation.length);\n\n  if (options && options.commentDescriptions) {\n    return printDescriptionWithComments(lines, indentation, firstInBlock);\n  }\n\n  var description = indentation && !firstInBlock ? '\\n' + indentation + '\"\"\"' : indentation + '\"\"\"'; // In some circumstances, a single line can be used for the description.\n\n  if (lines.length === 1 && lines[0].length < 70 && lines[0][lines[0].length - 1] !== '\"') {\n    return description + escapeQuote(lines[0]) + '\"\"\"\\n';\n  } // Format a multi-line block quote to account for leading space.\n\n\n  var hasLeadingSpace = lines[0][0] === ' ' || lines[0][0] === '\\t';\n\n  if (!hasLeadingSpace) {\n    description += '\\n';\n  }\n\n  for (var i = 0; i < lines.length; i++) {\n    if (i !== 0 || !hasLeadingSpace) {\n      description += indentation;\n    }\n\n    description += escapeQuote(lines[i]) + '\\n';\n  }\n\n  description += indentation + '\"\"\"\\n';\n  return description;\n}\n\nfunction escapeQuote(line) {\n  return line.replace(/\"\"\"/g, '\\\\\"\"\"');\n}\n\nfunction printDescriptionWithComments(lines, indentation, firstInBlock) {\n  var description = indentation && !firstInBlock ? '\\n' : '';\n\n  for (var i = 0; i < lines.length; i++) {\n    if (lines[i] === '') {\n      description += indentation + '#\\n';\n    } else {\n      description += indentation + '# ' + lines[i] + '\\n';\n    }\n  }\n\n  return description;\n}\n\nfunction descriptionLines(description, maxLen) {\n  var lines = [];\n  var rawLines = description.split('\\n');\n\n  for (var i = 0; i < rawLines.length; i++) {\n    if (rawLines[i] === '') {\n      lines.push(rawLines[i]);\n    } else {\n      // For > 120 character long lines, cut at space boundaries into sublines\n      // of ~80 chars.\n      var sublines = breakLine(rawLines[i], maxLen);\n\n      for (var j = 0; j < sublines.length; j++) {\n        lines.push(sublines[j]);\n      }\n    }\n  }\n\n  return lines;\n}\n\nfunction breakLine(line, maxLen) {\n  if (line.length < maxLen + 5) {\n    return [line];\n  }\n\n  var parts = line.split(new RegExp(\"((?: |^).{15,\".concat(maxLen - 40, \"}(?= |$))\")));\n\n  if (parts.length < 4) {\n    return [line];\n  }\n\n  var sublines = [parts[0] + parts[1] + parts[2]];\n\n  for (var i = 3; i < parts.length; i += 2) {\n    sublines.push(parts[i].slice(1) + parts[i + 1]);\n  }\n\n  return sublines;\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { coerceValue } from './coerceValue';\n\n/**\n * Deprecated. Use coerceValue() directly for richer information.\n *\n * This function will be removed in v15\n */\nexport function isValidJSValue(value, type) {\n  var errors = coerceValue(value, type).errors;\n  return errors ? errors.map(function (error) {\n    return error.message;\n  }) : [];\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { TypeInfo } from './TypeInfo';\nimport { Kind } from '../language/kinds';\nimport { visit, visitWithTypeInfo } from '../language/visitor';\nimport { GraphQLSchema } from '../type/schema';\nimport { ValuesOfCorrectType } from '../validation/rules/ValuesOfCorrectType';\nimport { ValidationContext } from '../validation/ValidationContext';\n/**\n * Utility which determines if a value literal node is valid for an input type.\n *\n * Deprecated. Rely on validation for documents containing literal values.\n *\n * This function will be removed in v15\n */\n\nexport function isValidLiteralValue(type, valueNode) {\n  var emptySchema = new GraphQLSchema({});\n  var emptyDoc = {\n    kind: Kind.DOCUMENT,\n    definitions: []\n  };\n  var typeInfo = new TypeInfo(emptySchema, undefined, type);\n  var context = new ValidationContext(emptySchema, emptyDoc, typeInfo);\n  var visitor = ValuesOfCorrectType(context);\n  visit(valueNode, visitWithTypeInfo(typeInfo, visitor));\n  return context.getErrors();\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Provided a collection of ASTs, presumably each from different files,\n * concatenate the ASTs together into batched AST, useful for validating many\n * GraphQL source files which together represent one conceptual application.\n */\nexport function concatAST(asts) {\n  var batchDefinitions = [];\n\n  for (var i = 0; i < asts.length; i++) {\n    var definitions = asts[i].definitions;\n\n    for (var j = 0; j < definitions.length; j++) {\n      batchDefinitions.push(definitions[j]);\n    }\n  }\n\n  return {\n    kind: 'Document',\n    definitions: batchDefinitions\n  };\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { visit } from '../language/visitor';\n\n/**\n * separateOperations accepts a single AST document which may contain many\n * operations and fragments and returns a collection of AST documents each of\n * which contains a single operation as well the fragment definitions it\n * refers to.\n */\nexport function separateOperations(documentAST) {\n  var operations = [];\n  var fragments = Object.create(null);\n  var positions = new Map();\n  var depGraph = Object.create(null);\n  var fromName;\n  var idx = 0; // Populate metadata and build a dependency graph.\n\n  visit(documentAST, {\n    OperationDefinition: function OperationDefinition(node) {\n      fromName = opName(node);\n      operations.push(node);\n      positions.set(node, idx++);\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      fromName = node.name.value;\n      fragments[fromName] = node;\n      positions.set(node, idx++);\n    },\n    FragmentSpread: function FragmentSpread(node) {\n      var toName = node.name.value;\n      (depGraph[fromName] || (depGraph[fromName] = Object.create(null)))[toName] = true;\n    }\n  }); // For each operation, produce a new synthesized AST which includes only what\n  // is necessary for completing that operation.\n\n  var separatedDocumentASTs = Object.create(null);\n\n  for (var _i = 0; _i < operations.length; _i++) {\n    var operation = operations[_i];\n    var operationName = opName(operation);\n    var dependencies = Object.create(null);\n    collectTransitiveDependencies(dependencies, depGraph, operationName); // The list of definition nodes to be included for this operation, sorted\n    // to retain the same order as the original document.\n\n    var definitions = [operation];\n\n    var _arr = Object.keys(dependencies);\n\n    for (var _i2 = 0; _i2 < _arr.length; _i2++) {\n      var name = _arr[_i2];\n      definitions.push(fragments[name]);\n    }\n\n    definitions.sort(function (n1, n2) {\n      return (positions.get(n1) || 0) - (positions.get(n2) || 0);\n    });\n    separatedDocumentASTs[operationName] = {\n      kind: 'Document',\n      definitions: definitions\n    };\n  }\n\n  return separatedDocumentASTs;\n}\n\n// Provides the empty string for anonymous operations.\nfunction opName(operation) {\n  return operation.name ? operation.name.value : '';\n} // From a dependency graph, collects a list of transitive dependencies by\n// recursing through a dependency graph.\n\n\nfunction collectTransitiveDependencies(collected, depGraph, fromName) {\n  var immediateDeps = depGraph[fromName];\n\n  if (immediateDeps) {\n    var _arr2 = Object.keys(immediateDeps);\n\n    for (var _i3 = 0; _i3 < _arr2.length; _i3++) {\n      var toName = _arr2[_i3];\n\n      if (!collected[toName]) {\n        collected[toName] = true;\n        collectTransitiveDependencies(collected, depGraph, toName);\n      }\n    }\n  }\n}","/**\n * Copyright (c) 2016-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, isNonNullType, isListType, isNamedType, isRequiredArgument, isRequiredInputField } from '../type/definition';\nimport keyMap from '../jsutils/keyMap';\nexport var BreakingChangeType = {\n  FIELD_CHANGED_KIND: 'FIELD_CHANGED_KIND',\n  FIELD_REMOVED: 'FIELD_REMOVED',\n  TYPE_CHANGED_KIND: 'TYPE_CHANGED_KIND',\n  TYPE_REMOVED: 'TYPE_REMOVED',\n  TYPE_REMOVED_FROM_UNION: 'TYPE_REMOVED_FROM_UNION',\n  VALUE_REMOVED_FROM_ENUM: 'VALUE_REMOVED_FROM_ENUM',\n  ARG_REMOVED: 'ARG_REMOVED',\n  ARG_CHANGED_KIND: 'ARG_CHANGED_KIND',\n  REQUIRED_ARG_ADDED: 'REQUIRED_ARG_ADDED',\n  REQUIRED_INPUT_FIELD_ADDED: 'REQUIRED_INPUT_FIELD_ADDED',\n  INTERFACE_REMOVED_FROM_OBJECT: 'INTERFACE_REMOVED_FROM_OBJECT',\n  DIRECTIVE_REMOVED: 'DIRECTIVE_REMOVED',\n  DIRECTIVE_ARG_REMOVED: 'DIRECTIVE_ARG_REMOVED',\n  DIRECTIVE_LOCATION_REMOVED: 'DIRECTIVE_LOCATION_REMOVED',\n  REQUIRED_DIRECTIVE_ARG_ADDED: 'REQUIRED_DIRECTIVE_ARG_ADDED'\n};\nexport var DangerousChangeType = {\n  ARG_DEFAULT_VALUE_CHANGE: 'ARG_DEFAULT_VALUE_CHANGE',\n  VALUE_ADDED_TO_ENUM: 'VALUE_ADDED_TO_ENUM',\n  INTERFACE_ADDED_TO_OBJECT: 'INTERFACE_ADDED_TO_OBJECT',\n  TYPE_ADDED_TO_UNION: 'TYPE_ADDED_TO_UNION',\n  OPTIONAL_INPUT_FIELD_ADDED: 'OPTIONAL_INPUT_FIELD_ADDED',\n  OPTIONAL_ARG_ADDED: 'OPTIONAL_ARG_ADDED'\n};\n\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of breaking changes covered by the other functions down below.\n */\nexport function findBreakingChanges(oldSchema, newSchema) {\n  return findRemovedTypes(oldSchema, newSchema).concat(findTypesThatChangedKind(oldSchema, newSchema), findFieldsThatChangedTypeOnObjectOrInterfaceTypes(oldSchema, newSchema), findFieldsThatChangedTypeOnInputObjectTypes(oldSchema, newSchema).breakingChanges, findTypesRemovedFromUnions(oldSchema, newSchema), findValuesRemovedFromEnums(oldSchema, newSchema), findArgChanges(oldSchema, newSchema).breakingChanges, findInterfacesRemovedFromObjectTypes(oldSchema, newSchema), findRemovedDirectives(oldSchema, newSchema), findRemovedDirectiveArgs(oldSchema, newSchema), findAddedNonNullDirectiveArgs(oldSchema, newSchema), findRemovedDirectiveLocations(oldSchema, newSchema));\n}\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of potentially dangerous changes covered by the other functions down below.\n */\n\nexport function findDangerousChanges(oldSchema, newSchema) {\n  return findArgChanges(oldSchema, newSchema).dangerousChanges.concat(findValuesAddedToEnums(oldSchema, newSchema), findInterfacesAddedToObjectTypes(oldSchema, newSchema), findTypesAddedToUnions(oldSchema, newSchema), findFieldsThatChangedTypeOnInputObjectTypes(oldSchema, newSchema).dangerousChanges);\n}\n/**\n * Given two schemas, returns an Array containing descriptions of any breaking\n * changes in the newSchema related to removing an entire type.\n */\n\nexport function findRemovedTypes(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n  var breakingChanges = [];\n\n  var _arr = Object.keys(oldTypeMap);\n\n  for (var _i = 0; _i < _arr.length; _i++) {\n    var typeName = _arr[_i];\n\n    if (!newTypeMap[typeName]) {\n      breakingChanges.push({\n        type: BreakingChangeType.TYPE_REMOVED,\n        description: \"\".concat(typeName, \" was removed.\")\n      });\n    }\n  }\n\n  return breakingChanges;\n}\n/**\n * Given two schemas, returns an Array containing descriptions of any breaking\n * changes in the newSchema related to changing the type of a type.\n */\n\nexport function findTypesThatChangedKind(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n  var breakingChanges = [];\n\n  var _arr2 = Object.keys(oldTypeMap);\n\n  for (var _i2 = 0; _i2 < _arr2.length; _i2++) {\n    var typeName = _arr2[_i2];\n\n    if (!newTypeMap[typeName]) {\n      continue;\n    }\n\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n\n    if (oldType.constructor !== newType.constructor) {\n      breakingChanges.push({\n        type: BreakingChangeType.TYPE_CHANGED_KIND,\n        description: \"\".concat(typeName, \" changed from \") + \"\".concat(typeKindName(oldType), \" to \").concat(typeKindName(newType), \".\")\n      });\n    }\n  }\n\n  return breakingChanges;\n}\n/**\n * Given two schemas, returns an Array containing descriptions of any\n * breaking or dangerous changes in the newSchema related to arguments\n * (such as removal or change of type of an argument, or a change in an\n * argument's default value).\n */\n\nexport function findArgChanges(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n  var breakingChanges = [];\n  var dangerousChanges = [];\n\n  var _arr3 = Object.keys(oldTypeMap);\n\n  for (var _i3 = 0; _i3 < _arr3.length; _i3++) {\n    var typeName = _arr3[_i3];\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n\n    if (!(isObjectType(oldType) || isInterfaceType(oldType)) || !(isObjectType(newType) || isInterfaceType(newType)) || newType.constructor !== oldType.constructor) {\n      continue;\n    }\n\n    var oldTypeFields = oldType.getFields();\n    var newTypeFields = newType.getFields();\n\n    var _arr4 = Object.keys(oldTypeFields);\n\n    for (var _i4 = 0; _i4 < _arr4.length; _i4++) {\n      var fieldName = _arr4[_i4];\n\n      if (!newTypeFields[fieldName]) {\n        continue;\n      }\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        var _loop = function _loop() {\n          var oldArgDef = _step.value;\n          var newArgs = newTypeFields[fieldName].args;\n          var newArgDef = newArgs.find(function (arg) {\n            return arg.name === oldArgDef.name;\n          }); // Arg not present\n\n          if (!newArgDef) {\n            breakingChanges.push({\n              type: BreakingChangeType.ARG_REMOVED,\n              description: \"\".concat(oldType.name, \".\").concat(fieldName, \" arg \") + \"\".concat(oldArgDef.name, \" was removed\")\n            });\n          } else {\n            var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(oldArgDef.type, newArgDef.type);\n\n            if (!isSafe) {\n              breakingChanges.push({\n                type: BreakingChangeType.ARG_CHANGED_KIND,\n                description: \"\".concat(oldType.name, \".\").concat(fieldName, \" arg \") + \"\".concat(oldArgDef.name, \" has changed type from \") + \"\".concat(oldArgDef.type.toString(), \" to \").concat(newArgDef.type.toString())\n              });\n            } else if (oldArgDef.defaultValue !== undefined && oldArgDef.defaultValue !== newArgDef.defaultValue) {\n              dangerousChanges.push({\n                type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n                description: \"\".concat(oldType.name, \".\").concat(fieldName, \" arg \") + \"\".concat(oldArgDef.name, \" has changed defaultValue\")\n              });\n            }\n          }\n        };\n\n        for (var _iterator = oldTypeFields[fieldName].args[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          _loop();\n        } // Check if arg was added to the field\n\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        var _loop2 = function _loop2() {\n          var newArgDef = _step2.value;\n          var oldArgs = oldTypeFields[fieldName].args;\n          var oldArgDef = oldArgs.find(function (arg) {\n            return arg.name === newArgDef.name;\n          });\n\n          if (!oldArgDef) {\n            var argName = newArgDef.name;\n\n            if (isRequiredArgument(newArgDef)) {\n              breakingChanges.push({\n                type: BreakingChangeType.REQUIRED_ARG_ADDED,\n                description: \"A required arg \".concat(argName, \" on \") + \"\".concat(typeName, \".\").concat(fieldName, \" was added\")\n              });\n            } else {\n              dangerousChanges.push({\n                type: DangerousChangeType.OPTIONAL_ARG_ADDED,\n                description: \"An optional arg \".concat(argName, \" on \") + \"\".concat(typeName, \".\").concat(fieldName, \" was added\")\n              });\n            }\n          }\n        };\n\n        for (var _iterator2 = newTypeFields[fieldName].args[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          _loop2();\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n  }\n\n  return {\n    breakingChanges: breakingChanges,\n    dangerousChanges: dangerousChanges\n  };\n}\n\nfunction typeKindName(type) {\n  if (isScalarType(type)) {\n    return 'a Scalar type';\n  }\n\n  if (isObjectType(type)) {\n    return 'an Object type';\n  }\n\n  if (isInterfaceType(type)) {\n    return 'an Interface type';\n  }\n\n  if (isUnionType(type)) {\n    return 'a Union type';\n  }\n\n  if (isEnumType(type)) {\n    return 'an Enum type';\n  }\n\n  if (isInputObjectType(type)) {\n    return 'an Input type';\n  }\n\n  throw new TypeError('Unknown type ' + type.constructor.name);\n}\n\nexport function findFieldsThatChangedTypeOnObjectOrInterfaceTypes(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n  var breakingChanges = [];\n\n  var _arr5 = Object.keys(oldTypeMap);\n\n  for (var _i5 = 0; _i5 < _arr5.length; _i5++) {\n    var typeName = _arr5[_i5];\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n\n    if (!(isObjectType(oldType) || isInterfaceType(oldType)) || !(isObjectType(newType) || isInterfaceType(newType)) || newType.constructor !== oldType.constructor) {\n      continue;\n    }\n\n    var oldTypeFieldsDef = oldType.getFields();\n    var newTypeFieldsDef = newType.getFields();\n\n    var _arr6 = Object.keys(oldTypeFieldsDef);\n\n    for (var _i6 = 0; _i6 < _arr6.length; _i6++) {\n      var fieldName = _arr6[_i6];\n\n      // Check if the field is missing on the type in the new schema.\n      if (!(fieldName in newTypeFieldsDef)) {\n        breakingChanges.push({\n          type: BreakingChangeType.FIELD_REMOVED,\n          description: \"\".concat(typeName, \".\").concat(fieldName, \" was removed.\")\n        });\n      } else {\n        var oldFieldType = oldTypeFieldsDef[fieldName].type;\n        var newFieldType = newTypeFieldsDef[fieldName].type;\n        var isSafe = isChangeSafeForObjectOrInterfaceField(oldFieldType, newFieldType);\n\n        if (!isSafe) {\n          var oldFieldTypeString = isNamedType(oldFieldType) ? oldFieldType.name : oldFieldType.toString();\n          var newFieldTypeString = isNamedType(newFieldType) ? newFieldType.name : newFieldType.toString();\n          breakingChanges.push({\n            type: BreakingChangeType.FIELD_CHANGED_KIND,\n            description: \"\".concat(typeName, \".\").concat(fieldName, \" changed type from \") + \"\".concat(oldFieldTypeString, \" to \").concat(newFieldTypeString, \".\")\n          });\n        }\n      }\n    }\n  }\n\n  return breakingChanges;\n}\nexport function findFieldsThatChangedTypeOnInputObjectTypes(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n  var breakingChanges = [];\n  var dangerousChanges = [];\n\n  var _arr7 = Object.keys(oldTypeMap);\n\n  for (var _i7 = 0; _i7 < _arr7.length; _i7++) {\n    var typeName = _arr7[_i7];\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n\n    if (!isInputObjectType(oldType) || !isInputObjectType(newType)) {\n      continue;\n    }\n\n    var oldTypeFieldsDef = oldType.getFields();\n    var newTypeFieldsDef = newType.getFields();\n\n    var _arr8 = Object.keys(oldTypeFieldsDef);\n\n    for (var _i8 = 0; _i8 < _arr8.length; _i8++) {\n      var fieldName = _arr8[_i8];\n\n      // Check if the field is missing on the type in the new schema.\n      if (!(fieldName in newTypeFieldsDef)) {\n        breakingChanges.push({\n          type: BreakingChangeType.FIELD_REMOVED,\n          description: \"\".concat(typeName, \".\").concat(fieldName, \" was removed.\")\n        });\n      } else {\n        var oldFieldType = oldTypeFieldsDef[fieldName].type;\n        var newFieldType = newTypeFieldsDef[fieldName].type;\n        var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(oldFieldType, newFieldType);\n\n        if (!isSafe) {\n          var oldFieldTypeString = isNamedType(oldFieldType) ? oldFieldType.name : oldFieldType.toString();\n          var newFieldTypeString = isNamedType(newFieldType) ? newFieldType.name : newFieldType.toString();\n          breakingChanges.push({\n            type: BreakingChangeType.FIELD_CHANGED_KIND,\n            description: \"\".concat(typeName, \".\").concat(fieldName, \" changed type from \") + \"\".concat(oldFieldTypeString, \" to \").concat(newFieldTypeString, \".\")\n          });\n        }\n      }\n    } // Check if a field was added to the input object type\n\n\n    var _arr9 = Object.keys(newTypeFieldsDef);\n\n    for (var _i9 = 0; _i9 < _arr9.length; _i9++) {\n      var _fieldName = _arr9[_i9];\n\n      if (!(_fieldName in oldTypeFieldsDef)) {\n        if (isRequiredInputField(newTypeFieldsDef[_fieldName])) {\n          breakingChanges.push({\n            type: BreakingChangeType.REQUIRED_INPUT_FIELD_ADDED,\n            description: \"A required field \".concat(_fieldName, \" on \") + \"input type \".concat(typeName, \" was added.\")\n          });\n        } else {\n          dangerousChanges.push({\n            type: DangerousChangeType.OPTIONAL_INPUT_FIELD_ADDED,\n            description: \"An optional field \".concat(_fieldName, \" on \") + \"input type \".concat(typeName, \" was added.\")\n          });\n        }\n      }\n    }\n  }\n\n  return {\n    breakingChanges: breakingChanges,\n    dangerousChanges: dangerousChanges\n  };\n}\n\nfunction isChangeSafeForObjectOrInterfaceField(oldType, newType) {\n  if (isNamedType(oldType)) {\n    return (// if they're both named types, see if their names are equivalent\n      isNamedType(newType) && oldType.name === newType.name || // moving from nullable to non-null of the same underlying type is safe\n      isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)\n    );\n  } else if (isListType(oldType)) {\n    return (// if they're both lists, make sure the underlying types are compatible\n      isListType(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType) || // moving from nullable to non-null of the same underlying type is safe\n      isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)\n    );\n  } else if (isNonNullType(oldType)) {\n    // if they're both non-null, make sure the underlying types are compatible\n    return isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType);\n  }\n\n  return false;\n}\n\nfunction isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {\n  if (isNamedType(oldType)) {\n    // if they're both named types, see if their names are equivalent\n    return isNamedType(newType) && oldType.name === newType.name;\n  } else if (isListType(oldType)) {\n    // if they're both lists, make sure the underlying types are compatible\n    return isListType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType);\n  } else if (isNonNullType(oldType)) {\n    return (// if they're both non-null, make sure the underlying types are\n      // compatible\n      isNonNullType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType) || // moving from non-null to nullable of the same underlying type is safe\n      !isNonNullType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType)\n    );\n  }\n\n  return false;\n}\n/**\n * Given two schemas, returns an Array containing descriptions of any breaking\n * changes in the newSchema related to removing types from a union type.\n */\n\n\nexport function findTypesRemovedFromUnions(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n  var typesRemovedFromUnion = [];\n\n  var _arr10 = Object.keys(oldTypeMap);\n\n  for (var _i10 = 0; _i10 < _arr10.length; _i10++) {\n    var typeName = _arr10[_i10];\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n\n    if (!isUnionType(oldType) || !isUnionType(newType)) {\n      continue;\n    }\n\n    var typeNamesInNewUnion = Object.create(null);\n    var _iteratorNormalCompletion3 = true;\n    var _didIteratorError3 = false;\n    var _iteratorError3 = undefined;\n\n    try {\n      for (var _iterator3 = newType.getTypes()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n        var type = _step3.value;\n        typeNamesInNewUnion[type.name] = true;\n      }\n    } catch (err) {\n      _didIteratorError3 = true;\n      _iteratorError3 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n          _iterator3.return();\n        }\n      } finally {\n        if (_didIteratorError3) {\n          throw _iteratorError3;\n        }\n      }\n    }\n\n    var _iteratorNormalCompletion4 = true;\n    var _didIteratorError4 = false;\n    var _iteratorError4 = undefined;\n\n    try {\n      for (var _iterator4 = oldType.getTypes()[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n        var _type = _step4.value;\n\n        if (!typeNamesInNewUnion[_type.name]) {\n          typesRemovedFromUnion.push({\n            type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,\n            description: \"\".concat(_type.name, \" was removed from union type \").concat(typeName, \".\")\n          });\n        }\n      }\n    } catch (err) {\n      _didIteratorError4 = true;\n      _iteratorError4 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n          _iterator4.return();\n        }\n      } finally {\n        if (_didIteratorError4) {\n          throw _iteratorError4;\n        }\n      }\n    }\n  }\n\n  return typesRemovedFromUnion;\n}\n/**\n * Given two schemas, returns an Array containing descriptions of any dangerous\n * changes in the newSchema related to adding types to a union type.\n */\n\nexport function findTypesAddedToUnions(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n  var typesAddedToUnion = [];\n\n  var _arr11 = Object.keys(newTypeMap);\n\n  for (var _i11 = 0; _i11 < _arr11.length; _i11++) {\n    var typeName = _arr11[_i11];\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n\n    if (!isUnionType(oldType) || !isUnionType(newType)) {\n      continue;\n    }\n\n    var typeNamesInOldUnion = Object.create(null);\n    var _iteratorNormalCompletion5 = true;\n    var _didIteratorError5 = false;\n    var _iteratorError5 = undefined;\n\n    try {\n      for (var _iterator5 = oldType.getTypes()[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n        var type = _step5.value;\n        typeNamesInOldUnion[type.name] = true;\n      }\n    } catch (err) {\n      _didIteratorError5 = true;\n      _iteratorError5 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n          _iterator5.return();\n        }\n      } finally {\n        if (_didIteratorError5) {\n          throw _iteratorError5;\n        }\n      }\n    }\n\n    var _iteratorNormalCompletion6 = true;\n    var _didIteratorError6 = false;\n    var _iteratorError6 = undefined;\n\n    try {\n      for (var _iterator6 = newType.getTypes()[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n        var _type2 = _step6.value;\n\n        if (!typeNamesInOldUnion[_type2.name]) {\n          typesAddedToUnion.push({\n            type: DangerousChangeType.TYPE_ADDED_TO_UNION,\n            description: \"\".concat(_type2.name, \" was added to union type \").concat(typeName, \".\")\n          });\n        }\n      }\n    } catch (err) {\n      _didIteratorError6 = true;\n      _iteratorError6 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n          _iterator6.return();\n        }\n      } finally {\n        if (_didIteratorError6) {\n          throw _iteratorError6;\n        }\n      }\n    }\n  }\n\n  return typesAddedToUnion;\n}\n/**\n * Given two schemas, returns an Array containing descriptions of any breaking\n * changes in the newSchema related to removing values from an enum type.\n */\n\nexport function findValuesRemovedFromEnums(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n  var valuesRemovedFromEnums = [];\n\n  var _arr12 = Object.keys(oldTypeMap);\n\n  for (var _i12 = 0; _i12 < _arr12.length; _i12++) {\n    var typeName = _arr12[_i12];\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n\n    if (!isEnumType(oldType) || !isEnumType(newType)) {\n      continue;\n    }\n\n    var valuesInNewEnum = Object.create(null);\n    var _iteratorNormalCompletion7 = true;\n    var _didIteratorError7 = false;\n    var _iteratorError7 = undefined;\n\n    try {\n      for (var _iterator7 = newType.getValues()[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n        var value = _step7.value;\n        valuesInNewEnum[value.name] = true;\n      }\n    } catch (err) {\n      _didIteratorError7 = true;\n      _iteratorError7 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n          _iterator7.return();\n        }\n      } finally {\n        if (_didIteratorError7) {\n          throw _iteratorError7;\n        }\n      }\n    }\n\n    var _iteratorNormalCompletion8 = true;\n    var _didIteratorError8 = false;\n    var _iteratorError8 = undefined;\n\n    try {\n      for (var _iterator8 = oldType.getValues()[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n        var _value = _step8.value;\n\n        if (!valuesInNewEnum[_value.name]) {\n          valuesRemovedFromEnums.push({\n            type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,\n            description: \"\".concat(_value.name, \" was removed from enum type \").concat(typeName, \".\")\n          });\n        }\n      }\n    } catch (err) {\n      _didIteratorError8 = true;\n      _iteratorError8 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n          _iterator8.return();\n        }\n      } finally {\n        if (_didIteratorError8) {\n          throw _iteratorError8;\n        }\n      }\n    }\n  }\n\n  return valuesRemovedFromEnums;\n}\n/**\n * Given two schemas, returns an Array containing descriptions of any dangerous\n * changes in the newSchema related to adding values to an enum type.\n */\n\nexport function findValuesAddedToEnums(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n  var valuesAddedToEnums = [];\n\n  var _arr13 = Object.keys(oldTypeMap);\n\n  for (var _i13 = 0; _i13 < _arr13.length; _i13++) {\n    var typeName = _arr13[_i13];\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n\n    if (!isEnumType(oldType) || !isEnumType(newType)) {\n      continue;\n    }\n\n    var valuesInOldEnum = Object.create(null);\n    var _iteratorNormalCompletion9 = true;\n    var _didIteratorError9 = false;\n    var _iteratorError9 = undefined;\n\n    try {\n      for (var _iterator9 = oldType.getValues()[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n        var value = _step9.value;\n        valuesInOldEnum[value.name] = true;\n      }\n    } catch (err) {\n      _didIteratorError9 = true;\n      _iteratorError9 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion9 && _iterator9.return != null) {\n          _iterator9.return();\n        }\n      } finally {\n        if (_didIteratorError9) {\n          throw _iteratorError9;\n        }\n      }\n    }\n\n    var _iteratorNormalCompletion10 = true;\n    var _didIteratorError10 = false;\n    var _iteratorError10 = undefined;\n\n    try {\n      for (var _iterator10 = newType.getValues()[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n        var _value2 = _step10.value;\n\n        if (!valuesInOldEnum[_value2.name]) {\n          valuesAddedToEnums.push({\n            type: DangerousChangeType.VALUE_ADDED_TO_ENUM,\n            description: \"\".concat(_value2.name, \" was added to enum type \").concat(typeName, \".\")\n          });\n        }\n      }\n    } catch (err) {\n      _didIteratorError10 = true;\n      _iteratorError10 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion10 && _iterator10.return != null) {\n          _iterator10.return();\n        }\n      } finally {\n        if (_didIteratorError10) {\n          throw _iteratorError10;\n        }\n      }\n    }\n  }\n\n  return valuesAddedToEnums;\n}\nexport function findInterfacesRemovedFromObjectTypes(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n  var breakingChanges = [];\n\n  var _arr14 = Object.keys(oldTypeMap);\n\n  for (var _i14 = 0; _i14 < _arr14.length; _i14++) {\n    var typeName = _arr14[_i14];\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n\n    if (!isObjectType(oldType) || !isObjectType(newType)) {\n      continue;\n    }\n\n    var oldInterfaces = oldType.getInterfaces();\n    var newInterfaces = newType.getInterfaces();\n    var _iteratorNormalCompletion11 = true;\n    var _didIteratorError11 = false;\n    var _iteratorError11 = undefined;\n\n    try {\n      var _loop3 = function _loop3() {\n        var oldInterface = _step11.value;\n\n        if (!newInterfaces.some(function (int) {\n          return int.name === oldInterface.name;\n        })) {\n          breakingChanges.push({\n            type: BreakingChangeType.INTERFACE_REMOVED_FROM_OBJECT,\n            description: \"\".concat(typeName, \" no longer implements interface \") + \"\".concat(oldInterface.name, \".\")\n          });\n        }\n      };\n\n      for (var _iterator11 = oldInterfaces[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {\n        _loop3();\n      }\n    } catch (err) {\n      _didIteratorError11 = true;\n      _iteratorError11 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion11 && _iterator11.return != null) {\n          _iterator11.return();\n        }\n      } finally {\n        if (_didIteratorError11) {\n          throw _iteratorError11;\n        }\n      }\n    }\n  }\n\n  return breakingChanges;\n}\nexport function findInterfacesAddedToObjectTypes(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n  var interfacesAddedToObjectTypes = [];\n\n  var _arr15 = Object.keys(newTypeMap);\n\n  for (var _i15 = 0; _i15 < _arr15.length; _i15++) {\n    var typeName = _arr15[_i15];\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n\n    if (!isObjectType(oldType) || !isObjectType(newType)) {\n      continue;\n    }\n\n    var oldInterfaces = oldType.getInterfaces();\n    var newInterfaces = newType.getInterfaces();\n    var _iteratorNormalCompletion12 = true;\n    var _didIteratorError12 = false;\n    var _iteratorError12 = undefined;\n\n    try {\n      var _loop4 = function _loop4() {\n        var newInterface = _step12.value;\n\n        if (!oldInterfaces.some(function (int) {\n          return int.name === newInterface.name;\n        })) {\n          interfacesAddedToObjectTypes.push({\n            type: DangerousChangeType.INTERFACE_ADDED_TO_OBJECT,\n            description: \"\".concat(newInterface.name, \" added to interfaces implemented \") + \"by \".concat(typeName, \".\")\n          });\n        }\n      };\n\n      for (var _iterator12 = newInterfaces[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {\n        _loop4();\n      }\n    } catch (err) {\n      _didIteratorError12 = true;\n      _iteratorError12 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion12 && _iterator12.return != null) {\n          _iterator12.return();\n        }\n      } finally {\n        if (_didIteratorError12) {\n          throw _iteratorError12;\n        }\n      }\n    }\n  }\n\n  return interfacesAddedToObjectTypes;\n}\nexport function findRemovedDirectives(oldSchema, newSchema) {\n  var removedDirectives = [];\n  var newSchemaDirectiveMap = getDirectiveMapForSchema(newSchema);\n  var _iteratorNormalCompletion13 = true;\n  var _didIteratorError13 = false;\n  var _iteratorError13 = undefined;\n\n  try {\n    for (var _iterator13 = oldSchema.getDirectives()[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {\n      var directive = _step13.value;\n\n      if (!newSchemaDirectiveMap[directive.name]) {\n        removedDirectives.push({\n          type: BreakingChangeType.DIRECTIVE_REMOVED,\n          description: \"\".concat(directive.name, \" was removed\")\n        });\n      }\n    }\n  } catch (err) {\n    _didIteratorError13 = true;\n    _iteratorError13 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion13 && _iterator13.return != null) {\n        _iterator13.return();\n      }\n    } finally {\n      if (_didIteratorError13) {\n        throw _iteratorError13;\n      }\n    }\n  }\n\n  return removedDirectives;\n}\n\nfunction findRemovedArgsForDirective(oldDirective, newDirective) {\n  var removedArgs = [];\n  var newArgMap = getArgumentMapForDirective(newDirective);\n  var _iteratorNormalCompletion14 = true;\n  var _didIteratorError14 = false;\n  var _iteratorError14 = undefined;\n\n  try {\n    for (var _iterator14 = oldDirective.args[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {\n      var arg = _step14.value;\n\n      if (!newArgMap[arg.name]) {\n        removedArgs.push(arg);\n      }\n    }\n  } catch (err) {\n    _didIteratorError14 = true;\n    _iteratorError14 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion14 && _iterator14.return != null) {\n        _iterator14.return();\n      }\n    } finally {\n      if (_didIteratorError14) {\n        throw _iteratorError14;\n      }\n    }\n  }\n\n  return removedArgs;\n}\n\nexport function findRemovedDirectiveArgs(oldSchema, newSchema) {\n  var removedDirectiveArgs = [];\n  var oldSchemaDirectiveMap = getDirectiveMapForSchema(oldSchema);\n  var _iteratorNormalCompletion15 = true;\n  var _didIteratorError15 = false;\n  var _iteratorError15 = undefined;\n\n  try {\n    for (var _iterator15 = newSchema.getDirectives()[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {\n      var newDirective = _step15.value;\n      var oldDirective = oldSchemaDirectiveMap[newDirective.name];\n\n      if (!oldDirective) {\n        continue;\n      }\n\n      var _iteratorNormalCompletion16 = true;\n      var _didIteratorError16 = false;\n      var _iteratorError16 = undefined;\n\n      try {\n        for (var _iterator16 = findRemovedArgsForDirective(oldDirective, newDirective)[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {\n          var arg = _step16.value;\n          removedDirectiveArgs.push({\n            type: BreakingChangeType.DIRECTIVE_ARG_REMOVED,\n            description: \"\".concat(arg.name, \" was removed from \").concat(newDirective.name)\n          });\n        }\n      } catch (err) {\n        _didIteratorError16 = true;\n        _iteratorError16 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion16 && _iterator16.return != null) {\n            _iterator16.return();\n          }\n        } finally {\n          if (_didIteratorError16) {\n            throw _iteratorError16;\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError15 = true;\n    _iteratorError15 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion15 && _iterator15.return != null) {\n        _iterator15.return();\n      }\n    } finally {\n      if (_didIteratorError15) {\n        throw _iteratorError15;\n      }\n    }\n  }\n\n  return removedDirectiveArgs;\n}\n\nfunction findAddedArgsForDirective(oldDirective, newDirective) {\n  var addedArgs = [];\n  var oldArgMap = getArgumentMapForDirective(oldDirective);\n  var _iteratorNormalCompletion17 = true;\n  var _didIteratorError17 = false;\n  var _iteratorError17 = undefined;\n\n  try {\n    for (var _iterator17 = newDirective.args[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {\n      var arg = _step17.value;\n\n      if (!oldArgMap[arg.name]) {\n        addedArgs.push(arg);\n      }\n    }\n  } catch (err) {\n    _didIteratorError17 = true;\n    _iteratorError17 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion17 && _iterator17.return != null) {\n        _iterator17.return();\n      }\n    } finally {\n      if (_didIteratorError17) {\n        throw _iteratorError17;\n      }\n    }\n  }\n\n  return addedArgs;\n}\n\nexport function findAddedNonNullDirectiveArgs(oldSchema, newSchema) {\n  var addedNonNullableArgs = [];\n  var oldSchemaDirectiveMap = getDirectiveMapForSchema(oldSchema);\n  var _iteratorNormalCompletion18 = true;\n  var _didIteratorError18 = false;\n  var _iteratorError18 = undefined;\n\n  try {\n    for (var _iterator18 = newSchema.getDirectives()[Symbol.iterator](), _step18; !(_iteratorNormalCompletion18 = (_step18 = _iterator18.next()).done); _iteratorNormalCompletion18 = true) {\n      var newDirective = _step18.value;\n      var oldDirective = oldSchemaDirectiveMap[newDirective.name];\n\n      if (!oldDirective) {\n        continue;\n      }\n\n      var _iteratorNormalCompletion19 = true;\n      var _didIteratorError19 = false;\n      var _iteratorError19 = undefined;\n\n      try {\n        for (var _iterator19 = findAddedArgsForDirective(oldDirective, newDirective)[Symbol.iterator](), _step19; !(_iteratorNormalCompletion19 = (_step19 = _iterator19.next()).done); _iteratorNormalCompletion19 = true) {\n          var arg = _step19.value;\n\n          if (isRequiredArgument(arg)) {\n            addedNonNullableArgs.push({\n              type: BreakingChangeType.REQUIRED_DIRECTIVE_ARG_ADDED,\n              description: \"A required arg \".concat(arg.name, \" on directive \") + \"\".concat(newDirective.name, \" was added\")\n            });\n          }\n        }\n      } catch (err) {\n        _didIteratorError19 = true;\n        _iteratorError19 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion19 && _iterator19.return != null) {\n            _iterator19.return();\n          }\n        } finally {\n          if (_didIteratorError19) {\n            throw _iteratorError19;\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError18 = true;\n    _iteratorError18 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion18 && _iterator18.return != null) {\n        _iterator18.return();\n      }\n    } finally {\n      if (_didIteratorError18) {\n        throw _iteratorError18;\n      }\n    }\n  }\n\n  return addedNonNullableArgs;\n}\nexport function findRemovedLocationsForDirective(oldDirective, newDirective) {\n  var removedLocations = [];\n  var newLocationSet = new Set(newDirective.locations);\n  var _iteratorNormalCompletion20 = true;\n  var _didIteratorError20 = false;\n  var _iteratorError20 = undefined;\n\n  try {\n    for (var _iterator20 = oldDirective.locations[Symbol.iterator](), _step20; !(_iteratorNormalCompletion20 = (_step20 = _iterator20.next()).done); _iteratorNormalCompletion20 = true) {\n      var oldLocation = _step20.value;\n\n      if (!newLocationSet.has(oldLocation)) {\n        removedLocations.push(oldLocation);\n      }\n    }\n  } catch (err) {\n    _didIteratorError20 = true;\n    _iteratorError20 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion20 && _iterator20.return != null) {\n        _iterator20.return();\n      }\n    } finally {\n      if (_didIteratorError20) {\n        throw _iteratorError20;\n      }\n    }\n  }\n\n  return removedLocations;\n}\nexport function findRemovedDirectiveLocations(oldSchema, newSchema) {\n  var removedLocations = [];\n  var oldSchemaDirectiveMap = getDirectiveMapForSchema(oldSchema);\n  var _iteratorNormalCompletion21 = true;\n  var _didIteratorError21 = false;\n  var _iteratorError21 = undefined;\n\n  try {\n    for (var _iterator21 = newSchema.getDirectives()[Symbol.iterator](), _step21; !(_iteratorNormalCompletion21 = (_step21 = _iterator21.next()).done); _iteratorNormalCompletion21 = true) {\n      var newDirective = _step21.value;\n      var oldDirective = oldSchemaDirectiveMap[newDirective.name];\n\n      if (!oldDirective) {\n        continue;\n      }\n\n      var _iteratorNormalCompletion22 = true;\n      var _didIteratorError22 = false;\n      var _iteratorError22 = undefined;\n\n      try {\n        for (var _iterator22 = findRemovedLocationsForDirective(oldDirective, newDirective)[Symbol.iterator](), _step22; !(_iteratorNormalCompletion22 = (_step22 = _iterator22.next()).done); _iteratorNormalCompletion22 = true) {\n          var location = _step22.value;\n          removedLocations.push({\n            type: BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,\n            description: \"\".concat(location, \" was removed from \").concat(newDirective.name)\n          });\n        }\n      } catch (err) {\n        _didIteratorError22 = true;\n        _iteratorError22 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion22 && _iterator22.return != null) {\n            _iterator22.return();\n          }\n        } finally {\n          if (_didIteratorError22) {\n            throw _iteratorError22;\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError21 = true;\n    _iteratorError21 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion21 && _iterator21.return != null) {\n        _iterator21.return();\n      }\n    } finally {\n      if (_didIteratorError21) {\n        throw _iteratorError21;\n      }\n    }\n  }\n\n  return removedLocations;\n}\n\nfunction getDirectiveMapForSchema(schema) {\n  return keyMap(schema.getDirectives(), function (dir) {\n    return dir.name;\n  });\n}\n\nfunction getArgumentMapForDirective(directive) {\n  return keyMap(directive.args, function (arg) {\n    return arg.name;\n  });\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../error/GraphQLError';\nimport { visit, visitWithTypeInfo } from '../language/visitor';\nimport { getNamedType } from '../type/definition';\nimport { TypeInfo } from './TypeInfo';\n/**\n * A validation rule which reports deprecated usages.\n *\n * Returns a list of GraphQLError instances describing each deprecated use.\n */\n\nexport function findDeprecatedUsages(schema, ast) {\n  var errors = [];\n  var typeInfo = new TypeInfo(schema);\n  visit(ast, visitWithTypeInfo(typeInfo, {\n    Field: function Field(node) {\n      var fieldDef = typeInfo.getFieldDef();\n\n      if (fieldDef && fieldDef.isDeprecated) {\n        var parentType = typeInfo.getParentType();\n\n        if (parentType) {\n          var reason = fieldDef.deprecationReason;\n          errors.push(new GraphQLError(\"The field \".concat(parentType.name, \".\").concat(fieldDef.name, \" is deprecated.\") + (reason ? ' ' + reason : ''), [node]));\n        }\n      }\n    },\n    EnumValue: function EnumValue(node) {\n      var enumVal = typeInfo.getEnumValue();\n\n      if (enumVal && enumVal.isDeprecated) {\n        var type = getNamedType(typeInfo.getInputType());\n\n        if (type) {\n          var reason = enumVal.deprecationReason;\n          errors.push(new GraphQLError(\"The enum value \".concat(type.name, \".\").concat(enumVal.name, \" is deprecated.\") + (reason ? ' ' + reason : ''), [node]));\n        }\n      }\n    }\n  }));\n  return errors;\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n// The GraphQL query recommended for a full schema introspection.\nexport { getIntrospectionQuery, // @deprecated, use getIntrospectionQuery() - will be removed in v15\nintrospectionQuery } from './introspectionQuery';\n// Gets the target Operation from a Document\nexport { getOperationAST } from './getOperationAST'; // Gets the Type for the target Operation AST.\n\nexport { getOperationRootType } from './getOperationRootType'; // Convert a GraphQLSchema to an IntrospectionQuery\n\nexport { introspectionFromSchema } from './introspectionFromSchema'; // Build a GraphQLSchema from an introspection result.\n\nexport { buildClientSchema } from './buildClientSchema'; // Build a GraphQLSchema from GraphQL Schema language.\n\nexport { buildASTSchema, buildSchema, // @deprecated: Get the description from a schema AST node and supports legacy\n// syntax for specifying descriptions - will be removed in v16\ngetDescription } from './buildASTSchema';\n// Extends an existing GraphQLSchema from a parsed GraphQL Schema language AST.\nexport { extendSchema } from './extendSchema'; // Sort a GraphQLSchema.\n\nexport { lexicographicSortSchema } from './lexicographicSortSchema'; // Print a GraphQLSchema to GraphQL Schema language.\n\nexport { printSchema, printType, printIntrospectionSchema } from './schemaPrinter'; // Create a GraphQLType from a GraphQL language AST.\n\nexport { typeFromAST } from './typeFromAST'; // Create a JavaScript value from a GraphQL language AST with a type.\n\nexport { valueFromAST } from './valueFromAST'; // Create a JavaScript value from a GraphQL language AST without a type.\n\nexport { valueFromASTUntyped } from './valueFromASTUntyped'; // Create a GraphQL language AST from a JavaScript value.\n\nexport { astFromValue } from './astFromValue'; // A helper to use within recursive-descent visitors which need to be aware of\n// the GraphQL type system.\n\nexport { TypeInfo } from './TypeInfo'; // Coerces a JavaScript value to a GraphQL type, or produces errors.\n\nexport { coerceValue } from './coerceValue'; // @deprecated use coerceValue - will be removed in v15\n\nexport { isValidJSValue } from './isValidJSValue'; // @deprecated use validation - will be removed in v15\n\nexport { isValidLiteralValue } from './isValidLiteralValue'; // Concatenates multiple AST together.\n\nexport { concatAST } from './concatAST'; // Separates an AST into an AST per Operation.\n\nexport { separateOperations } from './separateOperations'; // Comparators for types\n\nexport { isEqualType, isTypeSubTypeOf, doTypesOverlap } from './typeComparators'; // Asserts that a string is a valid GraphQL name\n\nexport { assertValidName, isValidNameError } from './assertValidName'; // Compares two GraphQLSchemas and detects breaking changes.\n\nexport { BreakingChangeType, DangerousChangeType, findBreakingChanges, findDangerousChanges } from './findBreakingChanges';\n// Report all deprecated usage within a GraphQL document.\nexport { findDeprecatedUsages } from './findDeprecatedUsages';","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * GraphQL.js provides a reference implementation for the GraphQL specification\n * but is also a useful utility for operating on GraphQL files and building\n * sophisticated tools.\n *\n * This primary module exports a general purpose function for fulfilling all\n * steps of the GraphQL specification in a single operation, but also includes\n * utilities for every part of the GraphQL specification:\n *\n *   - Parsing the GraphQL language.\n *   - Building a GraphQL type schema.\n *   - Validating a GraphQL request against a type schema.\n *   - Executing a GraphQL request against a type schema.\n *\n * This also includes utility functions for operating on GraphQL types and\n * GraphQL documents to facilitate building tools.\n *\n * You may also import from each sub-directory directly. For example, the\n * following two import statements are equivalent:\n *\n *     import { parse } from 'graphql';\n *     import { parse } from 'graphql/language';\n */\n// The primary entry point into fulfilling a GraphQL request.\nexport { graphql, graphqlSync } from './graphql'; // Create and operate on GraphQL type definitions and schema.\n\nexport { GraphQLSchema, // Definitions\nGraphQLScalarType, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType, GraphQLList, GraphQLNonNull, GraphQLDirective, // \"Enum\" of Type Kinds\nTypeKind, // Scalars\nspecifiedScalarTypes, GraphQLInt, GraphQLFloat, GraphQLString, GraphQLBoolean, GraphQLID, // Built-in Directives defined by the Spec\nspecifiedDirectives, GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective, // Constant Deprecation Reason\nDEFAULT_DEPRECATION_REASON, // Meta-field definitions.\nSchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef, // GraphQL Types for introspection.\nintrospectionTypes, __Schema, __Directive, __DirectiveLocation, __Type, __Field, __InputValue, __EnumValue, __TypeKind, // Predicates\nisSchema, isDirective, isType, isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, isListType, isNonNullType, isInputType, isOutputType, isLeafType, isCompositeType, isAbstractType, isWrappingType, isNullableType, isNamedType, isRequiredArgument, isRequiredInputField, isSpecifiedScalarType, isIntrospectionType, isSpecifiedDirective, // Assertions\nassertType, assertScalarType, assertObjectType, assertInterfaceType, assertUnionType, assertEnumType, assertInputObjectType, assertListType, assertNonNullType, assertInputType, assertOutputType, assertLeafType, assertCompositeType, assertAbstractType, assertWrappingType, assertNullableType, assertNamedType, // Un-modifiers\ngetNullableType, getNamedType, // Validate GraphQL schema.\nvalidateSchema, assertValidSchema } from './type';\n// Parse and operate on GraphQL language source files.\nexport { Source, getLocation, // Parse\nparse, parseValue, parseType, // Print\nprint, // Visit\nvisit, visitInParallel, visitWithTypeInfo, getVisitFn, Kind, TokenKind, DirectiveLocation, BREAK, // Predicates\nisDefinitionNode, isExecutableDefinitionNode, isSelectionNode, isValueNode, isTypeNode, isTypeSystemDefinitionNode, isTypeDefinitionNode, isTypeSystemExtensionNode, isTypeExtensionNode } from './language';\n// Execute GraphQL queries.\nexport { execute, defaultFieldResolver, responsePathAsArray, getDirectiveValues } from './execution';\nexport { subscribe, createSourceEventStream } from './subscription'; // Validate GraphQL queries.\n\nexport { validate, ValidationContext, // All validation rules in the GraphQL Specification.\nspecifiedRules, // Individual validation rules.\nFieldsOnCorrectTypeRule, FragmentsOnCompositeTypesRule, KnownArgumentNamesRule, KnownDirectivesRule, KnownFragmentNamesRule, KnownTypeNamesRule, LoneAnonymousOperationRule, NoFragmentCyclesRule, NoUndefinedVariablesRule, NoUnusedFragmentsRule, NoUnusedVariablesRule, OverlappingFieldsCanBeMergedRule, PossibleFragmentSpreadsRule, ProvidedRequiredArgumentsRule, ScalarLeafsRule, SingleFieldSubscriptionsRule, UniqueArgumentNamesRule, UniqueDirectivesPerLocationRule, UniqueFragmentNamesRule, UniqueInputFieldNamesRule, UniqueOperationNamesRule, UniqueVariableNamesRule, ValuesOfCorrectTypeRule, VariablesAreInputTypesRule, VariablesInAllowedPositionRule } from './validation';\n// Create, format, and print GraphQL errors.\nexport { GraphQLError, formatError, printError } from './error';\n// Utilities for operating on GraphQL type schema and parsed sources.\nexport { // Produce the GraphQL query recommended for a full schema introspection.\n// Accepts optional IntrospectionOptions.\ngetIntrospectionQuery, // @deprecated: use getIntrospectionQuery - will be removed in v15\nintrospectionQuery, // Gets the target Operation from a Document\ngetOperationAST, // Gets the Type for the target Operation AST.\ngetOperationRootType, // Convert a GraphQLSchema to an IntrospectionQuery\nintrospectionFromSchema, // Build a GraphQLSchema from an introspection result.\nbuildClientSchema, // Build a GraphQLSchema from a parsed GraphQL Schema language AST.\nbuildASTSchema, // Build a GraphQLSchema from a GraphQL schema language document.\nbuildSchema, // @deprecated: Get the description from a schema AST node and supports legacy\n// syntax for specifying descriptions - will be removed in v16\ngetDescription, // Extends an existing GraphQLSchema from a parsed GraphQL Schema\n// language AST.\nextendSchema, // Sort a GraphQLSchema.\nlexicographicSortSchema, // Print a GraphQLSchema to GraphQL Schema language.\nprintSchema, // Prints the built-in introspection schema in the Schema Language\n// format.\nprintIntrospectionSchema, // Print a GraphQLType to GraphQL Schema language.\nprintType, // Create a GraphQLType from a GraphQL language AST.\ntypeFromAST, // Create a JavaScript value from a GraphQL language AST with a Type.\nvalueFromAST, // Create a JavaScript value from a GraphQL language AST without a Type.\nvalueFromASTUntyped, // Create a GraphQL language AST from a JavaScript value.\nastFromValue, // A helper to use within recursive-descent visitors which need to be aware of\n// the GraphQL type system.\nTypeInfo, // Coerces a JavaScript value to a GraphQL type, or produces errors.\ncoerceValue, // @deprecated use coerceValue - will be removed in v15\nisValidJSValue, // @deprecated use validation - will be removed in v15\nisValidLiteralValue, // Concatenates multiple AST together.\nconcatAST, // Separates an AST into an AST per Operation.\nseparateOperations, // Comparators for types\nisEqualType, isTypeSubTypeOf, doTypesOverlap, // Asserts a string is a valid GraphQL name.\nassertValidName, // Determine if a string is a valid GraphQL name.\nisValidNameError, // Compares two GraphQLSchemas and detects breaking changes.\nfindBreakingChanges, findDangerousChanges, BreakingChangeType, DangerousChangeType, // Report all deprecated usage within a GraphQL document.\nfindDeprecatedUsages } from './utilities';","import { print } from 'graphql';\nimport { checkDocument, removeDirectivesFromDocument } from 'apollo-utilities';\nvar connectionRemoveConfig = {\n    test: function (directive) { return directive.name.value === 'client'; },\n    remove: true,\n};\nvar removed = new Map();\nexport function removeClientSetsFromDocument(query) {\n    var cached = removed.get(query);\n    if (cached)\n        return cached;\n    checkDocument(query);\n    var docClone = removeDirectivesFromDocument([connectionRemoveConfig], query);\n    removed.set(query, docClone);\n    return docClone;\n}\nexport function normalizeTypeDefs(typeDefs) {\n    var defs = Array.isArray(typeDefs) ? typeDefs : [typeDefs];\n    return defs\n        .map(function (typeDef) { return (typeof typeDef === 'string' ? typeDef : print(typeDef)); })\n        .map(function (str) { return str.trim(); })\n        .join('\\n');\n}\n//# sourceMappingURL=utils.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { ApolloLink, Observable, } from 'apollo-link';\nimport { hasDirectives, getMainDefinition } from 'apollo-utilities';\nimport * as Async from 'graphql-anywhere/lib/async';\nvar graphql = Async.graphql;\nimport { removeClientSetsFromDocument, normalizeTypeDefs } from './utils';\nvar capitalizeFirstLetter = function (str) { return str.charAt(0).toUpperCase() + str.slice(1); };\nexport var withClientState = function (clientStateConfig) {\n    if (clientStateConfig === void 0) { clientStateConfig = { resolvers: {}, defaults: {} }; }\n    var defaults = clientStateConfig.defaults, cache = clientStateConfig.cache, typeDefs = clientStateConfig.typeDefs, fragmentMatcher = clientStateConfig.fragmentMatcher;\n    if (cache && defaults) {\n        cache.writeData({ data: defaults });\n    }\n    return new (function (_super) {\n        __extends(StateLink, _super);\n        function StateLink() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        StateLink.prototype.writeDefaults = function () {\n            if (cache && defaults) {\n                cache.writeData({ data: defaults });\n            }\n        };\n        StateLink.prototype.request = function (operation, forward) {\n            if (forward === void 0) { forward = function () { return Observable.of({ data: {} }); }; }\n            if (typeDefs) {\n                var directives_1 = 'directive @client on FIELD';\n                var definition_1 = normalizeTypeDefs(typeDefs);\n                operation.setContext(function (_a) {\n                    var _b = _a.schemas, schemas = _b === void 0 ? [] : _b;\n                    return ({\n                        schemas: schemas.concat([{ definition: definition_1, directives: directives_1 }]),\n                    });\n                });\n            }\n            var isClient = hasDirectives(['client'], operation.query);\n            if (!isClient)\n                return forward(operation);\n            var resolvers = typeof clientStateConfig.resolvers === 'function'\n                ? clientStateConfig.resolvers()\n                : clientStateConfig.resolvers;\n            var server = removeClientSetsFromDocument(operation.query);\n            var query = operation.query;\n            var type = capitalizeFirstLetter((getMainDefinition(query) || {}).operation) || 'Query';\n            var resolver = function (fieldName, rootValue, args, context, info) {\n                if (rootValue === void 0) { rootValue = {}; }\n                var resultKey = info.resultKey;\n                var aliasedNode = rootValue[resultKey];\n                var preAliasingNode = rootValue[fieldName];\n                var aliasNeeded = resultKey !== fieldName;\n                if (aliasedNode !== undefined || preAliasingNode !== undefined) {\n                    return aliasedNode || preAliasingNode;\n                }\n                var resolverMap = resolvers[rootValue.__typename || type];\n                if (resolverMap) {\n                    var resolve = resolverMap[fieldName];\n                    if (resolve)\n                        return resolve(rootValue, args, context, info);\n                }\n                return ((aliasNeeded ? aliasedNode : preAliasingNode) ||\n                    (defaults || {})[fieldName]);\n            };\n            if (server)\n                operation.query = server;\n            var obs = server && forward\n                ? forward(operation)\n                : Observable.of({\n                    data: {},\n                });\n            return new Observable(function (observer) {\n                var complete = false;\n                var handlingNext = false;\n                obs.subscribe({\n                    next: function (_a) {\n                        var data = _a.data, errors = _a.errors;\n                        var observerErrorHandler = observer.error.bind(observer);\n                        var context = operation.getContext();\n                        handlingNext = true;\n                        graphql(resolver, query, data, context, operation.variables, {\n                            fragmentMatcher: fragmentMatcher,\n                        })\n                            .then(function (nextData) {\n                            observer.next({\n                                data: nextData,\n                                errors: errors,\n                            });\n                            if (complete) {\n                                observer.complete();\n                            }\n                            handlingNext = false;\n                        })\n                            .catch(observerErrorHandler);\n                    },\n                    error: observer.error.bind(observer),\n                    complete: function () {\n                        if (!handlingNext) {\n                            observer.complete();\n                        }\n                        complete = true;\n                    },\n                });\n            });\n        };\n        return StateLink;\n    }(ApolloLink))();\n};\n//# sourceMappingURL=index.js.map","import { __extends } from 'tslib';\nimport { ApolloLink, Observable } from 'apollo-link';\n\nfunction onError(errorHandler) {\n    return new ApolloLink(function (operation, forward) {\n        return new Observable(function (observer) {\n            var sub;\n            var retriedSub;\n            var retriedResult;\n            try {\n                sub = forward(operation).subscribe({\n                    next: function (result) {\n                        if (result.errors) {\n                            retriedResult = errorHandler({\n                                graphQLErrors: result.errors,\n                                response: result,\n                                operation: operation,\n                                forward: forward,\n                            });\n                            if (retriedResult) {\n                                retriedSub = retriedResult.subscribe({\n                                    next: observer.next.bind(observer),\n                                    error: observer.error.bind(observer),\n                                    complete: observer.complete.bind(observer),\n                                });\n                                return;\n                            }\n                        }\n                        observer.next(result);\n                    },\n                    error: function (networkError) {\n                        retriedResult = errorHandler({\n                            operation: operation,\n                            networkError: networkError,\n                            graphQLErrors: networkError &&\n                                networkError.result &&\n                                networkError.result.errors,\n                            forward: forward,\n                        });\n                        if (retriedResult) {\n                            retriedSub = retriedResult.subscribe({\n                                next: observer.next.bind(observer),\n                                error: observer.error.bind(observer),\n                                complete: observer.complete.bind(observer),\n                            });\n                            return;\n                        }\n                        observer.error(networkError);\n                    },\n                    complete: function () {\n                        if (!retriedResult) {\n                            observer.complete.bind(observer)();\n                        }\n                    },\n                });\n            }\n            catch (e) {\n                errorHandler({ networkError: e, operation: operation, forward: forward });\n                observer.error(e);\n            }\n            return function () {\n                if (sub)\n                    sub.unsubscribe();\n                if (retriedSub)\n                    sub.unsubscribe();\n            };\n        });\n    });\n}\nvar ErrorLink = (function (_super) {\n    __extends(ErrorLink, _super);\n    function ErrorLink(errorHandler) {\n        var _this = _super.call(this) || this;\n        _this.link = onError(errorHandler);\n        return _this;\n    }\n    ErrorLink.prototype.request = function (operation, forward) {\n        return this.link.request(operation, forward);\n    };\n    return ErrorLink;\n}(ApolloLink));\n\nexport { ErrorLink, onError };\n//# sourceMappingURL=bundle.esm.js.map\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parse = parse;\nexports.parseValue = parseValue;\nexports.parseType = parseType;\nexports.parseConstValue = parseConstValue;\nexports.parseTypeReference = parseTypeReference;\nexports.parseNamedType = parseNamedType;\n\nvar _inspect = _interopRequireDefault(require(\"../jsutils/inspect\"));\n\nvar _source = require(\"./source\");\n\nvar _error = require(\"../error\");\n\nvar _lexer = require(\"./lexer\");\n\nvar _kinds = require(\"./kinds\");\n\nvar _directiveLocation = require(\"./directiveLocation\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nfunction parse(source, options) {\n  var sourceObj = typeof source === 'string' ? new _source.Source(source) : source;\n\n  if (!(sourceObj instanceof _source.Source)) {\n    throw new TypeError(\"Must provide Source. Received: \".concat((0, _inspect.default)(sourceObj)));\n  }\n\n  var lexer = (0, _lexer.createLexer)(sourceObj, options || {});\n  return parseDocument(lexer);\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\n\nfunction parseValue(source, options) {\n  var sourceObj = typeof source === 'string' ? new _source.Source(source) : source;\n  var lexer = (0, _lexer.createLexer)(sourceObj, options || {});\n  expect(lexer, _lexer.TokenKind.SOF);\n  var value = parseValueLiteral(lexer, false);\n  expect(lexer, _lexer.TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\n\nfunction parseType(source, options) {\n  var sourceObj = typeof source === 'string' ? new _source.Source(source) : source;\n  var lexer = (0, _lexer.createLexer)(sourceObj, options || {});\n  expect(lexer, _lexer.TokenKind.SOF);\n  var type = parseTypeReference(lexer);\n  expect(lexer, _lexer.TokenKind.EOF);\n  return type;\n}\n/**\n * Converts a name lex token into a name parse node.\n */\n\n\nfunction parseName(lexer) {\n  var token = expect(lexer, _lexer.TokenKind.NAME);\n  return {\n    kind: _kinds.Kind.NAME,\n    value: token.value,\n    loc: loc(lexer, token)\n  };\n} // Implements the parsing rules in the Document section.\n\n/**\n * Document : Definition+\n */\n\n\nfunction parseDocument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.Kind.DOCUMENT,\n    definitions: many(lexer, _lexer.TokenKind.SOF, parseDefinition, _lexer.TokenKind.EOF),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Definition :\n *   - ExecutableDefinition\n *   - TypeSystemDefinition\n *   - TypeSystemExtension\n */\n\n\nfunction parseDefinition(lexer) {\n  if (peek(lexer, _lexer.TokenKind.NAME)) {\n    switch (lexer.token.value) {\n      case 'query':\n      case 'mutation':\n      case 'subscription':\n      case 'fragment':\n        return parseExecutableDefinition(lexer);\n\n      case 'schema':\n      case 'scalar':\n      case 'type':\n      case 'interface':\n      case 'union':\n      case 'enum':\n      case 'input':\n      case 'directive':\n        return parseTypeSystemDefinition(lexer);\n\n      case 'extend':\n        return parseTypeSystemExtension(lexer);\n    }\n  } else if (peek(lexer, _lexer.TokenKind.BRACE_L)) {\n    return parseExecutableDefinition(lexer);\n  } else if (peekDescription(lexer)) {\n    return parseTypeSystemDefinition(lexer);\n  }\n\n  throw unexpected(lexer);\n}\n/**\n * ExecutableDefinition :\n *   - OperationDefinition\n *   - FragmentDefinition\n */\n\n\nfunction parseExecutableDefinition(lexer) {\n  if (peek(lexer, _lexer.TokenKind.NAME)) {\n    switch (lexer.token.value) {\n      case 'query':\n      case 'mutation':\n      case 'subscription':\n        return parseOperationDefinition(lexer);\n\n      case 'fragment':\n        return parseFragmentDefinition(lexer);\n    }\n  } else if (peek(lexer, _lexer.TokenKind.BRACE_L)) {\n    return parseOperationDefinition(lexer);\n  }\n\n  throw unexpected(lexer);\n} // Implements the parsing rules in the Operations section.\n\n/**\n * OperationDefinition :\n *  - SelectionSet\n *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n */\n\n\nfunction parseOperationDefinition(lexer) {\n  var start = lexer.token;\n\n  if (peek(lexer, _lexer.TokenKind.BRACE_L)) {\n    return {\n      kind: _kinds.Kind.OPERATION_DEFINITION,\n      operation: 'query',\n      name: undefined,\n      variableDefinitions: [],\n      directives: [],\n      selectionSet: parseSelectionSet(lexer),\n      loc: loc(lexer, start)\n    };\n  }\n\n  var operation = parseOperationType(lexer);\n  var name;\n\n  if (peek(lexer, _lexer.TokenKind.NAME)) {\n    name = parseName(lexer);\n  }\n\n  return {\n    kind: _kinds.Kind.OPERATION_DEFINITION,\n    operation: operation,\n    name: name,\n    variableDefinitions: parseVariableDefinitions(lexer),\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * OperationType : one of query mutation subscription\n */\n\n\nfunction parseOperationType(lexer) {\n  var operationToken = expect(lexer, _lexer.TokenKind.NAME);\n\n  switch (operationToken.value) {\n    case 'query':\n      return 'query';\n\n    case 'mutation':\n      return 'mutation';\n\n    case 'subscription':\n      return 'subscription';\n  }\n\n  throw unexpected(lexer, operationToken);\n}\n/**\n * VariableDefinitions : ( VariableDefinition+ )\n */\n\n\nfunction parseVariableDefinitions(lexer) {\n  return peek(lexer, _lexer.TokenKind.PAREN_L) ? many(lexer, _lexer.TokenKind.PAREN_L, parseVariableDefinition, _lexer.TokenKind.PAREN_R) : [];\n}\n/**\n * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n */\n\n\nfunction parseVariableDefinition(lexer) {\n  var start = lexer.token;\n\n  if (lexer.options.experimentalVariableDefinitionDirectives) {\n    return {\n      kind: _kinds.Kind.VARIABLE_DEFINITION,\n      variable: parseVariable(lexer),\n      type: (expect(lexer, _lexer.TokenKind.COLON), parseTypeReference(lexer)),\n      defaultValue: skip(lexer, _lexer.TokenKind.EQUALS) ? parseValueLiteral(lexer, true) : undefined,\n      directives: parseDirectives(lexer, true),\n      loc: loc(lexer, start)\n    };\n  }\n\n  return {\n    kind: _kinds.Kind.VARIABLE_DEFINITION,\n    variable: parseVariable(lexer),\n    type: (expect(lexer, _lexer.TokenKind.COLON), parseTypeReference(lexer)),\n    defaultValue: skip(lexer, _lexer.TokenKind.EQUALS) ? parseValueLiteral(lexer, true) : undefined,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Variable : $ Name\n */\n\n\nfunction parseVariable(lexer) {\n  var start = lexer.token;\n  expect(lexer, _lexer.TokenKind.DOLLAR);\n  return {\n    kind: _kinds.Kind.VARIABLE,\n    name: parseName(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * SelectionSet : { Selection+ }\n */\n\n\nfunction parseSelectionSet(lexer) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.Kind.SELECTION_SET,\n    selections: many(lexer, _lexer.TokenKind.BRACE_L, parseSelection, _lexer.TokenKind.BRACE_R),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Selection :\n *   - Field\n *   - FragmentSpread\n *   - InlineFragment\n */\n\n\nfunction parseSelection(lexer) {\n  return peek(lexer, _lexer.TokenKind.SPREAD) ? parseFragment(lexer) : parseField(lexer);\n}\n/**\n * Field : Alias? Name Arguments? Directives? SelectionSet?\n *\n * Alias : Name :\n */\n\n\nfunction parseField(lexer) {\n  var start = lexer.token;\n  var nameOrAlias = parseName(lexer);\n  var alias;\n  var name;\n\n  if (skip(lexer, _lexer.TokenKind.COLON)) {\n    alias = nameOrAlias;\n    name = parseName(lexer);\n  } else {\n    name = nameOrAlias;\n  }\n\n  return {\n    kind: _kinds.Kind.FIELD,\n    alias: alias,\n    name: name,\n    arguments: parseArguments(lexer, false),\n    directives: parseDirectives(lexer, false),\n    selectionSet: peek(lexer, _lexer.TokenKind.BRACE_L) ? parseSelectionSet(lexer) : undefined,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Arguments[Const] : ( Argument[?Const]+ )\n */\n\n\nfunction parseArguments(lexer, isConst) {\n  var item = isConst ? parseConstArgument : parseArgument;\n  return peek(lexer, _lexer.TokenKind.PAREN_L) ? many(lexer, _lexer.TokenKind.PAREN_L, item, _lexer.TokenKind.PAREN_R) : [];\n}\n/**\n * Argument[Const] : Name : Value[?Const]\n */\n\n\nfunction parseArgument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.Kind.ARGUMENT,\n    name: parseName(lexer),\n    value: (expect(lexer, _lexer.TokenKind.COLON), parseValueLiteral(lexer, false)),\n    loc: loc(lexer, start)\n  };\n}\n\nfunction parseConstArgument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.Kind.ARGUMENT,\n    name: parseName(lexer),\n    value: (expect(lexer, _lexer.TokenKind.COLON), parseConstValue(lexer)),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Fragments section.\n\n/**\n * Corresponds to both FragmentSpread and InlineFragment in the spec.\n *\n * FragmentSpread : ... FragmentName Directives?\n *\n * InlineFragment : ... TypeCondition? Directives? SelectionSet\n */\n\n\nfunction parseFragment(lexer) {\n  var start = lexer.token;\n  expect(lexer, _lexer.TokenKind.SPREAD);\n\n  if (peek(lexer, _lexer.TokenKind.NAME) && lexer.token.value !== 'on') {\n    return {\n      kind: _kinds.Kind.FRAGMENT_SPREAD,\n      name: parseFragmentName(lexer),\n      directives: parseDirectives(lexer, false),\n      loc: loc(lexer, start)\n    };\n  }\n\n  var typeCondition;\n\n  if (lexer.token.value === 'on') {\n    lexer.advance();\n    typeCondition = parseNamedType(lexer);\n  }\n\n  return {\n    kind: _kinds.Kind.INLINE_FRAGMENT,\n    typeCondition: typeCondition,\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * FragmentDefinition :\n *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n *\n * TypeCondition : NamedType\n */\n\n\nfunction parseFragmentDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'fragment'); // Experimental support for defining variables within fragments changes\n  // the grammar of FragmentDefinition:\n  //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n  if (lexer.options.experimentalFragmentVariables) {\n    return {\n      kind: _kinds.Kind.FRAGMENT_DEFINITION,\n      name: parseFragmentName(lexer),\n      variableDefinitions: parseVariableDefinitions(lexer),\n      typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\n      directives: parseDirectives(lexer, false),\n      selectionSet: parseSelectionSet(lexer),\n      loc: loc(lexer, start)\n    };\n  }\n\n  return {\n    kind: _kinds.Kind.FRAGMENT_DEFINITION,\n    name: parseFragmentName(lexer),\n    typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * FragmentName : Name but not `on`\n */\n\n\nfunction parseFragmentName(lexer) {\n  if (lexer.token.value === 'on') {\n    throw unexpected(lexer);\n  }\n\n  return parseName(lexer);\n} // Implements the parsing rules in the Values section.\n\n/**\n * Value[Const] :\n *   - [~Const] Variable\n *   - IntValue\n *   - FloatValue\n *   - StringValue\n *   - BooleanValue\n *   - NullValue\n *   - EnumValue\n *   - ListValue[?Const]\n *   - ObjectValue[?Const]\n *\n * BooleanValue : one of `true` `false`\n *\n * NullValue : `null`\n *\n * EnumValue : Name but not `true`, `false` or `null`\n */\n\n\nfunction parseValueLiteral(lexer, isConst) {\n  var token = lexer.token;\n\n  switch (token.kind) {\n    case _lexer.TokenKind.BRACKET_L:\n      return parseList(lexer, isConst);\n\n    case _lexer.TokenKind.BRACE_L:\n      return parseObject(lexer, isConst);\n\n    case _lexer.TokenKind.INT:\n      lexer.advance();\n      return {\n        kind: _kinds.Kind.INT,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case _lexer.TokenKind.FLOAT:\n      lexer.advance();\n      return {\n        kind: _kinds.Kind.FLOAT,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case _lexer.TokenKind.STRING:\n    case _lexer.TokenKind.BLOCK_STRING:\n      return parseStringLiteral(lexer);\n\n    case _lexer.TokenKind.NAME:\n      if (token.value === 'true' || token.value === 'false') {\n        lexer.advance();\n        return {\n          kind: _kinds.Kind.BOOLEAN,\n          value: token.value === 'true',\n          loc: loc(lexer, token)\n        };\n      } else if (token.value === 'null') {\n        lexer.advance();\n        return {\n          kind: _kinds.Kind.NULL,\n          loc: loc(lexer, token)\n        };\n      }\n\n      lexer.advance();\n      return {\n        kind: _kinds.Kind.ENUM,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case _lexer.TokenKind.DOLLAR:\n      if (!isConst) {\n        return parseVariable(lexer);\n      }\n\n      break;\n  }\n\n  throw unexpected(lexer);\n}\n\nfunction parseStringLiteral(lexer) {\n  var token = lexer.token;\n  lexer.advance();\n  return {\n    kind: _kinds.Kind.STRING,\n    value: token.value,\n    block: token.kind === _lexer.TokenKind.BLOCK_STRING,\n    loc: loc(lexer, token)\n  };\n}\n\nfunction parseConstValue(lexer) {\n  return parseValueLiteral(lexer, true);\n}\n\nfunction parseValueValue(lexer) {\n  return parseValueLiteral(lexer, false);\n}\n/**\n * ListValue[Const] :\n *   - [ ]\n *   - [ Value[?Const]+ ]\n */\n\n\nfunction parseList(lexer, isConst) {\n  var start = lexer.token;\n  var item = isConst ? parseConstValue : parseValueValue;\n  return {\n    kind: _kinds.Kind.LIST,\n    values: any(lexer, _lexer.TokenKind.BRACKET_L, item, _lexer.TokenKind.BRACKET_R),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectValue[Const] :\n *   - { }\n *   - { ObjectField[?Const]+ }\n */\n\n\nfunction parseObject(lexer, isConst) {\n  var start = lexer.token;\n  expect(lexer, _lexer.TokenKind.BRACE_L);\n  var fields = [];\n\n  while (!skip(lexer, _lexer.TokenKind.BRACE_R)) {\n    fields.push(parseObjectField(lexer, isConst));\n  }\n\n  return {\n    kind: _kinds.Kind.OBJECT,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectField[Const] : Name : Value[?Const]\n */\n\n\nfunction parseObjectField(lexer, isConst) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.Kind.OBJECT_FIELD,\n    name: parseName(lexer),\n    value: (expect(lexer, _lexer.TokenKind.COLON), parseValueLiteral(lexer, isConst)),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Directives section.\n\n/**\n * Directives[Const] : Directive[?Const]+\n */\n\n\nfunction parseDirectives(lexer, isConst) {\n  var directives = [];\n\n  while (peek(lexer, _lexer.TokenKind.AT)) {\n    directives.push(parseDirective(lexer, isConst));\n  }\n\n  return directives;\n}\n/**\n * Directive[Const] : @ Name Arguments[?Const]?\n */\n\n\nfunction parseDirective(lexer, isConst) {\n  var start = lexer.token;\n  expect(lexer, _lexer.TokenKind.AT);\n  return {\n    kind: _kinds.Kind.DIRECTIVE,\n    name: parseName(lexer),\n    arguments: parseArguments(lexer, isConst),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Types section.\n\n/**\n * Type :\n *   - NamedType\n *   - ListType\n *   - NonNullType\n */\n\n\nfunction parseTypeReference(lexer) {\n  var start = lexer.token;\n  var type;\n\n  if (skip(lexer, _lexer.TokenKind.BRACKET_L)) {\n    type = parseTypeReference(lexer);\n    expect(lexer, _lexer.TokenKind.BRACKET_R);\n    type = {\n      kind: _kinds.Kind.LIST_TYPE,\n      type: type,\n      loc: loc(lexer, start)\n    };\n  } else {\n    type = parseNamedType(lexer);\n  }\n\n  if (skip(lexer, _lexer.TokenKind.BANG)) {\n    return {\n      kind: _kinds.Kind.NON_NULL_TYPE,\n      type: type,\n      loc: loc(lexer, start)\n    };\n  }\n\n  return type;\n}\n/**\n * NamedType : Name\n */\n\n\nfunction parseNamedType(lexer) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.Kind.NAMED_TYPE,\n    name: parseName(lexer),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Type Definition section.\n\n/**\n * TypeSystemDefinition :\n *   - SchemaDefinition\n *   - TypeDefinition\n *   - DirectiveDefinition\n *\n * TypeDefinition :\n *   - ScalarTypeDefinition\n *   - ObjectTypeDefinition\n *   - InterfaceTypeDefinition\n *   - UnionTypeDefinition\n *   - EnumTypeDefinition\n *   - InputObjectTypeDefinition\n */\n\n\nfunction parseTypeSystemDefinition(lexer) {\n  // Many definitions begin with a description and require a lookahead.\n  var keywordToken = peekDescription(lexer) ? lexer.lookahead() : lexer.token;\n\n  if (keywordToken.kind === _lexer.TokenKind.NAME) {\n    switch (keywordToken.value) {\n      case 'schema':\n        return parseSchemaDefinition(lexer);\n\n      case 'scalar':\n        return parseScalarTypeDefinition(lexer);\n\n      case 'type':\n        return parseObjectTypeDefinition(lexer);\n\n      case 'interface':\n        return parseInterfaceTypeDefinition(lexer);\n\n      case 'union':\n        return parseUnionTypeDefinition(lexer);\n\n      case 'enum':\n        return parseEnumTypeDefinition(lexer);\n\n      case 'input':\n        return parseInputObjectTypeDefinition(lexer);\n\n      case 'directive':\n        return parseDirectiveDefinition(lexer);\n    }\n  }\n\n  throw unexpected(lexer, keywordToken);\n}\n\nfunction peekDescription(lexer) {\n  return peek(lexer, _lexer.TokenKind.STRING) || peek(lexer, _lexer.TokenKind.BLOCK_STRING);\n}\n/**\n * Description : StringValue\n */\n\n\nfunction parseDescription(lexer) {\n  if (peekDescription(lexer)) {\n    return parseStringLiteral(lexer);\n  }\n}\n/**\n * SchemaDefinition : schema Directives[Const]? { OperationTypeDefinition+ }\n */\n\n\nfunction parseSchemaDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'schema');\n  var directives = parseDirectives(lexer, true);\n  var operationTypes = many(lexer, _lexer.TokenKind.BRACE_L, parseOperationTypeDefinition, _lexer.TokenKind.BRACE_R);\n  return {\n    kind: _kinds.Kind.SCHEMA_DEFINITION,\n    directives: directives,\n    operationTypes: operationTypes,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * OperationTypeDefinition : OperationType : NamedType\n */\n\n\nfunction parseOperationTypeDefinition(lexer) {\n  var start = lexer.token;\n  var operation = parseOperationType(lexer);\n  expect(lexer, _lexer.TokenKind.COLON);\n  var type = parseNamedType(lexer);\n  return {\n    kind: _kinds.Kind.OPERATION_TYPE_DEFINITION,\n    operation: operation,\n    type: type,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n */\n\n\nfunction parseScalarTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'scalar');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: _kinds.Kind.SCALAR_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectTypeDefinition :\n *   Description?\n *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n */\n\n\nfunction parseObjectTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'type');\n  var name = parseName(lexer);\n  var interfaces = parseImplementsInterfaces(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  return {\n    kind: _kinds.Kind.OBJECT_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    interfaces: interfaces,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ImplementsInterfaces :\n *   - implements `&`? NamedType\n *   - ImplementsInterfaces & NamedType\n */\n\n\nfunction parseImplementsInterfaces(lexer) {\n  var types = [];\n\n  if (lexer.token.value === 'implements') {\n    lexer.advance(); // Optional leading ampersand\n\n    skip(lexer, _lexer.TokenKind.AMP);\n\n    do {\n      types.push(parseNamedType(lexer));\n    } while (skip(lexer, _lexer.TokenKind.AMP) || // Legacy support for the SDL?\n    lexer.options.allowLegacySDLImplementsInterfaces && peek(lexer, _lexer.TokenKind.NAME));\n  }\n\n  return types;\n}\n/**\n * FieldsDefinition : { FieldDefinition+ }\n */\n\n\nfunction parseFieldsDefinition(lexer) {\n  // Legacy support for the SDL?\n  if (lexer.options.allowLegacySDLEmptyFields && peek(lexer, _lexer.TokenKind.BRACE_L) && lexer.lookahead().kind === _lexer.TokenKind.BRACE_R) {\n    lexer.advance();\n    lexer.advance();\n    return [];\n  }\n\n  return peek(lexer, _lexer.TokenKind.BRACE_L) ? many(lexer, _lexer.TokenKind.BRACE_L, parseFieldDefinition, _lexer.TokenKind.BRACE_R) : [];\n}\n/**\n * FieldDefinition :\n *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n */\n\n\nfunction parseFieldDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  var args = parseArgumentDefs(lexer);\n  expect(lexer, _lexer.TokenKind.COLON);\n  var type = parseTypeReference(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: _kinds.Kind.FIELD_DEFINITION,\n    description: description,\n    name: name,\n    arguments: args,\n    type: type,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ArgumentsDefinition : ( InputValueDefinition+ )\n */\n\n\nfunction parseArgumentDefs(lexer) {\n  if (!peek(lexer, _lexer.TokenKind.PAREN_L)) {\n    return [];\n  }\n\n  return many(lexer, _lexer.TokenKind.PAREN_L, parseInputValueDef, _lexer.TokenKind.PAREN_R);\n}\n/**\n * InputValueDefinition :\n *   - Description? Name : Type DefaultValue? Directives[Const]?\n */\n\n\nfunction parseInputValueDef(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  expect(lexer, _lexer.TokenKind.COLON);\n  var type = parseTypeReference(lexer);\n  var defaultValue;\n\n  if (skip(lexer, _lexer.TokenKind.EQUALS)) {\n    defaultValue = parseConstValue(lexer);\n  }\n\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: _kinds.Kind.INPUT_VALUE_DEFINITION,\n    description: description,\n    name: name,\n    type: type,\n    defaultValue: defaultValue,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InterfaceTypeDefinition :\n *   - Description? interface Name Directives[Const]? FieldsDefinition?\n */\n\n\nfunction parseInterfaceTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'interface');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  return {\n    kind: _kinds.Kind.INTERFACE_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionTypeDefinition :\n *   - Description? union Name Directives[Const]? UnionMemberTypes?\n */\n\n\nfunction parseUnionTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'union');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var types = parseUnionMemberTypes(lexer);\n  return {\n    kind: _kinds.Kind.UNION_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    types: types,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionMemberTypes :\n *   - = `|`? NamedType\n *   - UnionMemberTypes | NamedType\n */\n\n\nfunction parseUnionMemberTypes(lexer) {\n  var types = [];\n\n  if (skip(lexer, _lexer.TokenKind.EQUALS)) {\n    // Optional leading pipe\n    skip(lexer, _lexer.TokenKind.PIPE);\n\n    do {\n      types.push(parseNamedType(lexer));\n    } while (skip(lexer, _lexer.TokenKind.PIPE));\n  }\n\n  return types;\n}\n/**\n * EnumTypeDefinition :\n *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n */\n\n\nfunction parseEnumTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'enum');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var values = parseEnumValuesDefinition(lexer);\n  return {\n    kind: _kinds.Kind.ENUM_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    values: values,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * EnumValuesDefinition : { EnumValueDefinition+ }\n */\n\n\nfunction parseEnumValuesDefinition(lexer) {\n  return peek(lexer, _lexer.TokenKind.BRACE_L) ? many(lexer, _lexer.TokenKind.BRACE_L, parseEnumValueDefinition, _lexer.TokenKind.BRACE_R) : [];\n}\n/**\n * EnumValueDefinition : Description? EnumValue Directives[Const]?\n *\n * EnumValue : Name\n */\n\n\nfunction parseEnumValueDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: _kinds.Kind.ENUM_VALUE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputObjectTypeDefinition :\n *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n */\n\n\nfunction parseInputObjectTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'input');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseInputFieldsDefinition(lexer);\n  return {\n    kind: _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputFieldsDefinition : { InputValueDefinition+ }\n */\n\n\nfunction parseInputFieldsDefinition(lexer) {\n  return peek(lexer, _lexer.TokenKind.BRACE_L) ? many(lexer, _lexer.TokenKind.BRACE_L, parseInputValueDef, _lexer.TokenKind.BRACE_R) : [];\n}\n/**\n * TypeSystemExtension :\n *   - SchemaExtension\n *   - TypeExtension\n *\n * TypeExtension :\n *   - ScalarTypeExtension\n *   - ObjectTypeExtension\n *   - InterfaceTypeExtension\n *   - UnionTypeExtension\n *   - EnumTypeExtension\n *   - InputObjectTypeDefinition\n */\n\n\nfunction parseTypeSystemExtension(lexer) {\n  var keywordToken = lexer.lookahead();\n\n  if (keywordToken.kind === _lexer.TokenKind.NAME) {\n    switch (keywordToken.value) {\n      case 'schema':\n        return parseSchemaExtension(lexer);\n\n      case 'scalar':\n        return parseScalarTypeExtension(lexer);\n\n      case 'type':\n        return parseObjectTypeExtension(lexer);\n\n      case 'interface':\n        return parseInterfaceTypeExtension(lexer);\n\n      case 'union':\n        return parseUnionTypeExtension(lexer);\n\n      case 'enum':\n        return parseEnumTypeExtension(lexer);\n\n      case 'input':\n        return parseInputObjectTypeExtension(lexer);\n    }\n  }\n\n  throw unexpected(lexer, keywordToken);\n}\n/**\n * SchemaExtension :\n *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n *  - extend schema Directives[Const]\n */\n\n\nfunction parseSchemaExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'schema');\n  var directives = parseDirectives(lexer, true);\n  var operationTypes = peek(lexer, _lexer.TokenKind.BRACE_L) ? many(lexer, _lexer.TokenKind.BRACE_L, parseOperationTypeDefinition, _lexer.TokenKind.BRACE_R) : [];\n\n  if (directives.length === 0 && operationTypes.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: _kinds.Kind.SCHEMA_EXTENSION,\n    directives: directives,\n    operationTypes: operationTypes,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ScalarTypeExtension :\n *   - extend scalar Name Directives[Const]\n */\n\n\nfunction parseScalarTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'scalar');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n\n  if (directives.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: _kinds.Kind.SCALAR_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectTypeExtension :\n *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n *  - extend type Name ImplementsInterfaces? Directives[Const]\n *  - extend type Name ImplementsInterfaces\n */\n\n\nfunction parseObjectTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'type');\n  var name = parseName(lexer);\n  var interfaces = parseImplementsInterfaces(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n\n  if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: _kinds.Kind.OBJECT_TYPE_EXTENSION,\n    name: name,\n    interfaces: interfaces,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InterfaceTypeExtension :\n *   - extend interface Name Directives[Const]? FieldsDefinition\n *   - extend interface Name Directives[Const]\n */\n\n\nfunction parseInterfaceTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'interface');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n\n  if (directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: _kinds.Kind.INTERFACE_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionTypeExtension :\n *   - extend union Name Directives[Const]? UnionMemberTypes\n *   - extend union Name Directives[Const]\n */\n\n\nfunction parseUnionTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'union');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var types = parseUnionMemberTypes(lexer);\n\n  if (directives.length === 0 && types.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: _kinds.Kind.UNION_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    types: types,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * EnumTypeExtension :\n *   - extend enum Name Directives[Const]? EnumValuesDefinition\n *   - extend enum Name Directives[Const]\n */\n\n\nfunction parseEnumTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'enum');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var values = parseEnumValuesDefinition(lexer);\n\n  if (directives.length === 0 && values.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: _kinds.Kind.ENUM_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    values: values,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputObjectTypeExtension :\n *   - extend input Name Directives[Const]? InputFieldsDefinition\n *   - extend input Name Directives[Const]\n */\n\n\nfunction parseInputObjectTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'input');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseInputFieldsDefinition(lexer);\n\n  if (directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * DirectiveDefinition :\n *   - Description? directive @ Name ArgumentsDefinition? on DirectiveLocations\n */\n\n\nfunction parseDirectiveDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'directive');\n  expect(lexer, _lexer.TokenKind.AT);\n  var name = parseName(lexer);\n  var args = parseArgumentDefs(lexer);\n  expectKeyword(lexer, 'on');\n  var locations = parseDirectiveLocations(lexer);\n  return {\n    kind: _kinds.Kind.DIRECTIVE_DEFINITION,\n    description: description,\n    name: name,\n    arguments: args,\n    locations: locations,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * DirectiveLocations :\n *   - `|`? DirectiveLocation\n *   - DirectiveLocations | DirectiveLocation\n */\n\n\nfunction parseDirectiveLocations(lexer) {\n  // Optional leading pipe\n  skip(lexer, _lexer.TokenKind.PIPE);\n  var locations = [];\n\n  do {\n    locations.push(parseDirectiveLocation(lexer));\n  } while (skip(lexer, _lexer.TokenKind.PIPE));\n\n  return locations;\n}\n/*\n * DirectiveLocation :\n *   - ExecutableDirectiveLocation\n *   - TypeSystemDirectiveLocation\n *\n * ExecutableDirectiveLocation : one of\n *   `QUERY`\n *   `MUTATION`\n *   `SUBSCRIPTION`\n *   `FIELD`\n *   `FRAGMENT_DEFINITION`\n *   `FRAGMENT_SPREAD`\n *   `INLINE_FRAGMENT`\n *\n * TypeSystemDirectiveLocation : one of\n *   `SCHEMA`\n *   `SCALAR`\n *   `OBJECT`\n *   `FIELD_DEFINITION`\n *   `ARGUMENT_DEFINITION`\n *   `INTERFACE`\n *   `UNION`\n *   `ENUM`\n *   `ENUM_VALUE`\n *   `INPUT_OBJECT`\n *   `INPUT_FIELD_DEFINITION`\n */\n\n\nfunction parseDirectiveLocation(lexer) {\n  var start = lexer.token;\n  var name = parseName(lexer);\n\n  if (_directiveLocation.DirectiveLocation.hasOwnProperty(name.value)) {\n    return name;\n  }\n\n  throw unexpected(lexer, start);\n} // Core parsing utility functions\n\n/**\n * Returns a location object, used to identify the place in\n * the source that created a given parsed object.\n */\n\n\nfunction loc(lexer, startToken) {\n  if (!lexer.options.noLocation) {\n    return new Loc(startToken, lexer.lastToken, lexer.source);\n  }\n}\n\nfunction Loc(startToken, endToken, source) {\n  this.start = startToken.start;\n  this.end = endToken.end;\n  this.startToken = startToken;\n  this.endToken = endToken;\n  this.source = source;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\nLoc.prototype.toJSON = Loc.prototype.inspect = function toJSON() {\n  return {\n    start: this.start,\n    end: this.end\n  };\n};\n/**\n * Determines if the next token is of a given kind\n */\n\n\nfunction peek(lexer, kind) {\n  return lexer.token.kind === kind;\n}\n/**\n * If the next token is of the given kind, return true after advancing\n * the lexer. Otherwise, do not change the parser state and return false.\n */\n\n\nfunction skip(lexer, kind) {\n  var match = lexer.token.kind === kind;\n\n  if (match) {\n    lexer.advance();\n  }\n\n  return match;\n}\n/**\n * If the next token is of the given kind, return that token after advancing\n * the lexer. Otherwise, do not change the parser state and throw an error.\n */\n\n\nfunction expect(lexer, kind) {\n  var token = lexer.token;\n\n  if (token.kind === kind) {\n    lexer.advance();\n    return token;\n  }\n\n  throw (0, _error.syntaxError)(lexer.source, token.start, \"Expected \".concat(kind, \", found \").concat((0, _lexer.getTokenDesc)(token)));\n}\n/**\n * If the next token is a keyword with the given value, return that token after\n * advancing the lexer. Otherwise, do not change the parser state and return\n * false.\n */\n\n\nfunction expectKeyword(lexer, value) {\n  var token = lexer.token;\n\n  if (token.kind === _lexer.TokenKind.NAME && token.value === value) {\n    lexer.advance();\n    return token;\n  }\n\n  throw (0, _error.syntaxError)(lexer.source, token.start, \"Expected \\\"\".concat(value, \"\\\", found \").concat((0, _lexer.getTokenDesc)(token)));\n}\n/**\n * Helper function for creating an error when an unexpected lexed token\n * is encountered.\n */\n\n\nfunction unexpected(lexer, atToken) {\n  var token = atToken || lexer.token;\n  return (0, _error.syntaxError)(lexer.source, token.start, \"Unexpected \".concat((0, _lexer.getTokenDesc)(token)));\n}\n/**\n * Returns a possibly empty list of parse nodes, determined by\n * the parseFn. This list begins with a lex token of openKind\n * and ends with a lex token of closeKind. Advances the parser\n * to the next lex token after the closing token.\n */\n\n\nfunction any(lexer, openKind, parseFn, closeKind) {\n  expect(lexer, openKind);\n  var nodes = [];\n\n  while (!skip(lexer, closeKind)) {\n    nodes.push(parseFn(lexer));\n  }\n\n  return nodes;\n}\n/**\n * Returns a non-empty list of parse nodes, determined by\n * the parseFn. This list begins with a lex token of openKind\n * and ends with a lex token of closeKind. Advances the parser\n * to the next lex token after the closing token.\n */\n\n\nfunction many(lexer, openKind, parseFn, closeKind) {\n  expect(lexer, openKind);\n  var nodes = [parseFn(lexer)];\n\n  while (!skip(lexer, closeKind)) {\n    nodes.push(parseFn(lexer));\n  }\n\n  return nodes;\n}","var parser = require('graphql/language/parser');\n\nvar parse = parser.parse;\n\n// Strip insignificant whitespace\n// Note that this could do a lot more, such as reorder fields etc.\nfunction normalize(string) {\n  return string.replace(/[\\s,]+/g, ' ').trim();\n}\n\n// A map docString -> graphql document\nvar docCache = {};\n\n// A map fragmentName -> [normalized source]\nvar fragmentSourceMap = {};\n\nfunction cacheKeyFromLoc(loc) {\n  return normalize(loc.source.body.substring(loc.start, loc.end));\n}\n\n// For testing.\nfunction resetCaches() {\n  docCache = {};\n  fragmentSourceMap = {};\n}\n\n// Take a unstripped parsed document (query/mutation or even fragment), and\n// check all fragment definitions, checking for name->source uniqueness.\n// We also want to make sure only unique fragments exist in the document.\nvar printFragmentWarnings = true;\nfunction processFragments(ast) {\n  var astFragmentMap = {};\n  var definitions = [];\n\n  for (var i = 0; i < ast.definitions.length; i++) {\n    var fragmentDefinition = ast.definitions[i];\n\n    if (fragmentDefinition.kind === 'FragmentDefinition') {\n      var fragmentName = fragmentDefinition.name.value;\n      var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);\n\n      // We know something about this fragment\n      if (fragmentSourceMap.hasOwnProperty(fragmentName) && !fragmentSourceMap[fragmentName][sourceKey]) {\n\n        // this is a problem because the app developer is trying to register another fragment with\n        // the same name as one previously registered. So, we tell them about it.\n        if (printFragmentWarnings) {\n          console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\"\n            + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\"\n            + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n        }\n\n        fragmentSourceMap[fragmentName][sourceKey] = true;\n\n      } else if (!fragmentSourceMap.hasOwnProperty(fragmentName)) {\n        fragmentSourceMap[fragmentName] = {};\n        fragmentSourceMap[fragmentName][sourceKey] = true;\n      }\n\n      if (!astFragmentMap[sourceKey]) {\n        astFragmentMap[sourceKey] = true;\n        definitions.push(fragmentDefinition);\n      }\n    } else {\n      definitions.push(fragmentDefinition);\n    }\n  }\n\n  ast.definitions = definitions;\n  return ast;\n}\n\nfunction disableFragmentWarnings() {\n  printFragmentWarnings = false;\n}\n\nfunction stripLoc(doc, removeLocAtThisLevel) {\n  var docType = Object.prototype.toString.call(doc);\n\n  if (docType === '[object Array]') {\n    return doc.map(function (d) {\n      return stripLoc(d, removeLocAtThisLevel);\n    });\n  }\n\n  if (docType !== '[object Object]') {\n    throw new Error('Unexpected input.');\n  }\n\n  // We don't want to remove the root loc field so we can use it\n  // for fragment substitution (see below)\n  if (removeLocAtThisLevel && doc.loc) {\n    delete doc.loc;\n  }\n\n  // https://github.com/apollographql/graphql-tag/issues/40\n  if (doc.loc) {\n    delete doc.loc.startToken;\n    delete doc.loc.endToken;\n  }\n\n  var keys = Object.keys(doc);\n  var key;\n  var value;\n  var valueType;\n\n  for (key in keys) {\n    if (keys.hasOwnProperty(key)) {\n      value = doc[keys[key]];\n      valueType = Object.prototype.toString.call(value);\n\n      if (valueType === '[object Object]' || valueType === '[object Array]') {\n        doc[keys[key]] = stripLoc(value, true);\n      }\n    }\n  }\n\n  return doc;\n}\n\nvar experimentalFragmentVariables = false;\nfunction parseDocument(doc) {\n  var cacheKey = normalize(doc);\n\n  if (docCache[cacheKey]) {\n    return docCache[cacheKey];\n  }\n\n  var parsed = parse(doc, { experimentalFragmentVariables: experimentalFragmentVariables });\n  if (!parsed || parsed.kind !== 'Document') {\n    throw new Error('Not a valid GraphQL document.');\n  }\n\n  // check that all \"new\" fragments inside the documents are consistent with\n  // existing fragments of the same name\n  parsed = processFragments(parsed);\n  parsed = stripLoc(parsed, false);\n  docCache[cacheKey] = parsed;\n\n  return parsed;\n}\n\nfunction enableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = true;\n}\n\nfunction disableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = false;\n}\n\n// XXX This should eventually disallow arbitrary string interpolation, like Relay does\nfunction gql(/* arguments */) {\n  var args = Array.prototype.slice.call(arguments);\n\n  var literals = args[0];\n\n  // We always get literals[0] and then matching post literals for each arg given\n  var result = (typeof(literals) === \"string\") ? literals : literals[0];\n\n  for (var i = 1; i < args.length; i++) {\n    if (args[i] && args[i].kind && args[i].kind === 'Document') {\n      result += args[i].loc.source.body;\n    } else {\n      result += args[i];\n    }\n\n    result += literals[i];\n  }\n\n  return parseDocument(result);\n}\n\n// Support typescript, which isn't as nice as Babel about default exports\ngql.default = gql;\ngql.resetCaches = resetCaches;\ngql.disableFragmentWarnings = disableFragmentWarnings;\ngql.enableExperimentalFragmentVariables = enableExperimentalFragmentVariables;\ngql.disableExperimentalFragmentVariables = disableExperimentalFragmentVariables;\n\nmodule.exports = gql;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"apollo-client\"));\n__export(require(\"apollo-link\"));\n__export(require(\"apollo-cache-inmemory\"));\nvar apollo_link_1 = require(\"apollo-link\");\nvar apollo_link_http_1 = require(\"apollo-link-http\");\nexports.HttpLink = apollo_link_http_1.HttpLink;\nvar apollo_link_state_1 = require(\"apollo-link-state\");\nvar apollo_link_error_1 = require(\"apollo-link-error\");\nvar apollo_cache_inmemory_1 = require(\"apollo-cache-inmemory\");\nexports.InMemoryCache = apollo_cache_inmemory_1.InMemoryCache;\nvar graphql_tag_1 = require(\"graphql-tag\");\nexports.gql = graphql_tag_1.default;\nvar apollo_client_1 = require(\"apollo-client\");\nvar PRESET_CONFIG_KEYS = [\n    'request',\n    'uri',\n    'credentials',\n    'headers',\n    'fetch',\n    'fetchOptions',\n    'clientState',\n    'onError',\n    'cacheRedirects',\n    'cache',\n];\nvar DefaultClient = (function (_super) {\n    __extends(DefaultClient, _super);\n    function DefaultClient(config) {\n        if (config === void 0) { config = {}; }\n        var _this = this;\n        if (config) {\n            var diff = Object.keys(config).filter(function (key) { return PRESET_CONFIG_KEYS.indexOf(key) === -1; });\n            if (diff.length > 0) {\n                console.warn('ApolloBoost was initialized with unsupported options: ' +\n                    (\"\" + diff.join(' ')));\n            }\n        }\n        var request = config.request, uri = config.uri, credentials = config.credentials, headers = config.headers, fetch = config.fetch, fetchOptions = config.fetchOptions, clientState = config.clientState, cacheRedirects = config.cacheRedirects, errorCallback = config.onError;\n        var cache = config.cache;\n        if (cache && cacheRedirects) {\n            throw new Error('Incompatible cache configuration. If providing `cache` then ' +\n                'configure the provided instance with `cacheRedirects` instead.');\n        }\n        if (!cache) {\n            cache = cacheRedirects\n                ? new apollo_cache_inmemory_1.InMemoryCache({ cacheRedirects: cacheRedirects })\n                : new apollo_cache_inmemory_1.InMemoryCache();\n        }\n        var stateLink = clientState\n            ? apollo_link_state_1.withClientState(__assign({}, clientState, { cache: cache }))\n            : false;\n        var errorLink = errorCallback\n            ? apollo_link_error_1.onError(errorCallback)\n            : apollo_link_error_1.onError(function (_a) {\n                var graphQLErrors = _a.graphQLErrors, networkError = _a.networkError;\n                if (graphQLErrors) {\n                    graphQLErrors.map(function (_a) {\n                        var message = _a.message, locations = _a.locations, path = _a.path;\n                        return console.log(\"[GraphQL error]: Message: \" + message + \", Location: \" +\n                            (locations + \", Path: \" + path));\n                    });\n                }\n                if (networkError) {\n                    console.log(\"[Network error]: \" + networkError);\n                }\n            });\n        var requestHandler = request\n            ? new apollo_link_1.ApolloLink(function (operation, forward) {\n                return new apollo_link_1.Observable(function (observer) {\n                    var handle;\n                    Promise.resolve(operation)\n                        .then(function (oper) { return request(oper); })\n                        .then(function () {\n                        handle = forward(operation).subscribe({\n                            next: observer.next.bind(observer),\n                            error: observer.error.bind(observer),\n                            complete: observer.complete.bind(observer),\n                        });\n                    })\n                        .catch(observer.error.bind(observer));\n                    return function () {\n                        if (handle) {\n                            handle.unsubscribe();\n                        }\n                    };\n                });\n            })\n            : false;\n        var httpLink = new apollo_link_http_1.HttpLink({\n            uri: uri || '/graphql',\n            fetch: fetch,\n            fetchOptions: fetchOptions || {},\n            credentials: credentials || 'same-origin',\n            headers: headers || {},\n        });\n        var link = apollo_link_1.ApolloLink.from([\n            errorLink,\n            requestHandler,\n            stateLink,\n            httpLink,\n        ].filter(function (x) { return !!x; }));\n        _this = _super.call(this, { cache: cache, link: link }) || this;\n        return _this;\n    }\n    return DefaultClient;\n}(apollo_client_1.default));\nexports.default = DefaultClient;\n//# sourceMappingURL=index.js.map","import ApolloBoost, { gql } from 'apollo-boost';\n\nconst client = new ApolloBoost({\n  uri: 'http://localhost:4000'\n});\n\nconst getUsers = gql`\n  query {\n    users {\n      id\n      name\n    }\n  }\n`;\n\nconst getPosts = gql`\n  query {\n    posts {\n      title\n      author {\n        name\n      }\n    }\n  }\n`;\n\nclient.query({ query: getUsers }).then((response) => {\n  let html = '';\n\n  response.data.users.forEach((user) => {\n    html += `\n      <div>\n        <h3>${ user.name }</h3>\n      </div>\n    `;\n  });\n\n  document.getElementById('users').innerHTML = html;\n});\n\nclient.query({ query: getPosts }).then((response) => {\n  let html = '';\n\n  response.data.posts.forEach((post) => {\n    html += `\n      <div>\n        <h3>${ post.title } - by ${ post.author.name }</h3>\n      </div>\n    `;\n  });\n\n  document.getElementById('posts').innerHTML = html;\n});\n"]}